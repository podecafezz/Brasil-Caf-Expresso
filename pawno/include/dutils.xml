<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="file:///C|/Documents and Settings/Fontes/Desktop/Jogos/GTA San Andreas/Serves/Serve Stunts/pawno/xml/pawndoc.xsl" type="text/xsl"?>
<doc source="C:\Documents and Settings\Fontes\Desktop\Jogos\GTA San Andreas\Serves\Serve Stunts\pawno\include\dutils.inc">
	<assembly>
		<name>dutils.inc</name>
	</assembly>
	<members>

		<!-- enumerations -->

		<!-- constants -->
		<member name="C:EOS" value="0">
			<referrer name="strtok"/>
		</member>
		<member name="C:false" value="0">
			<tagname value="bool"/>
			<referrer name="isNumeric"/>
			<referrer name="ValidEmail"/>
			<referrer name="fcopy"/>
			<referrer name="fcopytextfile"/>
			<referrer name="frename"/>
			<referrer name="frenametextfile"/>
			<referrer name="copy"/>
			<referrer name="equal"/>
		</member>
		<member name="C:true" value="1">
			<tagname value="bool"/>
			<referrer name="isNumeric"/>
			<referrer name="ValidEmail"/>
			<referrer name="fcopy"/>
			<referrer name="fcopytextfile"/>
			<referrer name="frename"/>
			<referrer name="frenametextfile"/>
			<referrer name="copy"/>
			<referrer name="equal"/>
		</member>

		<!-- variables -->
		<member name="F:PRIVATE_Last_Money">
			<referrer name="SetPlayerMoney"/>
		</member>

		<!-- functions -->
		<member name="M:GetPlayerMoney" syntax="GetPlayerMoney()">
			<stacksize value="1"/>
			<referrer name="SetPlayerMoney"/>
		</member>
		<member name="M:GivePlayerMoney" syntax="GivePlayerMoney()">
			<stacksize value="1"/>
			<referrer name="SetPlayerMoney"/>
		</member>
		<member name="M:HexToInt" syntax="HexToInt(string[])">
			<stacksize value="7"/>
			<dependency name="strlen"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			Return the value of an hex-string  @param string 
		</member>
		<member name="M:IntToHex" syntax="IntToHex(number)">
			<stacksize value="259"/>
			<dependency name="IntToHex"/>
			<param name="number">
			</param>
			Return the int as string  @param   number 
		</member>
		<member name="M:IntToStr" syntax="IntToStr(value)">
			<stacksize value="260"/>
			<dependency name="IntToStr"/>
			<dependency name="valstr"/>
			<param name="value">
			</param>
			Return the value as string  @param   value 
		</member>
		<member name="M:Now" syntax="Now()">
			<stacksize value="15"/>
			<dependency name="getdate"/>
			<dependency name="gettime"/>
			<dependency name="mktime"/>
			Return a timestamp 
		</member>
		<member name="M:SetPlayerMoney" syntax="SetPlayerMoney(playerid, howmuch)">
			<stacksize value="5"/>
			<dependency name="GetPlayerMoney"/>
			<dependency name="GivePlayerMoney"/>
			<dependency name="PRIVATE_Last_Money"/>
			<param name="playerid">
			</param>
			<param name="howmuch">
			</param>
			Sets money for player  @param   playerid  howmuch 
		</member>
		<member name="M:StrToInt" syntax="StrToInt(string[])">
			<stacksize value="4"/>
			<dependency name="strval"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			Return the string as int  @param   string 
		</member>
		<member name="M:StripNewLine" syntax="StripNewLine(string[])">
			<stacksize value="5"/>
			<referrer name="fcopytextfile"/>
			<dependency name="strlen"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			Strips Newline from the end of a string.  Idea: Y_Less, Bugfixing (when length=1) by DracoBlue  @param   string 
		</member>
		<member name="M:Time" syntax="Time()">
			<stacksize value="15"/>
			<dependency name="getdate"/>
			<dependency name="gettime"/>
			<dependency name="mktime"/>
			Return a timestamp 
		</member>
		<member name="M:ValidEmail" syntax="ValidEmail(email[])">
			<stacksize value="5"/>
			<dependency name="false"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="email">
				<paraminfo> [] </paraminfo>
			</param>
			Return if a Email is valid or not  @param   value 
		</member>
		<member name="M:copy" syntax="copy(dest[], source[], count)">
			<stacksize value="4"/>
			<dependency name="false"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="count">
			</param>
			Copies items from one array/string into another.  @param   dest  source  count 
		</member>
		<member name="M:delete" syntax="delete(string[], count)">
			<stacksize value="517"/>
			<dependency name="delete"/>
			<dependency name="format"/>
			<dependency name="ret_memcpy"/>
			<dependency name="strlen"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="count">
			</param>
			Deletes the first 'count' items of a array/string  @param   string[]  count 
		</member>
		<member name="M:div" syntax="div(up, down)">
			<stacksize value="5"/>
			<dependency name="floatround"/>
			<param name="up">
			</param>
			<param name="down">
			</param>
		</member>
		<member name="M:equal" syntax="equal(str1[], str2[], ignorecase)">
			<stacksize value="6"/>
			<dependency name="false"/>
			<dependency name="strcmp"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="str1">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="str2">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="ignorecase">
				<paraminfo>bool </paraminfo>
			</param>
			Checks wether two strings are equal (case insensetive)  @param   str1  str2 
		</member>
		<member name="M:fclose" syntax="fclose()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
			<referrer name="fcopytextfile"/>
		</member>
		<member name="M:fcopy" syntax="fcopy(oldname[], newname[])">
			<stacksize value="11"/>
			<referrer name="frename"/>
			<dependency name="false"/>
			<dependency name="fclose"/>
			<dependency name="fexist"/>
			<dependency name="fgetchar"/>
			<dependency name="flength"/>
			<dependency name="fopen"/>
			<dependency name="fputchar"/>
			<dependency name="true"/>
			<param name="oldname">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="newname">
				<paraminfo> [] </paraminfo>
			</param>
			Copies a file (Source file won't be deleted!)  @param   oldname  newname  @requires WINDOWS 
		</member>
		<member name="M:fcopytextfile" syntax="fcopytextfile(oldname[], newname[])">
			<stacksize value="264"/>
			<referrer name="frenametextfile"/>
			<dependency name="StripNewLine"/>
			<dependency name="false"/>
			<dependency name="fclose"/>
			<dependency name="fexist"/>
			<dependency name="fopen"/>
			<dependency name="format"/>
			<dependency name="fread"/>
			<dependency name="fwrite"/>
			<dependency name="true"/>
			<param name="oldname">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="newname">
				<paraminfo> [] </paraminfo>
			</param>
			Copies a textfile (Source file won't be deleted!)  @param   oldname  newname 
		</member>
		<member name="M:fexist" syntax="fexist()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
			<referrer name="fcopytextfile"/>
			<referrer name="frename"/>
			<referrer name="frenametextfile"/>
		</member>
		<member name="M:fgetchar" syntax="fgetchar()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
		</member>
		<member name="M:flength" syntax="flength()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
		</member>
		<member name="M:floatround" syntax="floatround()">
			<stacksize value="1"/>
			<referrer name="trunc"/>
			<referrer name="mod"/>
			<referrer name="div"/>
		</member>
		<member name="M:fopen" syntax="fopen()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
			<referrer name="fcopytextfile"/>
		</member>
		<member name="M:format" syntax="format()">
			<stacksize value="1"/>
			<referrer name="fcopytextfile"/>
			<referrer name="delete"/>
			<referrer name="strreplace"/>
		</member>
		<member name="M:fputchar" syntax="fputchar()">
			<stacksize value="1"/>
			<referrer name="fcopy"/>
		</member>
		<member name="M:fread" syntax="fread()">
			<stacksize value="1"/>
			<referrer name="fcopytextfile"/>
		</member>
		<member name="M:fremove" syntax="fremove()">
			<stacksize value="1"/>
			<referrer name="frename"/>
			<referrer name="frenametextfile"/>
		</member>
		<member name="M:frename" syntax="frename(oldname[], newname[])">
			<stacksize value="5"/>
			<dependency name="false"/>
			<dependency name="fcopy"/>
			<dependency name="fexist"/>
			<dependency name="fremove"/>
			<dependency name="true"/>
			<param name="oldname">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="newname">
				<paraminfo> [] </paraminfo>
			</param>
			Renames a file (Source file will be deleted!)  @param   oldname  newname  @requires WINDOWS (because fcopy does) 
		</member>
		<member name="M:frenametextfile" syntax="frenametextfile(oldname[], newname[])">
			<stacksize value="5"/>
			<dependency name="false"/>
			<dependency name="fcopytextfile"/>
			<dependency name="fexist"/>
			<dependency name="fremove"/>
			<dependency name="true"/>
			<param name="oldname">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="newname">
				<paraminfo> [] </paraminfo>
			</param>
			Renames a file (Source file will be deleted!)  @param   oldname  newname 
		</member>
		<member name="M:fwrite" syntax="fwrite()">
			<stacksize value="1"/>
			<referrer name="fcopytextfile"/>
		</member>
		<member name="M:getdate" syntax="getdate()">
			<stacksize value="1"/>
			<referrer name="Time"/>
			<referrer name="Now"/>
		</member>
		<member name="M:gettime" syntax="gettime()">
			<stacksize value="1"/>
			<referrer name="Time"/>
			<referrer name="Now"/>
		</member>
		<member name="M:hash" syntax="hash(str2[])">
			<stacksize value="260"/>
			<dependency name="hash"/>
			<dependency name="num_hash"/>
			<dependency name="valstr"/>
			<param name="str2">
				<paraminfo> [] </paraminfo>
			</param>
			Returns a hashed value in adler32 as string  @param   buf 
		</member>
		<member name="M:isNumeric" syntax="isNumeric(string[])">
			<stacksize value="5"/>
			<dependency name="false"/>
			<dependency name="strlen"/>
			<dependency name="true"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
		</member>
		<member name="M:mktime" syntax="mktime(hour, minute, second, day, month, year)">
			<stacksize value="16"/>
			<referrer name="Time"/>
			<referrer name="Now"/>
			<param name="hour">
			</param>
			<param name="minute">
			</param>
			<param name="second">
			</param>
			<param name="day">
			</param>
			<param name="month">
			</param>
			<param name="year">
			</param>
		</member>
		<member name="M:mod" syntax="mod(up, down)">
			<stacksize value="5"/>
			<dependency name="floatround"/>
			<param name="up">
			</param>
			<param name="down">
			</param>
		</member>
		<member name="M:num_hash" syntax="num_hash(buf[])">
			<stacksize value="5"/>
			<referrer name="hash"/>
			<dependency name="strlen"/>
			<param name="buf">
				<paraminfo> [] </paraminfo>
			</param>
			Returns a hashed value in adler32 as int  @param   buf 
		</member>
		<member name="M:ret_memcpy" syntax="ret_memcpy(source[], index, numbytes)">
			<stacksize value="260"/>
			<referrer name="delete"/>
			<referrer name="strreplace"/>
			<dependency name="ret_memcpy"/>
			<dependency name="strlen"/>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="index">
			</param>
			<param name="numbytes">
			</param>
			Copies items from one array/string into return.  @param   source  index (where to start, 0 is first)  numbytes (how much) 
		</member>
		<member name="M:set" syntax="set(dest[], source[])">
			<stacksize value="5"/>
			<dependency name="strlen"/>
			<param name="dest">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="source">
				<paraminfo> [] </paraminfo>
			</param>
			Sets a string's value to source.  @param   dest  source  count 
		</member>
		<member name="M:strcat" syntax="strcat()">
			<stacksize value="1"/>
			<referrer name="strreplace"/>
		</member>
		<member name="M:strcmp" syntax="strcmp()">
			<stacksize value="1"/>
			<referrer name="equal"/>
		</member>
		<member name="M:strfind" syntax="strfind()">
			<stacksize value="1"/>
			<referrer name="strreplace"/>
		</member>
		<member name="M:strlen" syntax="strlen()">
			<stacksize value="1"/>
			<referrer name="isNumeric"/>
			<referrer name="ValidEmail"/>
			<referrer name="HexToInt"/>
			<referrer name="StripNewLine"/>
			<referrer name="ret_memcpy"/>
			<referrer name="copy"/>
			<referrer name="delete"/>
			<referrer name="set"/>
			<referrer name="equal"/>
			<referrer name="strtok"/>
			<referrer name="num_hash"/>
			<referrer name="strreplace"/>
			<referrer name="strlower"/>
			<referrer name="strupper"/>
		</member>
		<member name="M:strlower" syntax="strlower(txt[])">
			<stacksize value="260"/>
			<dependency name="strlen"/>
			<dependency name="strlower"/>
			<dependency name="tolower"/>
			<param name="txt">
				<paraminfo> [] </paraminfo>
			</param>
			Returns the string with lowercase  @param   txt 
		</member>
		<member name="M:strreplace" syntax="strreplace(trg[], newstr[], src[])">
			<stacksize value="776"/>
			<dependency name="format"/>
			<dependency name="ret_memcpy"/>
			<dependency name="strcat"/>
			<dependency name="strfind"/>
			<dependency name="strlen"/>
			<dependency name="strreplace"/>
			<param name="trg">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="newstr">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="src">
				<paraminfo> [] </paraminfo>
			</param>
			Returns a string which has 'newstr' where 'trg' was before  @param   trg  newstr  src 
		</member>
		<member name="M:strtok" syntax="strtok(string[], &amp;index, seperator)">
			<stacksize value="258"/>
			<dependency name="EOS"/>
			<dependency name="strlen"/>
			<dependency name="strtok"/>
			<param name="string">
				<paraminfo> [] </paraminfo>
			</param>
			<param name="index">
				<paraminfo> &amp; </paraminfo>
			</param>
			<param name="seperator">
			</param>
			Returns an element of a string splitted by ' ', default index is 0.  @param   string  index 
		</member>
		<member name="M:strupper" syntax="strupper(txt[])">
			<stacksize value="260"/>
			<dependency name="strlen"/>
			<dependency name="strupper"/>
			<dependency name="toupper"/>
			<param name="txt">
				<paraminfo> [] </paraminfo>
			</param>
			Returns the string with uppercase  @param   txt 
		</member>
		<member name="M:strval" syntax="strval()">
			<stacksize value="1"/>
			<referrer name="StrToInt"/>
		</member>
		<member name="M:tolower" syntax="tolower()">
			<stacksize value="1"/>
			<referrer name="strlower"/>
		</member>
		<member name="M:toupper" syntax="toupper()">
			<stacksize value="1"/>
			<referrer name="strupper"/>
		</member>
		<member name="M:trunc" syntax="trunc(value)">
			<stacksize value="5"/>
			<dependency name="floatround"/>
			<param name="value">
				<paraminfo>Float </paraminfo>
			</param>
			Return the truncated value  @param   Float:value 
		</member>
		<member name="M:valstr" syntax="valstr()">
			<stacksize value="1"/>
			<referrer name="IntToStr"/>
			<referrer name="hash"/>
		</member>

	</members>
</doc>
