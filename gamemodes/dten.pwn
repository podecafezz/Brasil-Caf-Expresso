/*
		Brasil Cafe Expresso
			By Tercio_Felipe and Junior
				http://life-samp.blogspot.com/

====================================================================================

Comandos úteis:

	/scon login [senha/rcon]
	/setadmin [id] [level]
	/tiraradmdetodos
	/setarvip [id]
	/tirarvip [id]
	/tirarvipdetodos
	/vendertodascasas
	/vendertodasprops
	/vendertodosveiculos
	/casasdeletadas
	/propsdeletadas
	/veiculosdeletados
	/liberartodosportoes
	/criarcasa [preço] [interior/id]
	/mudarcasa [casa/id]
	/criarprop [preço]
	/mudarprop [prop/id]
	/deletarcasa [casa/id]
	/deletarprop [prop/id]
	/deletcar
	/ccar [veículo/id] [preço] [cor1] [cor2]
	/rmov
	/rvc
	/setcar [veículo/id] [cor1] [cor2]
	/rvu
	/rv
	/vehstatus
	/objstatusf
	/preprr
	/desbugarme
	/infoportao
	/criarportao [objeto/id]
	/mudarportao [portão/id]
	/modeloportao [objeto/id]
	/ajudaportao
	/darchave [id] [portão/id]
	/deletarportao [portão/id]
	/ping [desativar/ban]

A medida que for preciso estarei adicionando mais comandos existentes aqui.

====================================================================================

	Aqui lista vários sistemas contidos no script
		Caso queira desativar algum basta comentar com '//'
			Para ativa basta descomentar o mesmo retirando-se o '//'
				Após o procedimento prossiga compilando o script.

*/

//#define AntiCheatUser
#define HostNameRandUser
#define SystemAdminUser
//#define ValidNickUser
#define AudioStreamUser
#define EventTextUser
#define IntroTextUser
#define gText2User
#define gText3User
#define gText4User
#define SnakeUser
#define LaserUser
#define NeonsUser
#define VControleUser
#define SubwooferUser
#define MissilesUser
#define CapaceteUser
#define HeadShotUser
#define ArmaColadaUser
#define AnimLoopsUser
#define SAMsitesUser
#define CarInfosUser
#define BarUser
#define DamageUser
#define BomberUser
// =================================================================================

// Configurações de Informação
#define GM_VERSAO [RPG]Sub-Mundo

#define VCL_SERVER_IP 200.98.137.169:7792
#define VCL_SERVER_SITE www.submundo.tk

#define MAPA_NOME Brasil [RPG]Sub-Mundo

#if defined HostNameRandUser
	#define SERVER_NOME_1 "[RPG]_Brasil Sub Mundo - Oficial 24 Hrs"#
	#define SERVER_NOME_2 "Brasil Sub Mundo - Oficial 50 e Estudo 50 Go Go"#
	#define SERVER_NOME_3 "[RPG]_Brasil Sub Mundo - Oficial 24 Hrs"#
	#define SERVER_NOME_4 "Sua 2 Vida Comecar Aqui Brasil Sub Mundo"#
#endif

#define GAMEMOD_NOME ""#GM_VERSAO""

// Configurações de Limites
#define _CHANGE_NAME_BEFORE_KICK true

#define TimerFlood 1000
#define AlertFlood 3

#define MAX_CONNECTIONS_FROM_IP 3

#define MAX_PLAYER_LEVEL 50000
#define MAX_PLAYER_ESTUDO 500
#define MAX_PLAYER_EXP 5
#define MAX_PLAYER_CONCE 7
#define MAX_COMB 100
#define TEMPO_EXP 1
#define TEMPO_PRESO 4
#define TEMPO_ESTUDO 2
#define EXP_POR_TEMPO 1
#define LEVEL_POR_EXP 10
#define ESTUDO_POR_TEMPO 5

#define CHECK_RACER_DISTANCE 500.0
#define CHECK_RACER_SIZE 10.0

#define MAX_INT 20
#define MAX_PROPS 200
#define MAX_CASAS 500
#define MAX_PORTOES 200
#define MAX_CONCES 999

#define MAX_SENHA 16
#define MIN_SENHA 4

#if !defined AntiCheatUser
	#define MAX_IDLE_TIME 1
#endif

#define MAX_LOAD_OBJECTS 1000000
#define MAX_LOAD_VEHICLES 5000

#if defined BomberUser
	#define MAX_BOMBS 32
	#define UPDATE_TIME 100
	#define KEY_DROP_BOMB KEY_HANDBRAKE
	#define KEY_NEXT_BOMBTYPE KEY_ANALOG_DOWN
	#define KEY_PREV_BOMBTYPE KEY_ANALOG_UP
#endif

#define OrderTime 5000

#define SENHA_CONTA_NPC "d8sxs8b"

// Includes
#if defined AudioStreamUser
	#define WHOMADETHIS "Streaming Player"
#endif

#include <a_samp>
#include <a_http>
#include <mapandreas> // Mauzen Plugin
#include <sscanf2> // Y_Less Plugin
#include <streamer> // Incognito's Plugin
#include <SVStream> // Sandra Include
#include <SInclude> // Sandra Include
#include <Dini> // DracoBlue IncludeP
#include <VBan> // ViniBorn Include

#if defined AudioStreamUser
	#include <nplayer> // nPlayer Include
#endif

#if defined BarUser
	#include <progress> // Infernus' Include
#endif

#if defined SAMsitesUser
	#include <SAMsites0.4.1> // BockScar Include
#endif

#if defined MissilesUser
	#include <VM> // Missiles Include
#endif

#if defined AntiCheatUser
	#include <AntiCheat> // Gamer_Z's Plugin
#endif

#if defined HeadShotUser
	//#define DEBUG_HS
	#define NO_LOS_HS
	#define CONSERVATIVE
	#define DESTROY_LOS 500
	#define KEY_AIMFIRE 132
#endif

#if defined DamageUser
	#define pD_MaxHealth 100
	#define pD_Unarmed 7
	#define pD_brass 5
	#define pD_golf 4
	#define pD_knife 2
	#define pD_katana 1
	#define pD_dildo 6
	#define pD_flowers 10
	#define pD_grenades 1
	#define pD_colt 3
	#define pD_silenced 2.5
	#define pD_deagle 2
	#define pD_shotgun 2
	#define pD_sawn 2.5
	#define pD_combat 3
	#define pD_SMG 4
	#define pD_MP5 3.5
	#define pD_AK47 3
	#define pD_M4 3.2
	#define pD_TEC9 4
	#define pD_rifle 1
	#define pD_launchers 1
	#define pD_minigun 1
	#define pD_spraycan 11
#endif

// Espiar
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2

// Loop
#define Loop(%0,%1) for(new %0 = 0; %0 < %1; %0++)

// Outros
#define player_x 1472.7699
#define player_y -1626.6316
#define player_z 14.0469
#define player_angle 27.3939
#define camera_x 1473.01
#define camera_y -1621.39
#define camera_z 15.60
#define lookat_x 1471.11
#define lookat_y -1625.93
#define lookat_z 14.72
#define moving_speed 10

// Cores
#define Aviso 0xFF2F2FAA
#define cor33 0xBBBB00AA
#define tcadm 0x33AAFFFF
#define cmdadm 0xBBDDFFAA
#define Blue 0x33AAFFFF
#define verdel 0x9ACD32AA
#define VERDE 0x33AA33AA
#define BRANCO 0xFFFFFFAA
#define AMARELO 0xFFFF00AA
#define LARANJA 0xFF6600AA
#define VERMELHO 0xFF0000AA
#define VERDECLARO 0x00FF0CAA
#define VERDEMEDIO 0xa5b1A3AA
#define VERDEFRACO 0x80cf80AA
#define RED 0xff0000ff
#define GRAY 0xC0C0C0AA
#define GREEN 0x16EB43FF
#define WHITE 0xFFFFFFAA
#define BLUEWHITE 0x99FFFFAA
#define msg2 0x93C9FFAA
#define msgdm 0x8AD9FFAA
#define msgdm2 0xFFFFB3AA
#define msgdm3 0xFFD1A4AA
#define COLOR_RED 0xFF0000AA
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_WHITE 0xFFFFFFAA
#define roxo 0x9E3EFFAA
#define Azul 0x00FFFFAA
#define Verde 0x00D700AA
#define Cinza 0x660000AA
#define Preto 0x000000AA
#define Branco 0xFFFFFFAA
#define Amarelo	0xFFFF00FF
#define Violeta	0x9955DEEE
#define Vermelho 0xFF0000AA

// Cores de Profições
#define C_MotoristaP 0xC0C0C0AA
#define C_Mendigo 0x660000AA
#define C_LSPD 0x33CCFFAA
#define C_YKZ 0xFF0000AA
#define C_MRN 0xF7B0F5AA
#define C_Empregada 0xFF80C0AA
#define C_Pedreiro 0x9ACD32AA
#define C_Gari 0xFF6600AA
#define C_Lixeiro 0x00D700AA
#define C_Temac 0x33AAFFFF
#define C_Correio 0xFFFF00AA
#define C_Estudante 0xBBBB00AA
#define C_Flanelinha 0xBBBB00AA
#define C_Cantor 0x8AD9FFAA
#define C_Poeta 0xFFFFB3AA
#define C_Guarda 0x00EAEAAA
#define C_PR 0x009F9FAA
#define C_PM 0x0000F2AA
#define C_PC 0x6A6A35AA
#define C_PF 0xFF8306AA
#define C_Delegado 0x510051AA
#define C_Bope 0x7777FFAA
#define C_Swat 0x33CCFFAA
#define C_Espião 0x008000AA
#define C_Traficante 0xA60000AA
#define C_Assasino 0x00FF00AA
#define C_Terrorista 0x9B4E00AA
#define C_Sequestrador 0x555555AA
#define C_AssasinoP 0x316262AA
#define C_Jornalista 0x480091AA
#define C_Fotografo 0x9595FFAA
#define C_Reporter 0xFFAC84AA
#define C_Ancora 0xFFFFB0AA
#define C_Meteoro 0x00D5D5AA
#define C_Mecanico 0xFF9191AA
#define C_Rapper 0xFAD605AA
#define C_VendedorSkin 0xFF97FFAA
#define C_VendedorCarro 0x7CB630AA
#define C_Frentista 0xBBBB00AA
#define C_Taxista 0xFFFF04AA
#define C_Paramedico 0xFFA6A6AA
#define C_FBI 0xB0B000AA
#define C_Interpol 0x934FF6F6
#define C_Aposentado 0x8080C0AA
#define C_Advogado 0x800080AA
#define C_GuardaCostas 0x909090AA
#define C_Corredor 0xFF8000AA
#define C_Prostituta 0xFF80C0AA
#define C_Promoter 0xFF80C0AA
#define C_SegVila 0x79E1FFAA
#define C_Assaltante 0x0053A6AA
#define C_Bibliotecario 0x00E1E1AA
#define C_TraficanteD 0xFFAD5BAA
#define C_Prefeito 0x790079AA
#define C_Presidente 0xAAAAAAAA
#define C_vice/presidente 0xFFFFB9AA
#define C_Mafia 0x00FF00AA
#define C_Drifter 0xFF0000AA
#define C_Professor 0xBDBDBDAA
#define C_Empregador 0x00FF00AA
#define C_AtiradorElite 0xFF8800AA
#define C_Ninja 0x000000AA
#define C_Maquinista 0x666264AA
#define C_Caminhoneiro 0x4A4444AA

// Profissões
#define Desempregado 0
#define MotoristaP 1
#define Guarda 2
#define Policial_R 3
#define Policial_M 4
#define Policial_C 5
#define Policial_F 6
#define Delegado 7
#define Bope 8
#define Swat 9
#define Espião 10
#define Traficante 11
#define Assasino 12
#define Terrorista 13
#define Sequestrador 14
#define AssasinoProfissional 15
#define Jornalista 16
#define Fotografo 17
#define Reporter 18
#define Ancora 19
#define Meteorologista 20
#define Mecanico 21
#define Rapper 22
#define VendedorSkin 23
#define VendedorCarro 24
#define Frentista 25
#define Taxista 26
#define Paramedico 27
#define FBI 28
#define Interpol 31
#define Aposentado 33
#define Advogado 34
#define GuardaCostas 35
#define Corredor 36
#define Prostituta 37
#define Promoter 38
#define SegVila 40
#define Assaltante 41
#define Bibliotecario 43
#define TraficanteD 44
#define Prefeito 46
#define Presidente 47
#define vice/presidente 49
#define Mendigo 50
#define Empregada 51
#define Pedreiro 52
#define Gari 53
#define Lixeiro 54
#define Temac 55
#define Correio 56
#define Estudante 57
#define Flanelinha 58
#define Cantor 59
#define Poeta 60
#define LSPD 61
#define YKZ 62
#define MRN 63
#define Mafia 64
#define Drifter 65
#define Professor 66
#define Empregador 67
#define AtiradorElite 68
#define Ninja 69
#define Maquinista 70
#define Caminhoneiro 71

// Salários
#define SalarioMinimo 500
#define SalarioMaximo 1000000
#define SalarioOrg 16000
#define Salario_MotoristaP 300
#define Salario_Guarda 1200
#define Salario_Policial_R 1600
#define Salario_Policial_M 1600
#define Salario_Policial_C 2000
#define Salario_Policial_F 2200
#define Salario_Delegado 5000
#define Salario_Bope 7000
#define Salario_Swat 7000
#define Salario_Espião 13000
#define Salario_Traficante 800
#define Salario_Assasino 500
#define Salario_Terrorista 1700
#define Salario_Sequestrador 900
#define Salario_AssasinoProfissional 800
#define Salario_Jornalista 1400
#define Salario_Fotografo 1140
#define Salario_Reporter 1400
#define Salario_Ancora 1400
#define Salario_Meteorologista 1140
#define Salario_Mecanico 1700
#define Salario_Rapper 1000
#define Salario_VendedorSkin 1200
#define Salario_VendedorCarro 1500
#define Salario_Frentista 1000
#define Salario_Taxista 2000
#define Salario_Paramedico 999
#define Salario_FBI 5000
#define Salario_Interpol 5000
#define Salario_Drifter 12000
#define Salario_Professor 40000
#define Salario_Aposentado 5000
#define Salario_Advogado 1000
#define Salario_GuardaCostas 300
#define Salario_Corredor 500
#define Salario_Prostituta 500
#define Salario_Promoter 600
#define Salario_SegVila 500
#define Salario_Assaltante 500
#define Salario_Bibliotecario 650
#define Salario_TraficanteD 350
#define Salario_vice/presidente 150000
#define Salario_Prefeito 200000
#define Salario_Presidente 300000
#define Salario_Mendigo 1300
#define Salario_LSPD 5000
#define Salario_YKZ 52500
#define Salario_MRN 12000
#define Salario_Empregada 320
#define Salario_Pedreiro 750
#define Salario_Gari 856
#define Salario_Lixeiro 450
#define Salario_Temac 1500
#define Salario_Correio 1000
#define Salario_Estudante 500
#define Salario_Flanelinha 200
#define Salario_Cantor 1450
#define Salario_Poeta 950
#define Salario_Mafia 15000
#define Salario_Empregador 6200
#define Salario_AtiradorElite 8500
#define Salario_Ninja 8000
#define Salario_Maquinista 3000
#define Salario_Caminhoneiro 35000
#define Fianca 10000

// Radar
#define Text_Under_Minimap "~g~Local Atual: ~w~San Andreas"

// Menus
#define menuarmas 1
#define pistolas 2
#define microsmg 3
#define shotguns 4
#define SMGs 5
#define rifle 6
#define assalto 7
#define outras 8
#define REGISTRO 9
#define LOGIN 10
#define AVISO 11
#define Menugame 12
#define timecs 13
#define Regras 14
#define mudarsenha 15
#define organizadores 16
#define Creditos 17
#define banco 18
#define depositar 19
#define sacar 20
#define tunar 21
#define tunarroda 22
#define tunarcor 23
#define tunarpaint 24
#define bomberman 25
#define menuprof 26
#define Honestas 27
#define Honestas2 28
#define Desonestas 29
#define Governo 30
#define mp3	31
#define DP 32
#define lojautilidades 33
#define skins 34
#define pergunta1 35
#define pergunta2 36
#define acertouperguntas 37
#define erro 38
#define Lutas 39
#define Mudouluta 40
#define comidas 41
#define viagens 42
#define viagens2 43
#define cidades 44
#define Faculdade 45
#define Armas 46
#define Hotel 47
#define mudarnick 48
#define mudarnick2 49
#define skinnovato 50
#define Baixa 51
#define monsterdown 52

#if defined MissilesUser
	#define missiles 53
#endif

#define vcontrole 54
#define escolherid 55

#if defined SAMsitesUser
	#define samcontroleg 56
	#define samcontrolea 57
#endif

#if defined AudioStreamUser
	#define streamlink 58
	#define streamlink2 59
	#define streamlink3 60
	#define streamlink4 61
#endif

#define portaoeditor 62
#define portaosalve 63
#define deletcarconce 64
#define portaodelet 65
#define rmovinfo 66
#define sisadminfo 67
#define modeloveiculo 68
#define vehicleorder 69
#define casaorder 70
#define proporder 71
#define casaopt 72
#define propopt 73
#define cvdmorador 74
#define expmorador 75
#define propnome 76
#define playersimp 77
#define eventos 78

// Casamento
#define pedidocasamento 79
#define pedidoaceito 80
#define pedidorecusado 81
#define cerimonia 82
#define divorcio 83

#define industriais 84

// SNAKE
#if defined SnakeUser
	#define SNAKE_DIALOG 101
	#define LEVEL_DIALOG 111
	#define RULES_DIALOG 121
#endif

#if defined SubwooferUser
	#define subwoofer 7212
#endif

// -------
#define SlotAKeFUZIL 1
#define SlotEscopeta 2
// -------

#define tmp2
#define SLOT 1

// Tuning
#define nitro 1010
#define rodawire 1080
#define suspensao 1087

#if defined NeonsUser
	#define NEON 1337
#endif

// Players On
#define SECp 1000

// REGISTRO
#define PASTA_CONTAS "/Contas/%s.ini"
#define PASTA_CASAS "/Casas/casa%d.ini"
#define PASTA_PROPS "/Props/prop%d.ini"
#define PASTA_CONCE "/Conce/carro%d.ini"
#define PASTA_Int "/Interiores/int%d.ini"
#define PASTA_PORTOES "/Portoes/p%d.ini"

#define Masculino 1
#define Feminino 2

native WP_Hash(buffer[], len, const str[]);

stock bool:bIllegalPlayer[MAX_PLAYERS] = false, szTmpKickName[MAX_PLAYER_NAME];

new TimersX[13];

// MoveCamera
new Float:p_x,
	Float:p_y,
	Float:p_z;

// Radar
new UpdateSeconds = 1;
new maxradar = 4;

enum SaveDtenPlayerPosEnum
{
	Float:LastX,
	Float:LastY,
	Float:LastZ
};

new radarobject;
new SaveDtenPlayerPos[MAX_PLAYERS][SaveDtenPlayerPosEnum];
new distance1[MAX_PLAYERS];

// =================================================================================
enum pInfo
{
	bool:SCON,
	Senha[MAX_SENHA+1],
	cSenha[MAX_SENHA+1],

	Logged,
	LoginsFalsos,

	bool:SpawnDance,
	Float:SpawnAngle,
	SpawnTimer,

	_Faculdade,
	_Level,
	_EXP,
	_SaldoBancario,
	_Profissao,
	_CasouCom[MAX_PLAYER_NAME],
	_CartaoTelefonico,
	_Celular,
	_MP3,
	_Skin,
	_LaserP,
	_TCapacete,
	_AntiHS,
	_Porte,
	_HabTerrestre,
	_HabNautica,
	_HabAerea,
};

// Votação
enum e_votacao
{
	bool:iniciada,
	sim,
	nao,
	total
};

new rconpass[20];
new Confirma[MAX_PLAYERS];
new emcasa[MAX_PLAYERS];
new votacao[e_votacao];
new votou[MAX_PLAYERS];
new convitede[MAX_PLAYERS];
new pAdmin[MAX_PLAYERS];
new morar[MAX_PLAYERS];
new moradia[MAX_PLAYERS];
new MoradiaTime[MAX_PLAYERS];
new cCarro[MAX_PLAYERS];
new proximoint;
new proximocarro;
new proximacasa;
new proximaprop;
new proximoportao;

// Casamento
new pedidode[MAX_PLAYERS];
new casar[MAX_PLAYERS];

#if defined HeadShotUser
	#if defined DEBUG_HS
new count1, count2;
	#endif
#endif

// Anti AFK
#if !defined AntiCheatUser
enum pPos
{
	Float:LastX,
	Float:LastY,
	Float:LastZ,
};

new	PlayerLastPos[MAX_PLAYERS][pPos],
	PlayerAfkTicks[MAX_PLAYERS],
	Float:PlayerCurrentPos[3];
#endif

new FloodAlert[MAX_PLAYERS],
	FloodTimer[MAX_PLAYERS];

#if defined BomberUser
enum bombEnum
{
	bombName[32],
	expID,
	Float:expRadius,
	Float:accuracy,
	bombModel,
	bombModelRot,
	expDelay,
	reloadTime,
	dropAtOnce,
	dropAtOnceDelay
}

new gBombTypes[][bombEnum] =
{
	{"Desligado", 0, 0.0, 0.0, 0, 0, 0, 0, 0, 0},
	{"Bomba de Incendio", 1, 4.0, 8.0, 1636, 270, 0, 200, 1, 0},
	{"Bomba Grande", 7, 4.5, 10.0, 3790, 270, 0, 750, 1, 0},
	{"Bomba Guiada a Laser", 6, 5.0, 25.0, 1636, 270, 0, 1500, 1, 0},
	{"Bomba Pesada", -1, 5.0, 15.0, 345, 270, 0, 10000, 1, 0},
	{"Bomba Anti-Missil", -2, 150.0, 35.0, 354, 0, 5000, 10000, 1, 0},
	{"Bomba Nuclear", -3, 4.0, 10.0, 3790, 270, 0, 10000, 1, 0},
	{"Bombas Fragmentadas", 11, 2.5, 3.0, 1636, 270, 0, 15000, 12, 0},
	{"Bombas em Chuva", 11, 2.5, 5.5, 1636, 270, 0, 15000, 12, 100}
};

new gVehicleBombs[][] =
{
	{476, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0},
	{593, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{553, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1},
	{513, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{512, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{577, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	{511, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0},
	{460, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{519, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1},
	{548, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0},
	{417, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1},
	{487, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0},
	{497, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0},
	{563, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
	{447, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{469, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
	{425, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0},
	{592, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};
#endif

new MSGs[19][] =
{
	"» [BCE] - Seja Bem Vindo ao Brasil Cafe Expresso",
	"» [BCE] - Para ver as informações de um veículo use próximo a ele, /infocarro.",
	"» [BCE] - Está afim de alguem? então peça em casamento. Use = /pedircasamento",
//	"» [BCE] - Usando = /comprarveiculo [conceid] de longe você conseguirá comprar seu Veiculo.",
	"» [BCE] - Não mate em área pública pois poderá ser punido imediatamente.",
	"» [BCE] - Cuidado com radares de velocidade, veja detalhes, Usando = /ajudaradar",
	"» [BCE] - Precisa de ajuda ou ta com dúvidas? chame um Administrador online.",
	"» [BCE] - Reporte abusos, bugs, erros, ou peça ajuda, Usando = /Relatorio",
	"» [BCE] - Quer comprar um carro? é facil, Use = /Detran",
	"» [BCE] - Adicione nosso IP fixo: "#VCL_SERVER_IP"",
	"» [BCE] - Para ver os comandos do servidor, Use = /comandos",
	"» [BCE] - Quer saber oque fazer para Upar? Use = /verlevel",
	"» [BCE] - Veja os créditos do servidor, Use = /creditos",
	"» [BCE] - Nunca esqueça de ler as regras, Use = /regras",
	"» [BCE] - Para ver os teleportes, Use = /teles",
	"» [BCE] - Em Breve nosso Forum estará disponivel.",
	"» [BCE] - Voce Tem Uma casa, Use = /minhacasa",
	"» [BCE] - Voce Tem Uma Prop, Use = /minhaprop",
	"» [BCE] - Atenção, cada jogador, só poderá adiquirir 7 Carros, Compre o seu no /Detran. ",
	"» [BCE] - Equipe Brasil Cafe Expresso, agradeçe sua presença."
};

new peixes[10][] =
{
	"Branquinha",
	"Tucunaré",
	"Bicuda",
	"Piranha",
	"Traira",
	"Pacu",
	"Arraia",
	"Tucupá",
	"Piau",
	"Jaú"
};

new Presa[10][] =
{
	"Pau-Brasil",
	"Eucalipto",
	"Mangueira",
	"Coqueiro",
	"Jequitibá",
	"Figueira-da-terra",
	"Pimenteira",
	"Arnica",
	"Cerejeira",
	"Bromélia"
};

new COLORS[8] =
{
	0xFFFF00AA,
	0x80FF00AA,
	0xFFFFFFAA,
	0x0080FFAA,
	0xFF00FFAA,
	0x00FFFFAA,
	0x0080C0AA,
	0x8F20FFAA
};

new CORESTEXT[8][] =
{
	"33AA33",
	"FFFF00",
	"FF6600",
	"00FF0C",
	"ff0000",
	"99FFFF",
	"9E3EFF",
	"00FFFF"
};

new WeatherName[6][] =
{
	"Dia claro, sol forte, máxima de 36°.",
	"Dia claro, ótimo para pescar, máxima de 30°.",
	"Nublado, possibilidade de chuva, melhor não sair de casa, máxima 25°.",
	"Dia frio, vista seus casacos.. Máxima de 15°.",
	"Dia claro, céu limpo, Máxima de 37º.",
	"Sol forte, inicio de verão, Máxima de 43º."
};

// Live Bar Car
new Text3D:CarLabel[MAX_PLAYERS];
new bool:LabelActive[MAX_PLAYERS];
new Float:OldHealth[MAX_PLAYERS];
new Float:OldDamage[MAX_PLAYERS];
new Float:CDamage[MAX_PLAYERS];
new timercar[MAX_PLAYERS];

// NPC's TextLabel
new Text3D:NPCLabel[MAX_PLAYERS];

// Prof Info TextLabel
new Text3D:ProfLabel[MAX_PLAYERS];

// Casas Info Text
new Text3D:ctextoid[MAX_CASAS];

// Props Info Text
new Text3D:ptextoid[MAX_PROPS];

// Portões Info Text
new Text3D:potextoid[MAX_PORTOES];

new testtime;
new incar[MAX_PLAYERS];
new intest[MAX_PLAYERS];

#if defined AudioStreamUser
new PlayerStream[MAX_PLAYERS];
new PlayerStreamLink[MAX_PLAYERS][256];
new StreamRadius[MAX_PLAYERS][32];
#endif

new Float:CasaX[MAX_PLAYERS];
new Float:CasaY[MAX_PLAYERS];
new Float:CasaZ[MAX_PLAYERS];

// Corrida Pista 1
new InRacePista1[MAX_PLAYERS] = 0;
new RaceChecksPista1[MAX_PLAYERS][20];
new VehiclesFixPista1[6];
new EventoCorrida1 = 0;

// Corrida Pista 2
new InRacePista2[MAX_PLAYERS] = 0;
new RaceChecksPista2[MAX_PLAYERS][16];
new VehiclesFixPista2[10];
new EventoCorrida2 = 0;

// Corrida Pista 3
new InRacePista3[MAX_PLAYERS] = 0;
new RaceChecksPista3[MAX_PLAYERS][45];
new VehiclesFixPista3[10];
new EventoCorrida3 = 0;

// Fliping Pista 4
new InRacePista4[MAX_PLAYERS] = 0;
new RaceChecksPista4[MAX_PLAYERS][24];
new VehiclesFixPista4[4];
new EventoCorrida4 = 0;

// Fliping Pista 5
new InRacePista5[MAX_PLAYERS] = 0;
new RaceChecksPista5[MAX_PLAYERS][36];
new VehiclesFixPista5[4];
new EventoCorrida5 = 0;

// Campeonato de Bike
new InRacePista6[MAX_PLAYERS] = 0;
new RaceChecksPista6[MAX_PLAYERS][11];
new VehiclesFixPista6[6];
new EventoCorrida6 = 0;

// Maquinista
new InRacePistaTrain[MAX_PLAYERS] = 0;
new RaceChecksPistaTrain[MAX_PLAYERS][6];

new CageObjects[MAX_PLAYERS][8];

new Text3D:TextsFix[63];
new CheckpointsFix[83];
new GangZonesFix[10];
new MapIconsFix[73];
new PickupsFix[76];
new ObjectsFix[25];
new VehiclesFix[79];

new CountAllLoadedObjects = 0;
new ObjectsLoaded[MAX_LOAD_OBJECTS];

new CountAllLoadedVehicles = 0;
new VehiclesLoaded[MAX_LOAD_VEHICLES];

#if defined SAMsitesUser
new SAMFix[6];
new gTeam[MAX_PLAYERS];
new aTeam[MAX_PLAYERS];
#endif

// Nomes do servidor
#if defined HostNameRandUser
new SVNAMES[4][] =
{
	SERVER_NOME_1,
	SERVER_NOME_2,
	SERVER_NOME_3,
 SERVER_NOME_4
};
#endif

new minutos[MAX_PLAYERS] = 0;
new NaFaculdade[MAX_PLAYERS] = 0;
new Conversa[MAX_PLAYERS] = 0;
new cercado[MAX_PLAYERS] = 0;

// ================================ Anim Loops =====================================
#if defined AnimLoopsUser
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
#endif
// =================================================================================

// Sistema do celular
new sender, id2, gc, docommand, tmmp2[256], str3[128], InCall[MAX_PLAYERS], GetCall[MAX_PLAYERS];

// TEXT LEVEL E EXP
#if defined gText2User
new Text:gText2[MAX_PLAYERS];
#endif

#if defined gText3User
new Text:gText3;
#endif

#if defined gText4User
new Text:gText4[MAX_PLAYERS];
#endif

#if defined CarInfosUser
new Text:CarInfos1[MAX_PLAYERS];
new Text:CarInfos2[MAX_PLAYERS];
new Text:CarInfos3[MAX_PLAYERS];
new Text:CarInfos4[MAX_PLAYERS];
#endif

// Barras
#if defined BarUser
new Bar:vVelo[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:vComb[MAX_PLAYERS] = {INVALID_BAR_ID, ...},
	Bar:vLataria[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
#endif

// SNAKE
#if defined SnakeUser
new Text:Snake[MAX_PLAYERS][23];
new Text:CellText[MAX_PLAYERS];
new Text:sCount[MAX_PLAYERS];
new Text:Background;
new Text:LevelText[9];
#endif

// Tela de início
#if defined IntroTextUser
new Text:Intro[MAX_PLAYERS][12];
new TEXTRAND[MAX_PLAYERS];

enum imageEnum
{
	Float:textX,
	Float:textY,
	loadimage[64]
}

new IMAGESTEXT[15][imageEnum] =
{
	{1.000000, -1.000000, "loadsuk:loadsc0"},
	{1.000000, -1.000000, "loadsuk:loadsc1"},
	{1.000000, -1.000000, "loadsuk:loadsc2"},
	{1.000000, -1.000000, "loadsuk:loadsc3"},
	{1.000000, -1.000000, "loadsuk:loadsc4"},
	{1.000000, -1.000000, "loadsuk:loadsc5"},
	{1.000000, -1.000000, "loadsuk:loadsc6"},
	{1.000000, -1.000000, "loadsuk:loadsc7"},
	{1.000000, -1.000000, "loadsuk:loadsc8"},
	{1.000000, -1.000000, "loadsuk:loadsc9"},
	{1.000000, -1.000000, "loadsuk:loadsc10"},
	{1.000000, -1.000000, "loadsuk:loadsc11"},
	{1.000000, -1.000000, "loadsuk:loadsc12"},
	{1.000000, -1.000000, "loadsuk:loadsc13"},
	{1.000000, -1.000000, "loadsuk:loadsc14"}
};
#endif

new Text:topblack, Text:bottomblack;
new Text:drogas1, Text:drogas2;

// Relógio
new Text:Relogio;

// Evento
#if defined EventTextUser
new Text:Stakline;
#endif

#if defined BomberUser
new Float:gBombSpeed = 20.0;
new bombid[MAX_PLAYERS][MAX_BOMBS];
new bombtime[MAX_PLAYERS][MAX_BOMBS];
new bombcount[MAX_PLAYERS];
new boti[MAX_PLAYERS][MAX_BOMBS];
new bfree[MAX_PLAYERS];
new btype[MAX_PLAYERS][MAX_BOMBS];
new bptype[MAX_PLAYERS] = 0;
new vmid[MAX_PLAYERS] = -1;
new bptextshow[MAX_PLAYERS] = 0;
new Text:bombtext[MAX_PLAYERS];
#endif

// Sistema do AFK
new playername[MAX_PLAYER_NAME];
new AFK[MAX_PLAYERS];
new Text:AfkText;
new Text:AfkBackText;

// Login box
new PlayerInfo[MAX_PLAYERS][pInfo];
new bufpass[129];
new file[128];
new STRX[256];
new file2[128];

// Variaveis
new matou[MAX_PLAYERS];
new morreu[MAX_PLAYERS];
new tomouhs[MAX_PLAYERS] = 0;
new jasequestro[MAX_PLAYERS] = 0;
new Mute[MAX_PLAYERS] = 0;
new nautlls[MAX_PLAYERS] = 0;
new nautllv[MAX_PLAYERS] = 0;
new nobarlv[MAX_PLAYERS] = 0;
new nobarls[MAX_PLAYERS] = 0;
new nobarsf[MAX_PLAYERS] = 0;
new nobarfc[MAX_PLAYERS] = 0;
new preso[MAX_PLAYERS] = 0;
new algemado[MAX_PLAYERS] = 0;
new sequestro[MAX_PLAYERS] = 0;
new aviso[MAX_PLAYERS] = 0;
new gmod[MAX_PLAYERS] = 0;
new amod[MAX_PLAYERS] = 0;
new vip[MAX_PLAYERS];
new crioucarro[MAX_PLAYERS];
new infratores[MAX_PLAYERS];
new Procurados[MAX_PLAYERS];
new autoescola[MAX_PLAYERS];
new PescaInProgress[MAX_PLAYERS] = 0;
new QtPescas[MAX_PLAYERS] = 0;
new Carregamento[MAX_PLAYERS] = 0;
new DMBloqueado[MAX_PLAYERS];
new DMLiberado[MAX_PLAYERS];
new DMLiberado2[MAX_PLAYERS];
new DMLiberadon[MAX_PLAYERS];
new DMLiberadoy[MAX_PLAYERS];
new DMLiberados[MAX_PLAYERS];
new DMLiberadok[MAX_PLAYERS];
new Preso[MAX_PLAYERS] = 0;
new noevento[MAX_PLAYERS];
new cacando[MAX_PLAYERS] = 0;
new Qtcacas[MAX_PLAYERS] = 0;
new AreaPosto[MAX_PLAYERS];
new nogame[MAX_PLAYERS] = 0;
new nobomber[MAX_PLAYERS] = 0;
new pbomba[MAX_PLAYERS] = 0;
new admin[MAX_PLAYERS] = 0;
new Taximetro[MAX_PLAYERS][2];
new PrecoCorrida[MAX_PLAYERS];
new multar[MAX_PLAYERS] = 0;
new prefsf[MAX_PLAYERS] = 0;
new preflv[MAX_PLAYERS] = 0;
new xprefls[MAX_PLAYERS] = 0;
new nobanco[MAX_PLAYERS] = 0;
new vercmds[MAX_PLAYERS] = 0;
new verpms[MAX_PLAYERS] = 0;
new blockpm[MAX_PLAYERS] = 0;
new statuscp[MAX_PLAYERS] = 0;
new trocandonick[MAX_PLAYERS] = 0;
new order[MAX_PLAYERS] = 0;
new autosave[MAX_PLAYERS] = 0;
new autotimer[MAX_PLAYERS];

#if defined SubwooferUser
new Sub[MAX_VEHICLES][6];
new bool:openclose[MAX_PLAYERS] = false;
new bool:ALready[MAX_PLAYERS][6];
#endif

#if defined VControleUser
new Lights[MAX_PLAYERS];
new Alarm[MAX_PLAYERS];
new Bonnet[MAX_PLAYERS];
new Boot[MAX_PLAYERS];
new Engine[MAX_PLAYERS];
#endif

// SNAKE
#if defined SnakeUser
new PosSnake[MAX_PLAYERS][23];
new Button[MAX_PLAYERS];
new Cell[MAX_PLAYERS];
new SnakeActive[MAX_PLAYERS];
new SnakeTimer[MAX_PLAYERS];
new Side[MAX_PLAYERS];
new Growth[MAX_PLAYERS];
new sLevel[MAX_PLAYERS];
#endif

#if defined ArmaColadaUser
new ArmasColadas[MAX_PLAYERS],
	BalasColadas[MAX_PLAYERS];
#endif

#if defined EventTextUser
new NewsLine[][] =
{
	"~y~Evento Ativado",
	"~g~Evento Ativado"
};
#endif

new Staktimer;

// Outros
new totalon;
new DMlb = 0;
new minu = 0;
new horas = 0;
new Chatlb = 1;
new PrepTimer;
new gSpectateID[MAX_PLAYERS];
new gSpectateType[MAX_PLAYERS];
new Faculdade2 = 0;
new PingCfg = 2;

// Evento
new interiore;
new Proibido = 1;
new EventoTextDraw = 0;
new EventoCriado = 0;
new VagasNoEvento = 0;
new PlayersNoEvento = 0;
new ExpulsoEvento[MAX_PLAYERS] = 0;
new Float:eventoX;
new Float:eventoY;
new Float:eventoZ;
new guerra;

// Lanhouse
new lanI[MAX_PLAYERS],
	Float:lanX[MAX_PLAYERS],
	Float:lanY[MAX_PLAYERS],
	Float:lanZ[MAX_PLAYERS];

// Auto-Escola
new autoI,
	Float:autoX,
	Float:autoY,
	Float:autoZ;

// Sistema de viajem
new Aerols[MAX_PLAYERS];
new Aerosf[MAX_PLAYERS];
new Aerolv[MAX_PLAYERS];
new Aeroabd[MAX_PLAYERS]; // Aero abandonado
new bayside[MAX_PLAYERS];
new EQ[MAX_PLAYERS]; // El Quebrados
new LP[MAX_PLAYERS]; // Las Payasadas
new a51[MAX_PLAYERS]; // Area51
new LB[MAX_PLAYERS]; // Las Barrancas
new FC[MAX_PLAYERS]; // Fort Carson
new MG[MAX_PLAYERS]; // Monte Gomery
new PC[MAX_PLAYERS]; // Palomino Creek
new DME[MAX_PLAYERS]; // Dillimore
new MC[MAX_PLAYERS]; // Monte Chiliad
new AP[MAX_PLAYERS]; // Angel Pine

static const NicksProibidos[][] =
{
	"nul", "aux",
	"prn", "con",
	"com1.aux."
};

new BadNameChars[][2] =
{
	"/","`","~","!","@","#","$","%","^","&","*","(",")","-",
	"=","+",".",",","<",">","[","]","{","}","|",":",";","'"
};

new Palavroes[][] =
{
	{"desgraçado"}, {"d esgraçado"}, {"de sgraçado"}, {"des graçado"}, {"desg raçado"}, {"desgr açado"}, {"desgra çado"}, {"desgraç ado"}, {"desgraça do"}, {"desgraçad o"},
	{"servidor"}, {"s ervidor"}, {"se rvidor"}, {"ser vidor"}, {"serv idor"}, {"servi dor"}, {"servid or"}, {"servido r"}, {"sv"}, {"s v"},
	{"cú"}, {"c ú"}, {"cu"}, {"c u"}, {"ccúú"}, {"c cúú"}, {"cc úú"}, {"ccú ú"}, {"ccuu"}, {"c cuu"}, {"cc uu"}, {"ccu u"},
	{"desgraça"}, {"d esgraça"}, {"de sgraça"}, {"des graça"}, {"desg raça"}, {"desgr aça"}, {"desgra ça"}, {"desgraç a"},
	{"www"}, {"w ww"}, {"ww w"}, {"com"}, {"c om"}, {"co m"}, {"net"}, {"n et"}, {"ne t"}, {"org"}, {"o rg"}, {"or g"},
	{"capeta"}, {"c apeta"}, {"ca peta"}, {"cap eta"}, {"cape ta"}, {"capet a"},
	{"kapeta"}, {"k apeta"}, {"ka peta"}, {"kap eta"}, {"kape ta"}, {"kapet a"},
	{"buceta"}, {"b uceta"}, {"bu ceta"}, {"buc eta"}, {"buce ta"}, {"bucet a"},
	{"server"}, {"s erver"}, {"se rver"}, {"ser ver"}, {"serv er"}, {"serve r"},
	{"fdp"}, {"f dp"}, {"fd p"}, {"f.d.p"}, {"f. d.p"}, {"f.d. p"}, {"f d p"},
	{"puta"}, {"p uta"}, {"pu ta"}, {"put a"}, {"pta"}, {"p ta"}, {"pt a"},
	{"porra"}, {"p orra"}, {"po rra"}, {"por ra"}, {"porr a"},
	{"merda"}, {"m erda"}, {"me rda"}, {"mer da"}, {"merd a"},
	{"lixo"}, {"l ixo"}, {"li xo"}, {"lix o"},
	{"kpt"}, {"k pt"}, {"kp t"}
};

#if defined HeadShotUser
new Float:hs_ranges[39] =
{
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	35.0,
	35.0,
	35.0,
	40.0,
	35.0,
	40.0,
	45.0,
	35.0,
	70.0,
	90.0,
	35.0,
	90.0,
	100.0,
	0.0,
	0.0,
	0.0,
	25.0
};
#endif

// SNAKE
#if defined SnakeUser
new Level1[22] =
{
	32,33,34,35,36,37,38,39,40,41,42,182,183,184,185,186,187,188,189,190,191,192
};

new Level2[12] =
{
	105,106,107,108,109,110,114,115,116,117,118,119
};

new Level3[25] =
{
	16,17,31,32,27,28,42,43,181,182,196,197,192,193,207,208,96,97,98,111,112,113,126,127,128
};
#endif

// GPS
new Text:gps[MAX_PLAYERS];
enum GPSInfo
{
	zone_name[30],
	Float:zone_minx,
	Float:zone_miny,
	Float:zone_minz,
	Float:zone_maxx,
	Float:zone_maxy,
	Float:zone_maxz
};

new Float:Zones[][GPSInfo] =
{
	{ "The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
	{ "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
	{ "Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
	{ "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
	{ "Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
	{ "Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
	{ "Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
	{ "Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
	{ "Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
	{ "Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
	{ "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
	{ "Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
	{ "Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
	{ "Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
	{ "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
	{ "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{ "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{ "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{ "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{ "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{ "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{ "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{ "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{ "Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
	{ "Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
	{ "Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
	{ "Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{ "Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{ "Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
	{ "Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
	{ "City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
	{ "Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{ "Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{ "Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{ "Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{ "Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{ "Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{ "Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{ "Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{ "Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{ "Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
	{ "Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{ "Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
	{ "Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
	{ "Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
	{ "Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
	{ "Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
	{ "Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
	{ "Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
	{ "Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
	{ "Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
	{ "Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{ "Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{ "Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{ "Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{ "Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{ "Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{ "Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{ "Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{ "Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{ "East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{ "East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{ "East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{ "East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{ "East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{ "East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{ "East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{ "East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{ "East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{ "East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{ "East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{ "Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
	{ "Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
	{ "Aeroporto de Easter Bay",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
	{ "Aeroporto de Easter Bay",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
	{ "Aeroporto de Easter Bay",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
	{ "Aeroporto de Easter Bay",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
	{ "Aeroporto de Easter Bay",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
	{ "Aeroporto de Easter Bay",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
	{ "Aeroporto de Easter Bay",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
	{ "Aeroporto de Easter Bay",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
	{ "Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
	{ "Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
	{ "El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
	{ "El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
	{ "El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
	{ "El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{ "El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{ "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
	{ "Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
	{ "Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
	{ "Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
	{ "Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
	{ "Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
	{ "Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
	{ "Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
	{ "Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
	{ "Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
	{ "Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
	{ "Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
	{ "Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
	{ "Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
	{ "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
	{ "Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
	{ "Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
	{ "Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
	{ "Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
	{ "Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
	{ "Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
	{ "Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
	{ "Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{ "Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{ "Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
	{ "Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
	{ "Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{ "~yGarver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{ "Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
	{ "Parque Glen",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{ "Parque Glen",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{ "Parque Glen",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{ "Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
	{ "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{ "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{ "Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
	{ "Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
	{ "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{ "Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
	{ "Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
	{ "Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{ "Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{ "Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{ "Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{ "Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{ "Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{ "Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{ "Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{ "Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{ "Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{ "Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{ "Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{ "Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{ "Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{ "Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{ "Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{ "Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{ "Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{ "Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{ "Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{ "Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{ "Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{ "Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{ "Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{ "Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{ "Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{ "Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{ "Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{ "Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{ "Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
	{ "Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
	{ "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{ "Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{ "Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{ "Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{ "King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
	{ "King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
	{ "King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
	{ "LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{ "LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{ "LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{ "LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{ "LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{ "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
	{ "Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
	{ "Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{ "Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{ "Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{ "Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{ "Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{ "Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{ "Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{ "Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
	{ "Aeroporto de Las Venturas",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{ "Aeroporto de Las Venturas",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{ "Aeroporto de Las Venturas",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{ "Aeroporto de Las Venturas",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
	{ "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{ "Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
	{ "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
	{ "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{ "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{ "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
	{ "Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{ "Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{ "Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{ "Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{ "Aeroporto de Los Santos",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{ "Aeroporto de Los Santos",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{ "Aeroporto de Los Santos",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{ "Aeroporto de Los Santos",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
	{ "Aeroporto de Los Santos",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
	{ "Aeroporto de Los Santos",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
	{ "Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{ "Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{ "Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{ "Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{ "Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{ "Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{ "Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{ "Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
	{ "Martin Bridge",                -222.10,   293.30,     0.00,  -122.10,   476.40,   200.00},
	{ "Missionary Hill",             -2994.40,  -811.20,     0.00, -2178.60,  -430.20,   200.00},
	{ "Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
	{ "Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
	{ "Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
	{ "Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
	{ "Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{ "Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{ "Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{ "Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{ "Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{ "Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{ "Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{ "Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{ "Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{ "Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{ "Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{ "Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{ "Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{ "Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{ "North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
	{ "Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{ "Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{ "Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{ "Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{ "Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{ "Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{ "Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{ "Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
	{ "Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
	{ "Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
	{ "Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
	{ "Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{ "Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
	{ "Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
	{ "Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
	{ "Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{ "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{ "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{ "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{ "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{ "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{ "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{ "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{ "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{ "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{ "Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
	{ "Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
	{ "Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
	{ "Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{ "Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{ "Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{ "Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{ "Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{ "Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{ "Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{ "Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{ "Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
	{ "Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{ "Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{ "Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{ "Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{ "Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{ "Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{ "Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{ "Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{ "Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{ "Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{ "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{ "Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{ "Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{ "Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{ "Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{ "Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{ "Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{ "Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{ "Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{ "Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{ "Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{ "Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{ "Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{ "Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{ "Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{ "Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{ "Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{ "Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{ "Royal Cassino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{ "San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{ "Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
	{ "Praia de Santa Maria",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{ "Praia de Santa Maria",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{ "Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
	{ "Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
	{ "Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
	{ "Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{ "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{ "Starfish Cassino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{ "Starfish Cassino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
	{ "Starfish Cassino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{ "Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{ "Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{ "Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{ "Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{ "Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{ "Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{ "The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{ "The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{ "The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{ "Fazenda do Dyow e da Kynha",      -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{ "The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{ "The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{ "The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
	{ "The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
	{ "The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{ "The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
	{ "The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{ "The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{ "The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{ "The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{ "The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{ "The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{ "Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
	{ "Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
	{ "Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{ "Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{ "Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{ "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
	{ "Praia de Verona",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{ "Praia de Verona",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{ "Praia de Verona",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{ "Praia de Verona",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{ "Praia de Verona",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{ "Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{ "Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{ "Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{ "Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{ "Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{ "Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{ "Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{ "Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{ "Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{ "Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{ "Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{ "Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{ "Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{ "Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00},
	// Main Zones
	{ "Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{ "Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{ "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{ "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{ "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{ "San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{ "Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{ "Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
	{ "Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

new GPS_Spawned[MAX_PLAYERS];

// Forwards
forward InOrder(playerid);
forward PauseBar(playerid);
forward JumpDesbug(playerid);
forward JumpDesbug2(playerid);
forward HideTopblack(playerid);
forward ShowEditDialog(playerid);
forward CriarVeiculo(m, Float:x, Float:y, Float:z, Float:r, c, d);
forward CriarVeiculo2(m, Float:x, Float:y, Float:z, Float:r, c, d);
forward CriarVeiculo3(conceid, m, Float:x, Float:y, Float:z, Float:r, c, d);
forward TestDrive(playerid);
forward DesligarAlarmeCar(vehicleid);
forward MoveCamera(playerid);
forward ProgressBar();
forward Nupdate(playerid);
forward UpdateSpeed(playerid);
forward RandomMSGs();
forward Up();
forward Pesca();
forward cacas();
forward DestogglePlayerControllable(playerid);
forward DestogglePlayerDynamicRaceCP(playerid, checkpointid);
forward DynTutorialStart(playerid);
forward DynTutorialDelegacia(playerid);
forward DynTutorialPrefeitura(playerid);
forward DynTutorialBanco(playerid);
forward DynTutorialFaculdade(playerid);
forward DynTutorialMorro(playerid);
forward DynTutorialEnd(playerid);
forward Combustivel();
forward MoverObjeto(id, Float:X, Float:Y, Float:Z, Float:speed);
forward DestruirObjeto(objid);
forward CriarExplosao(Float:X, Float:Y, Float:Z, tipo, Float:diam);
forward PlantouBomba(playerid);
forward semporte(playerid);
forward liberar(playerid);
forward Logarprof(playerid);
forward destinoviagen(playerid);
forward ABroadCast(COLOR, const string[], level);
forward ABroadCast2(COLOR, const string[], level);
forward Chatp(COLOR, const string[], level, playerid);
forward Relatorio(COLOR, const string[], level);
forward Taxi();
forward GPS();
forward CasaLog(string[]);
forward PropLog(string[]);
forward PortaoLog(string[]);
forward KickLog(string[]);
forward GetClosestHospital(playerid);
forward Moradia(playerid);
forward Clima();

#if defined SnakeUser
forward snakeupdate(playerid);
#endif

forward LevelUP();
forward ClearChatbox(playerid, lines);
forward RespawnSystem(playerid);
forward CronServe();
forward pOnline();
forward locais();
forward SalvePlayerPos(playerid);
forward AutoSpawn(plid);
forward AutoRestart();

#if defined IntroTextUser
forward ShowIntro(playerid);
#endif

#if defined AudioStreamUser
forward StreamInfo(playerid);
#endif

#if defined HeadShotUser
forward HSTimer(playerid);
forward CheckHeadShot(playerid);
forward DestroyMe(id);
#endif

// Anti Rcon Hack
forward AfterPlayerConnect(playerid);
forward ChangeRCONPassword();

#if defined BomberUser
forward DropBomb(playerid);
forward BombTimer(playerid, num, Float:targetz);
forward DetonateBomb(playerid, num);
forward CreateSpecialExplosion(explosionid, num, playerid);
forward ReactivateBomb(playerid, bombnum);
forward CreateRadialExplosion(Float:x, Float:y, Float:z, round, max);
forward ReleaseBomb(playerid, bid);
forward OnBombExplode(playerid, num, Float:x, Float:y, Float:z);
forward ResetNearExp(playerid);
forward RemoveTextDraw(playerid);
forward ShowTextDraw(playerid, vehicleid, count);
#endif

public InOrder(playerid)
{
	if(order[playerid] == 1)
	{
		order[playerid] = 0;
	}
	if(tomouhs[playerid] == 1)
	{
		tomouhs[playerid] = 0;
	}
	return 1;
}

// =================================================================================
#if defined SAMsitesUser
public OnSamSiteUpdate(samid, playerid)
{
	if(samid == SAMFix[0] || samid == SAMFix[1])
	{
		if(gTeam[playerid] == 1)
		{
			return 0;
		}
	}
	if(samid == SAMFix[2] || samid == SAMFix[3] || samid == SAMFix[4] || samid == SAMFix[5])
	{
		if(aTeam[playerid] == 1)
		{
			return 0;
		}
	}
	return 1;
}
#endif

public PauseBar(playerid)
{
	KillTimer(timercar[playerid]);
	LabelActive[playerid] = false;
	UpdateBar(playerid);
	CDamage[playerid] = 0;
	return 1;
}

public JumpDesbug(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, 1824.0267, 26.0382, 125.9824);
	SetTimerEx("JumpDesbug2", 3000, 0, "d", playerid);
	return 1;
}

public JumpDesbug2(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, 2432.8222, -14.8528, 480.8711);
	SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
	return 1;
}

public HideTopblack(playerid)
{
	TextDrawHideForPlayer(playerid, topblack);
	TextDrawHideForPlayer(playerid, bottomblack);
	return 1;
}

public ShowEditDialog(playerid)
{
	ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
	return 1;
}

public CriarVeiculo(m, Float:x, Float:y, Float:z, Float:r, c, d)
{
	AddStaticVehicleEx(m, x, y, z, r, c, d, 30);
	return 1;
}

public CriarVeiculo2(m, Float:x, Float:y, Float:z, Float:r, c, d)
{
	new fileconce[256], carroid;
	format(fileconce, sizeof(fileconce), PASTA_CONCE, proximocarro);
	carroid = AddStaticVehicle(m, x, y, z, r, c, d);
	dini_IntSet(fileconce, "Id", carroid);
	if(dini_Int(fileconce, "TRoda") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Roda"));
	}
	if(dini_Int(fileconce, "TPaintjob") == 1)
	{
		ChangeVehiclePaintjob(carroid, dini_Int(fileconce, "Paintjob"));
	}
	if(dini_Int(fileconce, "TNitro") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Nitro"));
	}
	if(dini_Int(fileconce, "TSuspensao") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Suspensao"));
	}
	proximocarro++;
	return 1;
}

public CriarVeiculo3(conceid, m, Float:x, Float:y, Float:z, Float:r, c, d)
{
	new fileconce[256], carroid;
	format(fileconce, sizeof(fileconce), PASTA_CONCE, conceid);
	carroid = AddStaticVehicle(m, x, y, z, r, c, d);
	dini_IntSet(fileconce, "Id", carroid);
	if(dini_Int(fileconce, "TRoda") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Roda"));
	}
	if(dini_Int(fileconce, "TPaintjob") == 1)
	{
		ChangeVehiclePaintjob(carroid, dini_Int(fileconce, "Paintjob"));
	}
	if(dini_Int(fileconce, "TNitro") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Nitro"));
	}
	if(dini_Int(fileconce, "TSuspensao") == 1)
	{
		AddVehicleComponent(carroid, dini_Int(fileconce, "Suspensao"));
	}
	return 1;
}

public TestDrive(playerid)
{
	if(intest[playerid] == 1)
	{
		intest[playerid] = 0;
		incar[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SendClientMessage(playerid, Verde, "Seu tempo de Test-Drive terminou, /compraveiculo ou aperte F.");
	}
	return 1;
}

public DesligarAlarmeCar(vehicleid)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
	return 1;
}

main()
{
	printf("Total de Objetos: %d", CountDynamicObjects());
	printf("Total de Pickups: %d", CountDynamicPickups());
	printf("Total de Checkpoints: %d", CountDynamicCPs());
	printf("Total de Race Checkpoints: %d", CountDynamicRaceCPs());
	printf("Total de MapIcons: %d", CountDynamicMapIcons());
	printf("Total de TextLabels: %d", CountDynamic3DTextLabels());
	printf("Total de Areas: %d", CountDynamicAreas());

	print("\n\n* Nicks proibidos!");
	print("* os seguintes nicks estão proibidos de entrar no servidor:");
	print("\tcom[1-9], lpt[1-9], ipt[1-9], clock$, nul, aux, prn, con,\n\t\tcom1.aux.[a-zA-Z0-9]\n\n");

	print("\n=========================================");
	print("                BCE RPG Online              ");
	print("=========================================\n");
}

public OnGameModeInit()
{
	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

	if(!fexist("Conce/setados.txt"))
	{
		new File:fhnd = fopen("Conce/setados.txt", io_append);
		fclose(fhnd);
	}

	if(!fexist(SpawnPosFile))
	{
		new File:fhnd = fopen(SpawnPosFile, io_append);
		fclose(fhnd);
	}
	
 	if(!dini_Exists("/Interiores/int0.ini"))
	{
		dini_Create("/Interiores/int0.ini");
		dini_IntSet("/Interiores/int0.ini", "Int", 1);
		dini_FloatSet("/Interiores/int0.ini", "EX", 222.9534);
		dini_FloatSet("/Interiores/int0.ini", "EY", 1287.7649);
		dini_FloatSet("/Interiores/int0.ini", "EZ", 1082.1406);
	}
	if(!dini_Exists("/Interiores/int1.ini"))
	{
		dini_Create("/Interiores/int1.ini");
		dini_IntSet("/Interiores/int1.ini", "Int", 4);
		dini_FloatSet("/Interiores/int1.ini", "EX", 261.0827);
		dini_FloatSet("/Interiores/int1.ini", "EY", 1284.6899);
		dini_FloatSet("/Interiores/int1.ini", "EZ", 1080.2578);
	}
	if(!dini_Exists("/Interior/int2.ini"))
	{
		dini_Create("/Interiores/int2.ini");
		dini_IntSet("/Interiores/int2.ini", "Int", 9);
		dini_FloatSet("/Interiores/int2.ini", "EX", 260.6734);
		dini_FloatSet("/Interiores/int2.ini", "EY", 1237.7909);
		dini_FloatSet("/Interiores/int2.ini", "EZ", 1084.2578);
	}
	if(!dini_Exists("/Interior/int3.ini"))
	{
		dini_Create("/Interiores/int3.ini");
		dini_IntSet("/Interiores/int3.ini", "Int", 15);
		dini_FloatSet("/Interiores/int3.ini", "EX", 376.8426);
		dini_FloatSet("/Interiores/int3.ini", "EY", 1417.3226);
		dini_FloatSet("/Interiores/int3.ini", "EZ", 1081.3281);
	}
	if(!dini_Exists("/Interiores/int4.ini"))
	{
		dini_Create("/Interiores/int4.ini");
		dini_IntSet("/Interiores/int4.ini", "Int", 15);
		dini_FloatSet("/Interiores/int4.ini", "EX", 295.2874);
		dini_FloatSet("/Interiores/int4.ini", "EY", 1473.2769);
		dini_FloatSet("/Interiores/int4.ini", "EZ", 1080.2578);
	}
	if(!dini_Exists("/Interiores/int5.ini"))
	{
		dini_Create("/Interiores/int5.ini");
		dini_IntSet("/Interiores/int5.ini", "Int", 15);
		dini_FloatSet("/Interiores/int5.ini", "EX", 327.9431);
		dini_FloatSet("/Interiores/int5.ini", "EY", 1478.3801);
		dini_FloatSet("/Interiores/int5.ini", "EZ", 1084.4375);
	}
	if(!dini_Exists("/Interiores/int6.ini"))
	{
		dini_Create("/Interiores/int6.ini");
		dini_IntSet("/Interiores/int6.ini", "Int", 10);
		dini_FloatSet("/Interiores/int6.ini", "EX", 2270.1050);
		dini_FloatSet("/Interiores/int6.ini", "EY", -1210.3917);
		dini_FloatSet("/Interiores/int6.ini", "EZ", 1047.5625);
	}
	if(!dini_Exists("/Interiores/int7.ini"))
	{
		dini_Create("/Interiores/int7.ini");
		dini_IntSet("/Interiores/int7.ini", "Int", 2);
		dini_FloatSet("/Interiores/int7.ini", "EX", 447.1211);
		dini_FloatSet("/Interiores/int7.ini", "EY", 1397.8444);
		dini_FloatSet("/Interiores/int7.ini", "EZ", 1084.3047);
	}
	if(!dini_Exists("/Interiores/int8.ini"))
	{
		dini_Create("/Interiores/int8.ini");
		dini_IntSet("/Interiores/int8.ini", "Int", 6);
		dini_FloatSet("/Interiores/int8.ini", "EX", 2196.0063);
		dini_FloatSet("/Interiores/int8.ini", "EY", -1204.6326);
		dini_FloatSet("/Interiores/int8.ini", "EZ", 1049.0234);
	}
	if(!dini_Exists("/Interiores/int9.ini"))
	{
		dini_Create("/Interiores/int9.ini");
		dini_IntSet("/Interiores/int9.ini", "Int", 3);
		dini_FloatSet("/Interiores/int9.ini", "EX", 235.3416);
		dini_FloatSet("/Interiores/int9.ini", "EY", 1187.2882);
		dini_FloatSet("/Interiores/int9.ini", "EZ", 1080.2578);
	}
	if(!dini_Exists("/Interiores/int10.ini"))
	{
		dini_Create("/Interiores/int10.ini");
		dini_IntSet("/Interiores/int10.ini", "Int", 2);
		dini_FloatSet("/Interiores/int10.ini", "EX", 490.9987);
		dini_FloatSet("/Interiores/int10.ini", "EY", 1399.4164);
		dini_FloatSet("/Interiores/int10.ini", "EZ", 1080.2578);
	}
	if(!dini_Exists("/Interiores/int11.ini"))
	{
		dini_Create("/Interiores/int11.ini");
		dini_IntSet("/Interiores/int11.ini", "Int", 5);
		dini_FloatSet("/Interiores/int11.ini", "EX", 227.1212);
		dini_FloatSet("/Interiores/int11.ini", "EY", 1114.1840);
		dini_FloatSet("/Interiores/int11.ini", "EZ", 1080.9972);
	}
	if(!dini_Exists("/Interiores/int12.ini"))
	{
		dini_Create("/Interiores/int12.ini");
		dini_IntSet("/Interiores/int12.ini", "Int", 7);
		dini_FloatSet("/Interiores/int12.ini", "EX", 225.6624);
		dini_FloatSet("/Interiores/int12.ini", "EY", 1022.5345);
		dini_FloatSet("/Interiores/int12.ini", "EZ", 1084.0145);
	}
	if(!dini_Exists("/Interiores/int13.ini"))
	{
		dini_Create("/Interiores/int13.ini");
		dini_IntSet("/Interiores/int13.ini", "Int", 5);
		dini_FloatSet("/Interiores/int13.ini", "EX", 1299.1400);
		dini_FloatSet("/Interiores/int13.ini", "EY", -794.7700);
		dini_FloatSet("/Interiores/int13.ini", "EZ", 1084.0078);
	}
	if(!dini_Exists("/Interiores/int14.ini"))
	{
		dini_Create("/Interiores/int14.ini");
		dini_IntSet("/Interiores/int14.ini", "Int", 2);
		dini_FloatSet("/Interiores/int14.ini", "EX", 2575.7492);
		dini_FloatSet("/Interiores/int14.ini", "EY", -1300.5104);
		dini_FloatSet("/Interiores/int14.ini", "EZ", 1060.9843);
	}
	if(!dini_Exists("/Interiores/int15.ini"))
	{
		dini_Create("/Interiores/int15.ini");
		dini_IntSet("/Interiores/int15.ini", "Int", 1);
		dini_FloatSet("/Interiores/int15.ini", "EX", -2042.4200);
		dini_FloatSet("/Interiores/int15.ini", "EY", 178.5899);
		dini_FloatSet("/Interiores/int15.ini", "EZ", 28.8444);
	}
	if(!dini_Exists("/Interiores/int16.ini"))
	{
		dini_Create("/Interiores/int16.ini");
		dini_IntSet("/Interiores/int16.ini", "Int", 5);
		dini_FloatSet("/Interiores/int16.ini", "EX", 1263.8595);
		dini_FloatSet("/Interiores/int16.ini", "EY", -783.7839);
		dini_FloatSet("/Interiores/int16.ini", "EZ", 1091.9063);
	}
	if(!dini_Exists("/Interiores/int17.ini"))
	{
		dini_Create("/Interiores/int17.ini");
		dini_IntSet("/Interiores/int17.ini", "Int", 10);
		dini_FloatSet("/Interiores/int17.ini", "EX", 2016.2699);
		dini_FloatSet("/Interiores/int17.ini", "EY", 1017.7790);
		dini_FloatSet("/Interiores/int17.ini", "EZ", 996.8750);
	}
	if(!dini_Exists("/Interiores/int18.ini"))
	{
		dini_Create("/Interiores/int18.ini");
		dini_IntSet("/Interiores/int18.ini", "Int", 2);
		dini_FloatSet("/Interiores/int18.ini", "EX", 271.8849);
		dini_FloatSet("/Interiores/int18.ini", "EY", 306.6319);
		dini_FloatSet("/Interiores/int18.ini", "EZ", 999.1484);
	}

	#if defined AntiCheatUser
	FixSet(-1, false);
	SetMaxPing(1700);
	SetSpawnKillDelay(2000);
	SetInactivityDelay(180000);
	UseChatForInactivityMeasurement(false);
	AntiCheatSetUpdateDelay(200);
	SetIPConnectDelay(100);
	SetMaxMassTPDelay(150);
	#endif

	#if _CHANGE_NAME_BEFORE_KICK == true
	for(new i = 0; i < MAX_PLAYER_NAME; i++)
	{
		szTmpKickName[i] = '_';
		szTmpKickName[MAX_PLAYER_NAME-1] = '\0';
	}
	print("* O nick esta sendo temporarimente usado para kickar crashers:");
	printf("\t%s\n\n", szTmpKickName);
	#endif

	// Anti Rcon Hack
	GetServerVarAsString("rcon_password", rconpass, sizeof(rconpass));

	#if defined SAMsitesUser
	SAM_start();
	#endif

	#if defined AudioStreamUser
	LoadAudioStream();
	#endif

	LoadTextDraws();
	LoadCheckpointsFix();
	LoadGangZonesFix();
	LoadMapIconsFix();
	Load3DTextsFix();
	LoadPickupsFix();
	LoadObjectsFix();
	LoadVehiclesFix();
	LoadFilesIniItens();

	LoadDynamicObjectsFromFile("Objetos/Bases.txt");
	LoadDynamicObjectsFromFile("Objetos/Casas.txt");
	LoadDynamicObjectsFromFile("Objetos/Dten.txt");
	LoadDynamicObjectsFromFile("Objetos/Games.txt");
	LoadDynamicObjectsFromFile("Objetos/Jump.txt");
	LoadDynamicObjectsFromFile("Objetos/Outros.txt");
    LoadStaticVehiclesFromFile("Conce/sv.txt");
	LoadStaticVehiclesFromFile("Conce/setados.txt");
	LoadStaticVehiclesFromFile("vehicles/trains.txt");
	//LoadStaticVehiclesFromFile("vehicles/pilots.txt");
	LoadStaticVehiclesFromFile("vehicles/lv_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/lv_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/lv_gen.txt");
	LoadStaticVehiclesFromFile("vehicles/sf_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/sf_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/sf_gen.txt");
	LoadStaticVehiclesFromFile("vehicles/ls_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_gen_inner.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_gen_outer.txt");
	//LoadStaticVehiclesFromFile("vehicles/whetstone.txt");
	//LoadStaticVehiclesFromFile("vehicles/bone.txt");
	//LoadStaticVehiclesFromFile("vehicles/flint.txt");
	//LoadStaticVehiclesFromFile("vehicles/tierra.txt");
	//LoadStaticVehiclesFromFile("vehicles/red_county.txt");

	LoadSpawnPosFromFile(SpawnPosFile);

	#if defined SAMsitesUser
	// Pier 69
	SAMFix[0] = AddStaticSAM(-1394.8973, 494.7229, 19.5001);
	CreateSamLabel(SAMFix[0], "Lança Míssil ", Verde, 30.0, 0);

	SAMFix[1] = AddStaticSAM(-1324.3402, 495.1183, 22.5079);
	CreateSamLabel(SAMFix[1], "Lança Míssil ", Verde, 30.0, 0);

	// Área 51
	SAMFix[2] = AddStaticSAM(237.5797, 1698.6908, 23.8673);
	CreateSamLabel(SAMFix[2], "Lança Míssil ", Verde, 30.0, 0);

	SAMFix[3] = AddStaticSAM(15.3281, 1720.9646, 23.8673);
	CreateSamLabel(SAMFix[3], "Lança Míssil ", Verde, 30.0, 0);

	SAMFix[4] = AddStaticSAM(188.2694, 2083.4644, 23.9063);
	CreateSamLabel(SAMFix[4], "Lança Míssil ", Verde, 30.0, 0);

	SAMFix[5] = AddStaticSAM(354.5453, 2030.3062, 23.8750);
	CreateSamLabel(SAMFix[5], "Lança Míssil ", Verde, 30.0, 0);
	#endif

	#if defined BomberUser
	new gB_size = sizeof gBombTypes;
	if(gB_size != (sizeof gVehicleBombs[]-1))
	{
		print("Aviso: O NÚMERO DE BOMBAS NÃO CORRESPONDE AOS DOS VEÍCULOS CHECADOS");
	}
	#endif

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		#if defined LaserUser
		SetPVarInt(i, "laser", 0);
		SetPVarInt(i, "color", 18643);
		#endif
	}

	// SetTimers
	TimersX[0] = SetTimer("ProgressBar", 900, 1);
	TimersX[1] = SetTimer("UpdateSpeed", UpdateSeconds*1000, 1);
	TimersX[2] = SetTimer("RandomMSGs", 30000, 1);
	TimersX[3] = SetTimer("Combustivel", 20000, 1);
	TimersX[4] = SetTimer("Taxi", 5000, 1);
	TimersX[5] = SetTimer("GPS", 900, 1);
	TimersX[6] = SetTimer("Clima", 40000, 1);
	TimersX[7] = SetTimer("LevelUP", 60000, 1);
	TimersX[8] = SetTimer("CronServe", 1000, 1);
	TimersX[9] = SetTimer("pOnline", SECp, 1);
	TimersX[10] = SetTimer("locais", 900, 1);
	TimersX[11] = SetTimer("Emload", 10000, true);
	TimersX[12] = SetTimer("ChangeRCONPassword", 2000, 1); // Anti Rcon Hack

	// Desabilitando interiores, stunt e bonus.
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	#if defined AnimLoopsUser
	UsePlayerPedAnims();
	#endif

	// Informações de GameMod
	SetGameModeText(GAMEMOD_NOME);
	SendRconCommand("mapname "#MAPA_NOME"");

	LoadNPCs();

	print("\n\n\n\nServidor iniciado com sucesso!\n\n");
	// FIM =============================================================================
	return 1;
}

#if defined AntiCheatUser
public AC_OnCheatDetected(playerid, type, extraint, Float:extrafloat)
{
	switch(type)
	{
		case CHEAT_JETPACK:
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, Vermelho, "O uso de JetPack está proibido para você, não tente usar Cheat/Hack ou será banido(a).");
			return 1;
		}
		case CHEAT_WEAPON:
		{
			ResetPlayerWeapons(playerid);
			SendClientMessage(playerid, Vermelho, "O uso desta arma está proibido para você, não tente usar Cheat/Hack ou será banido(a).");
			return 1;
		}
		case CHEAT_SPEED:
		{
			if(!IsPlayerInWater(playerid))
			{
				if(GetTickCount() > FloodTimer[playerid])
				{
					FloodAlert[playerid] = 0;
				}

				FloodTimer[playerid] = GetTickCount() +TimerFlood;
				FloodAlert[playerid]++;

				if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
				{
					format(STRX, sizeof(STRX), "|_ ANTI-FLOOD _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
					SendClientMessage(playerid, Amarelo, STRX);
				}
				else if(FloodAlert[playerid] == AlertFlood-1)
				{
					format(STRX, sizeof(STRX), "|_ ANTI-FLOOD _| Você tem %d/%d avisos. Mais um e você será respawnado(a).", FloodAlert[playerid], AlertFlood);
					SendClientMessage(playerid, Amarelo, STRX);
				}
				else if(FloodAlert[playerid] == AlertFlood)
				{
					SendClientMessage(playerid, Vermelho, "Acho que você está com SpeedHack, não tente usar Cheat/Hack ou será banido(a).");
					RandomSpawnPlayer(playerid);
				}
			}
			return 1;
		}
		case CHEAT_HEALTHARMOUR:
		{
			SetPlayerHealth(playerid, 5);
			SetPlayerArmour(playerid, 0);
			SendClientMessage(playerid, Vermelho, "Acho que você está com health/armour hack, não tente usar Cheat/Hack ou será banido(a).");
			return 1;
		}
		case CHEAT_IPFLOOD:
		{
			VBanIP(-1, PlayerIP(playerid), "IP Flood");
			return 1;
		}
		case CHEAT_PING:
		{
			if(PingCfg == 1)
			{
				VBanID(-1, playerid, "Ping Alto, Max: 1700");
			}
			if(PingCfg == 2)
			{
				format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: Ping Alto, Max: 1700", PlayerName(playerid));
				SendClientMessageToAll(Amarelo, STRX);
				KickLog(STRX);
				Kick(playerid);
			}
			return 1;
		}
		case CHEAT_SPOOFKILL:
		{
			SendClientMessage(playerid, Vermelho, "SpoofKill detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: SpoofKill", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
		case CHEAT_SPAWNKILL:
		{
			SendClientMessage(playerid, Vermelho, "SpawnKill detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: SpawnKill", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
		case CHEAT_INACTIVITY:
		{
			AFK[playerid] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 0);
			TextDrawShowForPlayer(playerid, AfkText);
			TextDrawShowForPlayer(playerid, AfkBackText);
			format(STRX, sizeof(STRX), "%s está ausente e foi impedido(a) de upar!", PlayerName(playerid));
			SendClientMessageToAll(0xFF9595AA, STRX);
			return 1;
		}
		case CHEAT_TELEPORT:
		{
			if(GetTickCount() > FloodTimer[playerid])
			{
				FloodAlert[playerid] = 0;
			}

			FloodTimer[playerid] = GetTickCount() +TimerFlood;
			FloodAlert[playerid]++;

			if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
			{
				format(STRX, sizeof(STRX), "|_ ANTI-TELEPORT _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
				SendClientMessage(playerid, Amarelo, STRX);
			}
			else if(FloodAlert[playerid] == AlertFlood-1)
			{
				format(STRX, sizeof(STRX), "|_ ANTI-TELEPORT _| Você tem %d/%d avisos. Mais um e você será respawnado(a).", FloodAlert[playerid], AlertFlood);
				SendClientMessage(playerid, Amarelo, STRX);
			}
			else if(FloodAlert[playerid] == AlertFlood)
			{
				SendClientMessage(playerid, Vermelho, "Acho que você está com TeleportHack, não tente usar Cheat/Hack ou será banido(a).");
				RandomSpawnPlayer(playerid);
			}
			return 1;
		}
		case CHEAT_AIRBREAK:
		{
			if(GetTickCount() > FloodTimer[playerid])
			{
				FloodAlert[playerid] = 0;
			}

			FloodTimer[playerid] = GetTickCount() +TimerFlood;
			FloodAlert[playerid]++;

			if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
			{
				format(STRX, sizeof(STRX), "|_ ANTI-AIRBREAK _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
				SendClientMessage(playerid, Amarelo, STRX);
			}
			else if(FloodAlert[playerid] == AlertFlood-1)
			{
				format(STRX, sizeof(STRX), "|_ ANTI-AIRBREAK _| Você tem %d/%d avisos. Mais um e você será respawnado(a).", FloodAlert[playerid], AlertFlood);
				SendClientMessage(playerid, Amarelo, STRX);
			}
			else if(FloodAlert[playerid] == AlertFlood)
			{
				SendClientMessage(playerid, Vermelho, "Acho que você está com AirBreak, não tente usar Cheat/Hack ou será banido(a).");
				RandomSpawnPlayer(playerid);
			}
			return 1;
		}
		case CHEAT_BACK_FROM_INACTIVITY:
		{
			AFK[playerid] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 0);
			TextDrawShowForPlayer(playerid, AfkText);
			TextDrawShowForPlayer(playerid, AfkBackText);
			format(STRX, sizeof(STRX), "%s está ausente e foi impedido(a) de upar!", PlayerName(playerid));
			SendClientMessageToAll(0xFF9595AA, STRX);
			return 1;
		}
		case CHEAT_SPECTATE:
		{
			SendClientMessage(playerid, Vermelho, "SpectateHack detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: SpectateHack", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
		case CHEAT_FASTCONNECT:
		{
			VBanIP(-1, PlayerIP(playerid), "Bot Insert");
			return 1;
		}
		case CHEAT_REMOTECONTROL:
		{
			SendClientMessage(playerid, Vermelho, "RemoteControl detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: RemoteControl", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
		case CHEAT_MASSCARTELEPORT:
		{
			SendClientMessage(playerid, Vermelho, "MassCarTeleport detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: MassCarTeleport", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
		case CHEAT_CARJACKHACK:
		{
			SendClientMessage(playerid, Vermelho, "CarJackHack detectado, não tente usar Cheat/Hack ou será banido(a).");
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: CarJackHack", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
			return 1;
		}
	}
	return 1;
}
#endif

// Radar
public UpdateSpeed(playerid)
{
	new Float:distance, value;
	new Float:x, Float:y, Float:z;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, x, y, z);
			distance = floatsqroot(floatpower(floatabs(floatsub(x, SaveDtenPlayerPos[i][LastX])), 2)+floatpower(floatabs(floatsub(y, SaveDtenPlayerPos[i][LastY])), 2)+floatpower(floatabs(floatsub(z, SaveDtenPlayerPos[i][LastZ])), 2));
			value = floatround(distance*3600);
			if(UpdateSeconds > 1)
			{
				value = floatround(value/UpdateSeconds*1000);
			}
			distance1[i] = floatround(value/1600);
			SaveDtenPlayerPos[i][LastX] = x;
			SaveDtenPlayerPos[i][LastY] = y;
			SaveDtenPlayerPos[i][LastZ] = z;

			// Radares LS
			AddFlitsPaal(i, 3666, 1465.55078125, -1732.3321533203, 13.105608940125, 0, 20, 100); // Prefeitura
			AddFlitsPaal(i, 3666, 1200.9794921875, -1332.2572021484, 12.91212272644, 0, 20, 100); // Hospital 1
			AddFlitsPaal(i, 3666, 1963.2958984375, -1463.408203125, 12.907793998718, 0, 20, 100); // Hospital 2
			AddFlitsPaal(i, 3666, 1114.5762939453, -1712.2854003906, 12.89649772644, 0, 20, 100); // Biblioteca
		}
	}
	return 0;
}

// =================================== Barras ======================================
public ProgressBar()
{
	#if defined CarInfosUser
	new string[256];
	#endif

	#if defined CarInfosUser || defined BarUser
	new Float:Lataria;
	#endif

	#if defined BarUser
	new Velocidade, bComb, Float:bLataria;
	#endif

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			#if defined CarInfosUser || defined BarUser
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(i));
			GetVehicleHealth(GetPlayerVehicleID(i), Lataria);
			#endif

			// Barras
			#if defined BarUser
			if((Velocidade = distance1[i]) && vVelo[i] != INVALID_BAR_ID)
			{
				SetProgressBarValue(vVelo[i], Velocidade);
				UpdateProgressBar(vVelo[i], i);
			}
			if((bComb = cCarro[i]) && vComb[i] != INVALID_BAR_ID)
			{
				SetProgressBarValue(vComb[i], bComb);
				UpdateProgressBar(vComb[i], i);
			}
			if((bLataria = Lataria) && vLataria[i] != INVALID_BAR_ID)
			{
				SetProgressBarValue(vLataria[i], bLataria);
				UpdateProgressBar(vLataria[i], i);
			}
			#endif

			#if defined CarInfosUser
			if(cCarro[i] == -1)
			{
				format(string, sizeof(string), "~g~%d KM/H~n~~g~Indisponivel~n~~g~%0.0f%%", distance1[i], Lataria);
				TextDrawSetString(CarInfos4[i], string);
			}
			else
			{
				format(string, sizeof(string), "~g~%d KM/H~n~~g~%d Litro(s)~n~~g~%0.0f%%", distance1[i], cCarro[i], Lataria);
				TextDrawSetString(CarInfos4[i], string);
			}
			#endif
		}
	}
	return 0;
}
// =================================================================================

public OnGameModeExit()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, Vermelho, "O servidor foi reiniciado. Aguarde...");
		}
	}

	// Anti Rcon Hack
	new string[39];
	format(string, sizeof(string), "rcon_password %s", rconpass);
	SendRconCommand(string);

	if(EventoCriado == 1)
	{
		EventoCriado = 0;
		GangZoneHideForAll(guerra);
		GangZoneDestroy(guerra);
	}

	// Corrida Pista 1
	if(EventoCorrida1 == 1)
	{
		EventoCorrida1 = 0;
		DestroyVehiclesPista1();
	}

	// Corrida Pista 2
	if(EventoCorrida2 == 1)
	{
		EventoCorrida2 = 0;
		DestroyVehiclesPista2();
	}

	// Corrida Pista 3
	if(EventoCorrida3 == 1)
	{
		EventoCorrida3 = 0;
		DestroyVehiclesPista3();
	}

	// Fliping Pista 4
	if(EventoCorrida4 == 1)
	{
		EventoCorrida4 = 0;
		DestroyVehiclesPista4();
	}

	// Fliping Pista 5
	if(EventoCorrida5 == 1)
	{
		EventoCorrida5 = 0;
		DestroyVehiclesPista5();
	}

	// Campeonato de Bike
	if(EventoCorrida6 == 1)
	{
		EventoCorrida6 = 0;
		DestroyVehiclesPista6();
	}

	DeleteTextDraws();
	Destroy3DTextsFix();
	DestroyCheckpointsFix();
	DestroyGangZonesFix();
	DestroyMapIconsFix();
	DestroyPickupsFix();
	DestroyObjectsFix();
	DestroyVehiclesFix();
	UnloadFilesIniItens();
	UnloadAllDynamicObjects();
	UnloadAllStaticVehicles();

	/*DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicMapIcons();
	DestroyAllDynamicPickups();
	DestroyAllDynamicObjects();
	DestroyAllDynamicRaceCPs();
	DestroyAllDynamicAreas();
	DestroyAllDynamicCPs();*/

	Loop(o, sizeof(TimersX))
	{
		KillTimer(TimersX[o]);
	}

	MapAndreas_Unload();

	print("\n\n\n\nServidor desligado com sucesso!\n\n");
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
  	if(PlayerInfo[playerid][Logged] == 0)

	{
		#if !defined IntroTextUser
			#if defined AntiCheatUser
		format(STRX, sizeof(STRX), "{00FF00}Seja bem vindo(a)!\n\n{FFFFFF}AntiCheat: {00FF00}ON\n{FFFFFF}Versão: {FF33FF}%d\n\n{00FF00}Divirta-se em nosso servidor.", AC_INCLUDE_VERSION);
			#else
		format(STRX, sizeof(STRX), "{00FF00}Seja bem vindo(a)!\n\n{FFFFFF}AntiCheat: {00FF00}OFF\n{FFFFFF}Versão: {FF33FF}Indisponível\n\n{00FF00}Divirta-se em nosso servidor.");
			#endif
		ShowPlayerDialog(playerid, AVISO, DIALOG_STYLE_MSGBOX, "Aviso", STRX, "OK", "");
		#endif

		SetTimerEx("AutoSpawn", 1000, false, "e", playerid);
	}
	else
	{
		SetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
		SetPlayerCameraLookAt(playerid, lookat_x, lookat_y, lookat_z);
		SetPlayerPos(playerid, player_x, player_y, player_z);
		SetPlayerFacingAngle(playerid, player_angle);
	}
	return 1;
}

public OnPlayerConnect(playerid)
{

    RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1451.6250, -1727.6719, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1467.9844, -1727.6719, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1485.1719, -1727.6719, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1702.3594, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1676.6875, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1656.2500, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1636.2344, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1433.7109, -1619.0547, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1229, 1466.4844, -1598.0938, 14.1094, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1451.3359, -1596.7031, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1471.3516, -1596.7031, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1488.5313, -1596.7031, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1229, 1498.0547, -1598.0938, 14.1094, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1504.8906, -1596.7031, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1721.6328, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1705.2734, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1688.0859, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1673.7109, 14.1094, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1668.0781, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1647.6406, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1524.8281, -1621.9609, 16.4219, 0.25);//pracinha
    RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);//pracinha

	new szPlayerName[MAX_PLAYER_NAME], connecting_ip[32+1];
	GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
	format(file2, sizeof(file2), PASTA_CONTAS, encrypt(szPlayerName)); // Criptografado
	format(file, sizeof(file), PASTA_CONTAS, szPlayerName);
	format(Vnewban, 32, BanDir, VBPlayer(playerid));

	if(dini_Exists(file2))
	{
		RenameFileAccount(file2, file);
		bIllegalPlayer[playerid] = true;
		SendClientMessage(playerid, Vermelho, "Foi feita uma atualização de segurança em sua conta, relogue por favor.");
		return Kick(playerid);
	}

	if(dini_Exists(Vnewban))
	{
		bIllegalPlayer[playerid] = true;
		return VBanCheck(playerid);
	}

	GetPlayerIp(playerid, connecting_ip, 32);
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);

	if(strcmp("127.0.0.1", connecting_ip, true) != 0)
	{
		if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP)
		{
			printf("AntiBot: %s (%d) excedeu o limite de %d conexões por IP: %s", szPlayerName, playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
			bIllegalPlayer[playerid] = true;
			return Kick(playerid);
		}
	}

	for(new i = 0; i < sizeof(NicksProibidos); i++)
	{
		if(!strcmp(szPlayerName, NicksProibidos[i], true, 3))
		{
			if(dini_Exists(file))
			{
				trocandonick[playerid] = 1;
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Este nick está extremamente proibido no servidor.");
				return aKick(playerid, szPlayerName);
			}
		}
	}

	if(!strcmp(szPlayerName, "com", true, 3) || !strcmp(szPlayerName, "lpt", true, 3) || !strcmp(szPlayerName, "ipt", true, 3))
	{
		if(dini_Exists(file))
		{
			trocandonick[playerid] = 1;
		}
		else if(szPlayerName[3] >= '0' && szPlayerName[3] <= '9' && szPlayerName[4] == '\0')
		{
			return aKick(playerid, szPlayerName);
		}
	}
	else if(!strcmp(szPlayerName, "clock$", true, 6))
	{
		if(dini_Exists(file))
		{
			trocandonick[playerid] = 1;
		}
		else
		{
			return aKick(playerid, szPlayerName);
		}
	}
	else
	{
		#if _CHANGE_NAME_BEFORE_KICK == true
		// Os jogadores não podem entrar com o nosso nome temporário...
		// este nome é "________________", por padrão.
		if(!strcmp(szPlayerName, szTmpKickName, true, MAX_PLAYER_NAME))
		{
			return aKick(playerid, szPlayerName);
		}
		#endif
	}

	// Verifica se o nome dos jogadores estão no formato "Nome_Sobrenome"...
	// se não estiver serão encaminhados para o aKick.
	#if defined ValidNickUser
	if(strfind(szPlayerName, "_", true) == -1)
	{
		if(dini_Exists(file))
		{
			trocandonick[playerid] = 1;
		}
		else
		{
			return aKick(playerid, szPlayerName);
		}
	}
	for(new i=0; i<sizeof(BadNameChars); i++)
	{
		if(strfind(szPlayerName, BadNameChars[i], true) != -1 || strlen(szPlayerName) > MAX_PLAYERS)
		{
			if(dini_Exists(file))
			{
				trocandonick[playerid] = 1;
			}
			else
			{
				return aKick(playerid, szPlayerName);
			}
		}
	}
	#endif

	#if defined IntroTextUser
	LoadPlayerIntroText(playerid);
	#endif

	LoadPlayerTextDraws(playerid);

	bIllegalPlayer[playerid] = false;
	LabelActive[playerid] = false;

	PlayerInfo[playerid][SCON] = false;
	PlayerInfo[playerid][SpawnDance] = true;
	PlayerInfo[playerid][LoginsFalsos] = 0;

	// Anti Rcon Hack
	SetTimerEx("AfterPlayerConnect", 1000, 0, "i", playerid);

	#if defined BomberUser
	ResetNearExp(playerid);
	#endif

	ResetVarsEditPortao(playerid);

	#if defined IntroTextUser
	SetPVarInt(playerid, "Intro", 0);
	SetTimerEx("ShowIntro", 1000, 0, "d", playerid);
	#endif

	SetTimerEx("semporte", 1000, 1, "e", playerid);

	#if defined LaserUser
	SetPVarInt(playerid, "laser", 0);
	SetPVarInt(playerid, "color", 18643);
	#endif

	if(dini_Exists(file))
	{
		dini_IntSet(file, "DM", 0);
		dini_IntSet(file, "aAdmin", 0);
		matou[playerid] = dini_Int(file, "Matou");
		morreu[playerid] = dini_Int(file, "Morreu");
		if(dini_Int(file, "Preso") == 0)
		{
			preso[playerid] = 0;
			algemado[playerid] = 0;
		}
	}

	order[playerid] = 0;
	blockpm[playerid] = 0;
	morar[playerid] = 0;
	moradia[playerid] = 0;
	convitede[playerid] = INVALID_PLAYER_ID;
	pAdmin[playerid] = 0;
	emcasa[playerid] = 0;
	AFK[playerid] = 0;
	multar[playerid] = 0;
	autoescola[playerid] = 0;
	nogame[playerid] = 0;
	nobomber[playerid] = 0;
	pbomba[playerid] = 0;
	noevento[playerid] = 0;
	ExpulsoEvento[playerid] = 0;
	vip[playerid] = 0;
	crioucarro[playerid] = 0;
	GPS_Spawned[playerid] = 0;
	DMLiberado[playerid] = 0;
	Mute[playerid] = 0;
	cercado[playerid] = 0;
	FloodAlert[playerid] = 0;
	FloodTimer[playerid] = 0;
	cCarro[playerid] = -1;
	casar[playerid] = 0;
	pedidode[playerid] = INVALID_PLAYER_ID;

	if(IsPlayerNPC(playerid))
	{
		new string[256];
		if(!dini_Exists(file)) // Criando conta para NPC's
		{

			WP_Hash(bufpass, sizeof(bufpass), SENHA_CONTA_NPC);
			CreateFileAccount(file, bufpass);
		}
		PlayerInfo[playerid][Logged] = 1;
	}
	else
	{
		PlayerInfo[playerid][Logged] = 0;
		PlayAudioStreamForPlayer(playerid, "http://dl.dropboxusercontent.com/s/7yeynn66zaomqe4/Loguinzera.mp3");
	}

	format(STRX, sizeof(STRX), "{FFFFFF}-| {33AA33}%s {FFFFFF}Entrou No Servidor...", szPlayerName);
    SendClientMessageToAll(-1, STRX);
	ClearChatbox(playerid, 20);
    SendClientMessage(playerid, BLUEWHITE, "~~ ~~ ~~ ~~ ~~ Bem vindo! [BCE-RPG] ~~ ~~ ~~ ~~ ~~");
    SendClientMessage(playerid, Vermelho, "» Para ver os comandos, use /comandos"					     );
	SendClientMessage(playerid, Azul, "» Para ver as regras, use /regras"							     );
	SendClientMessage(playerid, Verde, "» Dono: podecafe, /Creditos"                                     );
	SendClientMessage(playerid, Azul, "» Creditos do GM: Tercio_felipe & Poseidon!"						 );
	SendClientMessage(playerid, Vermelho, "» Sua diversao esta Aqui, Seja bem vindo ao (BCE) :D"         );
	SendClientMessage(playerid, Vermelho, "» Nosso Forum ainda está sendo Construido."                   );
    SendClientMessage(playerid, BLUEWHITE, "~~ ~~ ~~ ~~ ~~ Bem vindo! [BCE-RPG] ~~ ~~ ~~ ~~ ~~");
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, MAX_PLAYER_NAME);

	if(vip[playerid] == 1 || pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
	{
		if(function218(vehicleid))
		{
			AddVehicleComponent(vehicleid, 1010);
		}
	}

	if(InCall[playerid] == 1) return SendClientMessage(playerid, RED, "É proibido dirigir e falar no telefone.");
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, MAX_PLAYER_NAME);

	if(intest[playerid] == 1)
	{
		intest[playerid] = 0;
		KillTimer(testtime);
		SendClientMessage(playerid, Vermelho, "(») Você saiu do veículo enquanto estava em Test-Drive.");
		SendClientMessage(playerid, Vermelho, "(») Test-Drive foi cancelado e o veículo será recolhido.");
	}

	if(autoescola[playerid] == 1)
	{
		new id = GetPlayerVehicleID(playerid);
		DestroyVehicle(id);
		id = INVALID_VEHICLE_ID;

		autoescola[playerid] = 0;
		SetPlayerInterior(playerid, autoI);
		SetPlayerPos(playerid, autoX, autoY, autoZ);
		SendClientMessage(playerid, Vermelho, "(») Você saiu do veículo em teste da Auto-Escola.");
		SendClientMessage(playerid, Vermelho, "(») Agora você terá que refazer teste.");
	}

	if(Carregamento[playerid] == 1)
	{
		SendClientMessage(playerid, Vermelho, "(») Você saiu da moto e o serviço de entregas foi cancelado.");
		Carregamento[playerid] = 0;
	}

	if(nogame[playerid] == 1)
	{
		new id = GetPlayerVehicleID(playerid);
		DestroyVehicle(id);
		id = INVALID_VEHICLE_ID;

		nogame[playerid] = 0;
		SetPlayerInterior(playerid, lanI[playerid]);
		SetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		SetPlayerSkin(playerid, dini_Int(file, "Skin"));
	}

	if(crioucarro[playerid] == 1)
	{
		new string[256];
		new id = GetPlayerVehicleID(playerid);
		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(string, sizeof(string), PASTA_CONCE, carro);
			if(id == dini_Int(string, "Id"))
			{
				crioucarro[playerid] = 0;
				return 1;
			}
		}
		DestroyVehicle(id);
		id = INVALID_VEHICLE_ID;
		crioucarro[playerid] = 0;
	}
	return 1;
}

public Nupdate(playerid)
{
	#if defined EventTextUser
	static Number = 0;
	TextDrawSetString(Stakline, NewsLine[Number++]);
	if(Number == sizeof(NewsLine)) Number = 0;
	#endif

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(bIllegalPlayer[playerid])
	{
		bIllegalPlayer[playerid] = false;
		return 1;
	}

	// ================================ Anim Loops =====================================
	#if defined AnimLoopsUser
	gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
	#endif
	// =================================================================================

	#if defined SnakeUser
	if(SnakeActive[playerid] == 1)
	{
		GameOver(playerid);
	}
	#endif

	// Corrida Pista 1
	if(InRacePista1[playerid] == 1)
	{
		InRacePista1[playerid] = 0;
		DeletePlayerPistaRace1(playerid);
	}

	// Corrida Pista 2
	if(InRacePista2[playerid] == 1)
	{
		InRacePista2[playerid] = 0;
		DeletePlayerPistaRace2(playerid);
	}

	// Corrida Pista 3
	if(InRacePista3[playerid] == 1)
	{
		InRacePista3[playerid] = 0;
		DeletePlayerPistaRace3(playerid);
	}

	// Fliping Pista 4
	if(InRacePista4[playerid] == 1)
	{
		InRacePista4[playerid] = 0;
		DeletePlayerPistaRace4(playerid);
	}

	// Fliping Pista 5
	if(InRacePista5[playerid] == 1)
	{
		InRacePista5[playerid] = 0;
		DeletePlayerPistaRace5(playerid);
	}

	// Campeonato de Bike
	if(InRacePista6[playerid] == 1)
	{
		InRacePista6[playerid] = 0;
		DeletePlayerPistaRace6(playerid);
	}

	// Maquinista
	if(InRacePistaTrain[playerid] == 1)
	{
		InRacePistaTrain[playerid] = 0;
		DeletePlayerPistaRaceTrain(playerid);
	}

	if(cercado[playerid] == 1)
	{
		UncagePlayer(playerid);
		cercado[playerid] = 0;
	}

	if(autosave[playerid] == 1)
	{
		autosave[playerid] = 0;
		KillTimer(autotimer[playerid]);
	}

	new string[256];

	if(PlayerInfo[playerid][SpawnDance] == false)
	{
		KillTimer(PlayerInfo[playerid][SpawnTimer]);
		PlayerInfo[playerid][SpawnAngle] = 0.0;
		PlayerInfo[playerid][SpawnDance] = true;
	}

	if(IsPlayerNPC(playerid))
	{
		if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(NPCLabel[playerid]);
			NPCLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
	}

	#if defined LaserUser
	SetPVarInt(playerid, "laser", 0);
	RemovePlayerAttachedObject(playerid, 0);
	#endif

	if(IsPlayerInAnyVehicle(playerid))
	{
		PauseBar(playerid);
		cCarro[playerid] = -1;

		#if defined CarInfosUser
		TextDrawHideForPlayer(playerid, CarInfos1[playerid]);
		TextDrawHideForPlayer(playerid, CarInfos2[playerid]);
		TextDrawHideForPlayer(playerid, CarInfos3[playerid]);
		TextDrawHideForPlayer(playerid, CarInfos4[playerid]);
		#endif

		// Barras
		#if defined BarUser
		HideProgressBarForPlayer(playerid, vVelo[playerid]);
		HideProgressBarForPlayer(playerid, vComb[playerid]);
		HideProgressBarForPlayer(playerid, vLataria[playerid]);

		DestroyProgressBar(vVelo[playerid]);
		DestroyProgressBar(vComb[playerid]);
		DestroyProgressBar(vLataria[playerid]);

		vVelo[playerid] = INVALID_BAR_ID;
		vComb[playerid] = INVALID_BAR_ID;
		vLataria[playerid] = INVALID_BAR_ID;
		#endif

		#if defined BomberUser
		if(bptextshow[playerid] == 1)
		{
			bptextshow[playerid] = 0;
			RemoveTextDraw(playerid);
		}
		#endif
	}

	if(noevento[playerid] == 1)
	{
		if(Proibido == 0)
		{
			PlayersNoEvento--;
			noevento[playerid] = 0;
			format(string, sizeof(string), "Desocupou-se uma vaga no evento (») Corra! Use: /irevento (») Vagas: %d/%d", PlayersNoEvento, VagasNoEvento);
			SendClientMessageToAll(Vermelho, string);
		}
	}

	if(nogame[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new id = GetPlayerVehicleID(playerid);
			DestroyVehicle(id);
			id = INVALID_VEHICLE_ID;
			nogame[playerid] = 0;
		}
		else
		{
			nogame[playerid] = 0;
		}
	}

	if(autoescola[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new id = GetPlayerVehicleID(playerid);
			DestroyVehicle(id);
			id = INVALID_VEHICLE_ID;
			autoescola[playerid] = 0;
		}
	}

	if(InCall[playerid] == 1)
	{
		if(playerid == sender)
		{
			InCall[gc] = 0, GetCall[gc] = 0; InCall[sender] = 0, GetCall[sender] = 0;
			SetPlayerSpecialAction(gc, SPECIAL_ACTION_STOPUSECELLPHONE);
			format(str3, 128, "%s desligou o celular!", GetName(sender));
			SendClientMessage(gc, GRAY, str3);
		}
		else if(playerid == gc)
		{
			InCall[gc] = 0, GetCall[gc] = 0; InCall[sender] = 0, GetCall[sender] = 0;
			SetPlayerSpecialAction(sender, SPECIAL_ACTION_STOPUSECELLPHONE);
			format(str3, 128, "%s está fora de area por sair da cidade!", GetName(gc));
			SendClientMessage(sender, GRAY, str3);
		}
	}

	Mute[playerid] = 0;
	minutos[playerid] = 0;
	Conversa[playerid] = 0;
	NaFaculdade[playerid] = 0;

	if(PlayerInfo[playerid][Logged] == 1)
	{
		if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(ProfLabel[playerid]);
			ProfLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		TextDrawHideForPlayer(playerid, gps[playerid]);

		#if defined gText2User
		TextDrawHideForPlayer(playerid, gText2[playerid]);
		#endif

		#if defined gText3User
		TextDrawHideForPlayer(playerid, gText3);
		#endif

		#if defined gText4User
		TextDrawHideForPlayer(playerid, gText4[playerid]);
		#endif

		TextDrawHideForPlayer(playerid, Relogio);

		if(AFK[playerid] == 1)
		{
			TextDrawHideForPlayer(playerid, AfkText);
			TextDrawHideForPlayer(playerid, AfkBackText);
		}
		DeletePlayerTextDraws(playerid);

		GangZoneHideForPlayer(playerid, GangZonesFix[1]);
		GangZoneHideForPlayer(playerid, GangZonesFix[2]);
		GangZoneHideForPlayer(playerid, GangZonesFix[3]);
		GangZoneHideForPlayer(playerid, GangZonesFix[4]);
		GangZoneHideForPlayer(playerid, GangZonesFix[5]);
		GangZoneHideForPlayer(playerid, GangZonesFix[6]);
		GangZoneHideForPlayer(playerid, GangZonesFix[7]);
		GangZoneHideForPlayer(playerid, GangZonesFix[8]);
		GangZoneHideForPlayer(playerid, GangZonesFix[9]);
	}

	if(trocandonick[playerid] == 1)
    {
		trocandonick[playerid] = 0;
		format(string, sizeof(string), "{FFFFFF}-| {33AA33}%s {FFFFFF}saiu para mudar de nick.", PlayerName(playerid));
		switch(reason)
		{
			case 0: format(string, sizeof(string), "{FFFF00}-| {33AA33}%s {FFFF00}Saiu Do Servidor (Net da XuXa)", PlayerName(playerid));
			case 1: format(string, sizeof(string), "{FF6600}-| {33AA33}%s {FF6600}Saiu Do Servidor (Vontade própria)", PlayerName(playerid));
			case 2: format(string, sizeof(string), "{FFFFFF}-| {33AA33}%s {FFFFFF}Saiu Do Servidor (Vacilou!Foi Kickado/Banido).", PlayerName(playerid));
		}
	}
	else
	{
		switch(reason)
		{
			case 0: format(string, sizeof(string), "{FFFF00}-| {33AA33}%s {FFFF00}Saiu Do Servidor (Net da XuXa)", PlayerName(playerid));
			case 1: format(string, sizeof(string), "{FF6600}-| {33AA33}%s {FF6600}Saiu Do Servidor (Vontade Própria)", PlayerName(playerid));
			case 2: format(string, sizeof(string), "{FFFFFF}-| {33AA33}%s {FFFFFF}Saiu Do Servidor (Vacilou!Foi Kickado/Banido)", PlayerName(playerid));
		}
	}
	SendClientMessageToAll(-1, string);
	return 1;
}

// ================================ Anim Loops =====================================
#if defined AnimLoopsUser
OnePlayAnim(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoopingAnim(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	SendClientMessage(playerid, Blue, "Para sair do anime tecle 'Espaço'.");
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
}
#endif
// =================================================================================

public OnPlayerSpawn(playerid)
{
	new pname[MAX_PLAYER_NAME], string[256];
	GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
	format(file, sizeof(file), PASTA_CONTAS, pname);

	// ================================ Anim Loops =====================================
	#if defined AnimLoopsUser
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
		PreloadAnimLib(playerid, "COP_AMBIENT");
		PreloadAnimLib(playerid, "ON_LOOKERS");
		PreloadAnimLib(playerid, "benchpress");
		PreloadAnimLib(playerid, "RAPPING");
		PreloadAnimLib(playerid, "SMOKING");
		PreloadAnimLib(playerid, "DEALER");
		PreloadAnimLib(playerid, "BOMBER");
		PreloadAnimLib(playerid, "MD_END");
		PreloadAnimLib(playerid, "FINALE");
		PreloadAnimLib(playerid, "BEACH");
		PreloadAnimLib(playerid, "SWEET");
		PreloadAnimLib(playerid, "STRIP");
		PreloadAnimLib(playerid, "CARRY");
		PreloadAnimLib(playerid, "SHOP");
		PreloadAnimLib(playerid, "FOOD");
		PreloadAnimLib(playerid, "PARK");
		PreloadAnimLib(playerid, "PED");
		PreloadAnimLib(playerid, "BAR");

		gPlayerAnimLibsPreloaded[playerid] = 1;
		printf("Os animes foram pré carregados para %s.", pname);
	}
	#endif
	// =================================================================================

	SetPlayerInterior(playerid, 0);
	SetCameraBehindPlayer(playerid);

	if(cercado[playerid] == 1)
	{
		UncagePlayer(playerid);
		cercado[playerid] = 0;
	}

	emcasa[playerid] = 0;
	autoescola[playerid] = 0;
	xprefls[playerid] = 0;
	prefsf[playerid] = 0;
	preflv[playerid] = 0;
	nobanco[playerid] = 0;
	nobarls[playerid] = 0;
	nobarsf[playerid] = 0;
	nobarlv[playerid] = 0;
	nobarfc[playerid] = 0;
	nautlls[playerid] = 0;
	nautllv[playerid] = 0;
	algemado[playerid] = 0;
	sequestro[playerid] = 0;
	infratores[playerid] = 0;
	vercmds[playerid] = 0;
	verpms[playerid] = 0;
	statuscp[playerid] = 0;
	gmod[playerid] = 0;
	noevento[playerid] = 0;
	GPS_Spawned[playerid] = 1;

	if(NaFaculdade[playerid] == 1)
	{
		SetPlayerHealth(playerid, 999999);
		SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid, 1494.4003, 1304.2990, 1093.2891);
		TogglePlayerControllable(playerid, 1);
	}

	if(dini_Exists(file))
	{
		if(pAdmin[playerid] > 0)
		{
			admin[playerid] = 1;
			dini_IntSet(file, "aAdmin", 1);
		}
		else
		{
			admin[playerid] = 0;
			dini_IntSet(file, "aAdmin", 0);
		}
		if(dini_Int(file, "VIP") == 1)
		{
			#if defined AntiCheatUser
			CheckSet(0, playerid, false);
			SetWeaponAllowed(playerid, 38, true);
			SetWeaponAllowed(playerid, 35, true);
			SetWeaponAllowed(playerid, 36, true);
			SetWeaponAllowed(playerid, 37, true);
			SetWeaponAllowed(playerid, 39, true);
			SetWeaponAllowed(playerid, 40, true);
			#endif

			vip[playerid] = 1;

			SendClientMessage(playerid, verdel, "Você é um jogador VIP, aproveite!");
			SendClientMessage(playerid, Violeta, "Veja os comandos em /cmdsvip");
		}
		else
		{
			#if defined AntiCheatUser
			CheckSet(0, playerid, true);
			SetWeaponAllowed(playerid, 38, false);
			SetWeaponAllowed(playerid, 35, false);
			SetWeaponAllowed(playerid, 36, false);
			SetWeaponAllowed(playerid, 37, false);
			SetWeaponAllowed(playerid, 39, false);
			SetWeaponAllowed(playerid, 40, false);
			#endif

			vip[playerid] = 0;
		}

		// Casamento
		if(dini_Int(file, "Casado") == 3)
		{
			format(string, sizeof(string), "%s se divorciou de você.\nNão perca tempo, case com outro(a).", dini_Get(file, "CasouCom"));

			dini_IntSet(file, "Casado", 0);
			dini_Set(file, "CasouCom", "Ninguem");

			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, "Divórcio", string, "OK", "");
		}

		if(dini_Int(file, "Lutas") == 1)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
		}
		if(dini_Int(file, "Lutas") == 2)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		}
		if(dini_Int(file, "Lutas") == 3)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		}
		if(dini_Int(file, "Lutas") == 4)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		}
		if(dini_Int(file, "Lutas") == 5)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		}
		if(dini_Int(file, "Lutas") == 6)
		{
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
		}

		if(dini_Int(file, "novato") == 1)
		{
			DynTutorialStart(playerid);
		}
		if(dini_Int(file, "Procurado") == 0)
		{
			Procurados[playerid] = 0;
			SetPlayerWantedLevel(playerid, 0);
		}
		else
		{
			Procurados[playerid] = 1;
			SetPlayerWantedLevel(playerid, 2);
		}
		if(dini_Int(file, "Preso") == 1)
		{
			preso[playerid] = 1;
			dini_IntSet(file, "ofmaconha", 0);
			dini_IntSet(file, "ofcocaina", 0);
			dini_IntSet(file, "ofcrack", 0);
			dini_IntSet(file, "tmaconha", 0);
			dini_IntSet(file, "tcrack", 0);
			dini_IntSet(file, "tcocaina", 0);
			dini_IntSet(file, "Maconha", 0);
			dini_IntSet(file, "Crack", 0);
			dini_IntSet(file, "Cocaina", 0);
			ResetPlayerWeapons(playerid);
			SetPlayerHealth(playerid, 999999);
			SetPlayerInterior(playerid, 6);
			SetPlayerPos(playerid, 263.8820, 77.4002, 1001.0391);
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, msgdm, "Você está preso. Contrate um advogado ou pague a fiança, /fianca");
		}
		else
		{
			preso[playerid] = 0;
		}
		if(nogame[playerid] == 1)
		{
			SetPlayerInterior(playerid, lanI[playerid]);
			SetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
			SetPlayerSkin(playerid, dini_Int(file, "Skin"));
			nogame[playerid] = 0;
			nobomber[playerid] = 0;
		}
		dini_IntSet(file, "convitent", 0);
		dini_IntSet(file, "Entrevista", 0);
		dini_IntSet(file, "MN", 0);
	}

	if(PlayerInfo[playerid][Logged] == 1)
	{
		if(dini_Int(file, "Sexo") == 0)
		{
			ShowPlayerDialog(playerid, skinnovato, DIALOG_STYLE_MSGBOX, "Gênero", "Qual é seu sexo?\n\n", "Masculino", "Feminino");
		}
		else
		{
			if(pAdmin[playerid] > 0)
			{
				#if !defined SystemAdminUser
				pAdmin[playerid] = 0;
				dini_IntSet(file, "aAdmin", 0);
				ShowPlayerDialog(playerid, sisadminfo, DIALOG_STYLE_MSGBOX, "{FFFFFF}Aviso Importante aos ADM's", "{FF33FF}O sistema de Administração do servidor foi desativado!\n\n{00FF00}Devido vários conflitos entre jogadores foi tomada esta decisão.\n\n{99FFFF}O tempo para que seja normalizado o sistema ainda não foi definido.", "OK", "");
				#endif
			}
		}
		if(dini_Int(file, "Bloco") == 1)
		{
			format(string, sizeof(string), "Lembrete: %s", dini_Get(file, "Lembrete"));
			SendClientMessage(playerid, Cinza, string);
		}
		if(PlayerInfo[playerid][SpawnDance] == false)
		{
			KillTimer(PlayerInfo[playerid][SpawnTimer]);
			PlayerInfo[playerid][SpawnAngle] = 0.0;
			PlayerInfo[playerid][SpawnDance] = true;
		}
		SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 357.9491, 0, 0, 0, 0, 0, 0);
		Logarprof(playerid);
	}
	else
	{
		RandomSpawnPlayer(playerid);
		if(PlayerInfo[playerid][SpawnDance])
		{
			PlayerInfo[playerid][SpawnTimer] = SetTimerEx("MoveCamera", moving_speed, true, "i", playerid);
			PlayerInfo[playerid][SpawnDance] = false;
		}
	}

	TogglePlayerControllable(playerid, false);
	SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
	return 1;
}

public MoveCamera(playerid)
{
	GetPlayerPos(playerid, p_x, p_y, p_z);
	SetPlayerCameraPos(playerid, p_x-2*floatsin(-PlayerInfo[playerid][SpawnAngle], degrees), p_y-10*floatcos(-PlayerInfo[playerid][SpawnAngle], degrees), p_z+3);
	SetPlayerCameraLookAt(playerid, p_x, p_y, p_z+0.5);
	PlayerInfo[playerid][SpawnAngle] += 0.5;
	if(PlayerInfo[playerid][SpawnAngle] >= 360.0)
	{
		PlayerInfo[playerid][SpawnAngle] = 0.0;
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[256];
	new aname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
	format(file, sizeof(file), PASTA_CONTAS, aname);

	if(PlayerInfo[playerid][Logged] == 0)
	{
		SendClientMessage(playerid, Vermelho, "Logue-se antes.");
		return 0;
	}

	if(Mute[playerid] == 1)
	{
		SendClientMessage(playerid, Vermelho, "|_ ANTI-FLOOD _| Você não pode falar enquanto está mudo!");
		return 0;
	}

	if(AFK[playerid] == 1)
	{
		SendClientMessage(playerid, Vermelho, "Para voltar ao jogo digite /on");
		return 0;
	}

	if(NaFaculdade[playerid] == 1)
	{
		Conversa[playerid] = Conversa[playerid]++;
		if(Conversa[playerid] == 3)
		{
			minutos[playerid] = 0;
			NaFaculdade[playerid] = 0;
			SpawnPlayer(playerid);
			SendClientMessage(playerid, Vermelho, "Você conversou muito e foi expulso da biblioteca!");
		}
		format(string, sizeof(string), "Você está conversando. Você recebeu um aviso, agora você está com %d/3 aviso(s).", Conversa[playerid]);
		SendClientMessage(playerid, Aviso, string);
		return 0;
	}

	if(!(pAdmin[playerid] >= 1))
	{
		for(new p = 0; p < sizeof Palavroes; p++)
		{
			new fp = strfind(text, Palavroes[p], true);
			while(fp != -1)
			{
				for(new i = 0; i < strlen(Palavroes[p]); i++)
				{
					text[fp + i] = '_';
				}
				fp = strfind(text, Palavroes[p], true);
			}
		}

		if(VBIsIP(text))
		{
			SendClientMessage(playerid, Amarelo, "|_ ANTI-SPAM _| Você não pode fazer spam no servidor.");
			return 0;
		}
	}

	if(GetTickCount() > FloodTimer[playerid])
	{
		FloodAlert[playerid] = 0;
	}

	FloodTimer[playerid] = GetTickCount() +TimerFlood;
	FloodAlert[playerid]++;

	if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-FLOOD _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-FLOOD _| Você tem %d/%d avisos. Mais um e você será kickado.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood)
	{
		format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Flood Chat", PlayerName(playerid));
		SendClientMessageToAll(Amarelo, string);
		KickLog(string);
		Kick(playerid);
		return 0;
	}

	if(InCall[playerid] == 1)
	{
		format(str3, 128, " [Celular] %s (%d): %s", GetName(playerid), playerid, text);
		SendClientMessage(gc, BLUEWHITE, str3);
		format(str3, 128, " [Celular] %s (%d): %s", GetName(playerid), playerid, text);
		SendClientMessage(sender, BLUEWHITE, str3);
		return 0;
	}

	if(dini_Int(file, "Entrevista") == 1)
	{
		format(string,sizeof(string), "[»] O entrevistado %s responde: %s", aname, text);
		SendPlayerMessageToAll(playerid, string);
		return 0;
	}

	if(dini_Int(file, "Entrevista") == 2)
	{
		format(string,sizeof(string), "[»] O reporter %s pergunta: %s", aname, text);
		SendPlayerMessageToAll(playerid, string);
		return 0;
	}

    SetPlayerChatBubble(playerid, text, Azul, 50.0, 10000);

	if(Chatlb == 1)
	{
		format(string, sizeof(string), "[ID: %d] %s", playerid, text);
		SendPlayerMessageToAll(playerid, string);
	}
	else
	{
		ChatProximo(playerid, text);
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	new cmd[256], stringcmd[256], string[256],
		specplayerid, idx, playa[MAX_PLAYER_NAME];

	if(GetTickCount() > FloodTimer[playerid])
	{
		FloodAlert[playerid] = 0;
	}

	FloodTimer[playerid] = GetTickCount() +TimerFlood;
	FloodAlert[playerid]++;

	if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-FLOOD _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-FLOOD _| Você tem %d/%d avisos. Mais um e você será kickado.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood)
	{
		format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) pelo BCE-Bot. Motivo: Flood Comando", PlayerName(playerid));
		SendClientMessageToAll(Amarelo, string);
		KickLog(string);
		Kick(playerid);
		return 1;
	}

	// Anti Rcon Hack
	if(strcmp("/scon login", cmdtext, true, 11) == 0)
	{
		#if defined SystemAdminUser
		if(strlen(cmdtext[12]) == 0) return 1;
		format(string, sizeof(string), "/scon login %s", rconpass);

		if(strcmp(cmdtext, string, true) == 0)
		{
			PlayerInfo[playerid][SCON] = true;
			SendClientMessage(playerid, COLOR_WHITE, "SCON: Você está logado como administrador.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "SCON: Senha digitada incorreta.");
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	if(strcmp("/scon", cmdtext, true, 5) == 0)
	{
		if(strlen(cmdtext[6]) == 0) return 1;
		if(cmdtext[6] == ' ') return 1;

		if(PlayerInfo[playerid][SCON] == true)
		{
			SendRconCommand(cmdtext[6]);
			format(string, sizeof(string), "SCON: SCON Comando \"%s\" enviado", cmdtext[6]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	// =============================================================================

	printf("[CMD] %s (ID: %d) digitou o comando ( %s ).", PlayerName(playerid), playerid, cmdtext);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(vercmds[i] == 1)
			{
				GetPlayerName(playerid, playa, MAX_PLAYER_NAME);
				format(stringcmd, 256, "O player %s (ID: %d) digitou o comando ( %s ).", playa, playerid, cmdtext);
				SendClientMessage(i, Blue, stringcmd);
			}
		}
	}

	if(PlayerInfo[playerid][Logged] == 0) return SendClientMessage(playerid, Vermelho, "Logue-se antes de usar um comando.");
	cmd = strtok(cmdtext, idx);

	if(strcmp("/ajudaradar", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, Branco, "***************************** SISTEMA DE RADAR *****************************");
		SendClientMessage(playerid, Azul, "Existe radar na prefeitura, hospital 1 e 2 e na biblioteca em Los Santos.");
		SendClientMessage(playerid, Azul, "O limite de velocidade é entre 80 KM/H, fique atento, olhe no velocimetro.");
		SendClientMessage(playerid, Branco, "***************************** SISTEMA DE RADAR *****************************");
		return 1;
	}

	if(strcmp(cmdtext, "/ajudaprop", true) == 0)
	{
		SendClientMessage(playerid, Azul, "/comprarprop: Compra uma propriedade.");
		SendClientMessage(playerid, Azul, "/venderprop: Vende uma propriedade.");
		SendClientMessage(playerid, Azul, "/sacarprop: Pega o dinhero da propriedade.");
		SendClientMessage(playerid, Azul, "/propnm [nome]: Muda o nome da sua prop.");
		SendClientMessage(playerid, Azul, "/Minhaprop");
		SendClientMessage(playerid, Amarelo, "Todo dia as 15:00 as propriedades recebem renda.");
		return 1;
	}

	if(strcmp(cmdtext, "/ajudacasa", true) == 0)
	{
		SendClientMessage(playerid, Azul, "/comprarcasa: Compra uma casa.");
		SendClientMessage(playerid, Azul, "/vendercasa: Vende uma casa.");
		SendClientMessage(playerid, Azul, "/convidarcasa [id]: Convida alguém a morar na sua casa.");
		SendClientMessage(playerid, Azul, "/expulsarcasa [nick]: Expulsa um morador da sua casa.");
		SendClientMessage(playerid, Azul, "/Minhacasa");
		return 1;
	}

	if(strcmp(cmdtext, "/ajudaportao", true) == 0)
	{
		SendClientMessage(playerid, Azul, "/ap [id]: Abre um determinado portão.");
		SendClientMessage(playerid, Azul, "/fp [id]: Fecha um determinado portão.");
		SendClientMessage(playerid, Azul, "/infoportao: Exibe ID e Dono do portão.");
		SendClientMessage(playerid, Azul, "/copiachave: Gera uma cópia da sua chave para alguem.");
		SendClientMessage(playerid, Azul, "/tomarchave: Toma a cópia da sua chave de alguem.");
		return 1;
	}

	if(strcmp(cmdtext, "/comandoslaser", true) == 0)
	{
		#if defined LaserUser
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "LaserP") == 1)
		{
			SendClientMessage(playerid, Azul, "/laseron: Liga a Mira Laser.");
			SendClientMessage(playerid, Azul, "/laseroff: Desliga a Mira Laser.");
			SendClientMessage(playerid, Azul, "/lasercol [red/blue/pink/orange/green/yellow]");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem Mira Leser, compre na loja de utilidades.");
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	if(!strcmp("/laseron", cmdtext, true))
	{
		#if defined LaserUser
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "LaserP") == 1)
		{
			SetPVarInt(playerid, "laser", 1);
			SetPVarInt(playerid, "color", GetPVarInt(playerid, "color"));
			SendClientMessage(playerid, Verde, "Mira Laser on!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem Mira Leser, compre na loja de utilidades.");
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	if(!strcmp("/laseroff", cmdtext, true))
	{
		#if defined LaserUser
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "LaserP") == 1)
		{
			SetPVarInt(playerid, "laser", 0);
			RemovePlayerAttachedObject(playerid, 0);
			SendClientMessage(playerid, Verde, "Mira Laser off!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem Mira Leser, compre na loja de utilidades.");
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	if(!strcmp("/lasercol", cmd, true))
	{
		#if defined LaserUser
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "LaserP") == 1)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0x00E800FF, "Usage: /lasercol [color]");
				return 1;
			}
			if(!strcmp(tmp, "red", true)) SetPVarInt(playerid, "color", 18643);
			else if(!strcmp(tmp, "blue", true)) SetPVarInt(playerid, "color", 19080);
			else if(!strcmp(tmp, "pink", true)) SetPVarInt(playerid, "color", 19081);
			else if(!strcmp(tmp, "orange", true)) SetPVarInt(playerid, "color", 19082);
			else if(!strcmp(tmp, "green", true)) SetPVarInt(playerid, "color", 19083);
			else if(!strcmp(tmp, "yellow", true)) SetPVarInt(playerid, "color", 19084);
			else SendClientMessage(playerid, 0x00E800FF, "Colour not available!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem mira leser, compre na loja de utilidades.");
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	// Animes ==========================================================================
	if(strcmp(cmd, "/dance", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new animationplayed, tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, ">Use /dance [1-3]");
				return 1;
			}
			animationplayed = strval(tmp);
			if(animationplayed < 1 || animationplayed > 3)
			{
				SendClientMessage(playerid, Vermelho, ">Use /dance [1-3]");
				return 1;
			}
			if(animationplayed == 1)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
			}
			else if(animationplayed == 2)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
			}
			else if(animationplayed == 3)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/fumar", true) == 0)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		return 1;
	}

	if(strcmp(cmd, "/bebado", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "PED", "WALK_DRUNK", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/merda", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/mascararse", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/cruzarb", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/deitar", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "BEACH", "bather", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/abaixar", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "PED", "cower", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "PED", "cower", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/vomitar", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/rap", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/cobrar", true) == 0)
	{
		#if defined AnimLoopsUser
		OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/fumar2", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "SMOKING", "F_smklean_loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/passarmao", true) == 0)
	{
		#if defined AnimLoopsUser
		OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/sentar", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/conversar", true) == 0)
	{
		#if defined AnimLoopsUser
		OnePlayAnim(playerid, "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/fodase", true) == 0)
	{
		#if defined AnimLoopsUser
		OnePlayAnim(playerid, "PED", "fucku", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/observar", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/taichi", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "PARK", "Tai_Chi_Loop", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/strip", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "STRIP", "STR_B2C", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "STRIP", "STR_B2C", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/mulhersexo", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/comermulher", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "MD_END", "END_SC1_SMO", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "MD_END", "END_SC1_SMO", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/mulherfudida", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "FINALE", "FIN_Land_Die", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "FINALE", "FIN_Land_Die", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp(cmd, "/de4", true) == 0)
	{
		#if defined AnimLoopsUser
		LoopingAnim(playerid, "FINALE", "FIN_Land_Car", 4.1, 0, 1, 1, 1, 1);
		#else
		ApplyAnimation(playerid, "FINALE", "FIN_Land_Car", 4.1, 0, 1, 1, 1, 1);
		#endif

		return 1;
	}
	if(strcmp("/animes", cmd, true) == 0)
	{
		SendClientMessage(playerid, Branco, "====================== Lista de Animes ======================");
		SendClientMessage(playerid, Azul, "/bebado /merda /mascararse /cruzarb /deitar /sentar            ");
		SendClientMessage(playerid, Azul, "/vomitar /rap /cobrar /fumar /passarmao /taichi                ");
		SendClientMessage(playerid, Azul, "/observar /fodase /conversar /abaixar /strip /fumar2           ");
		SendClientMessage(playerid, Azul, "/de4 /mulhersexo /comermulher /mulherfudida					  ");
		SendClientMessage(playerid, Branco, "====================== Lista de Animes ======================");
		return 1;
	}
	// =================================================================================

	if(strcmp(cmd, "/salvarspawn", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new Float:X, Float:Y, Float:Z, Float:A,
				InteriorSpawn, VirtualWorld,
				File:hFile, sstring[256];

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			InteriorSpawn = GetPlayerInterior(playerid);
			VirtualWorld = GetPlayerVirtualWorld(playerid);

			if(!strlen(cmdtext[14]))
			{
				format(sstring, sizeof(sstring), "%.3f,%.3f,%.3f,%.2f,%d,%d ;\r\n", X, Y, Z, A, InteriorSpawn, VirtualWorld);
			}
			else
			{
				format(sstring, sizeof(sstring), "%.3f,%.3f,%.3f,%.2f,%d,%d ; // %s \r\n", X, Y, Z, A, InteriorSpawn, VirtualWorld, cmdtext[14]);
			}
			hFile = fopen(SpawnPosFile, io_append);
			fwrite(hFile, sstring);
			fclose(hFile);

			AddSpawnPos(X, Y, Z, A, InteriorSpawn, VirtualWorld);
			SendClientMessage(playerid, Branco, "Posição para Spawn salva com sucesso!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/autosalvar", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			if(autosave[playerid] == 0)
			{
				autosave[playerid] = 1;
				autotimer[playerid] = SetTimerEx("SalvePlayerPos", 10000, true, "e", playerid);
				SendClientMessage(playerid, COLOR_WHITE, "Auto salvar ligado com sucesso!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /autosalvar para desligar.");
			}
			else if(autosave[playerid] == 1)
			{
				autosave[playerid] = 0;
				KillTimer(autotimer[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, "Auto salvar desligado com sucesso!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /autosalvar para ligar.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/salvarpos", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new File:fp, text[128], M,
				Float:X, Float:Y, Float:Z, Float:A,
				INT, comment[128];

			if(fexist("SavedPositions.txt"))
			{
				fp = fopen("SavedPositions.txt", io_append);
			}
			else
			{
				fp = fopen("SavedPositions.txt", io_write);
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				M = GetPlayerSkin(playerid);
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);
			}
			else
			{
				new vehid = GetPlayerVehicleID(playerid);
				M = GetVehicleModel(vehid);
				GetVehiclePos(vehid, X, Y, Z);
				GetVehicleZAngle(vehid, A);
			}
			INT = GetPlayerInterior(playerid);

			strmid(comment, cmdtext, 10, strlen(cmdtext));
			if(!strlen(comment))
			{
				format(text, sizeof text, "%d, %.4f, %.4f, %.4f, %.4f, %d\r\n", M, X, Y, Z, A, INT);
			}
			else
			{
				format(text, sizeof text, "%d, %.4f, %.4f, %.4f, %.4f, %d //%s\r\n", M, X, Y, Z, A, INT, comment);
			}
			fwrite(fp, text);
			fclose(fp);

			SendClientMessage(playerid, COLOR_WHITE, "Posição salva com sucesso!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/salvar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new Float:X, Float:Y, Float:Z, INT;
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(!IsPlayerInAnyVehicle(playerid))
		{
			GetPlayerPos(playerid, X, Y, Z);
		}
		else
		{
			new vehid = GetPlayerVehicleID(playerid);
			GetVehiclePos(vehid, X, Y, Z);
		}
		INT = GetPlayerInterior(playerid);
		dini_IntSet(file, "Continuar", 1);
		dini_FloatSet(file, "ContinuarX", X);
		dini_FloatSet(file, "ContinuarY", Y);
		dini_FloatSet(file, "ContinuarZ", Z);
		dini_IntSet(file, "ContinuarI", INT);
		SendClientMessage(playerid, COLOR_WHITE, "Posição salva com sucesso!");
		SendClientMessage(playerid, COLOR_GREEN, "Use /continuar para ir até a posição salva.");
		return 1;
	}

	if(strcmp(cmdtext, "/vendertodascasas", true) == 0)
	{
		if(PlayerInfo[playerid][SCON] == true)
		{
			new pickupid, iconid;
			for(new c = 0; c < MAX_CASAS; c++)
			{
				format(string, sizeof(string), PASTA_CASAS, c);
				if(dini_Exists(string))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						format(file, sizeof(file), PASTA_CONTAS, dini_Get(string, "Dono"));
						if(dini_Exists(file))
						{
							dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+dini_Int(string, "Preco"));
							dini_FloatSet(file, "CasaX", Float:1410.5046);
							dini_FloatSet(file, "CasaY", Float:-1789.7197);
							dini_FloatSet(file, "CasaZ", Float:13.8285);
							dini_IntSet(file, "Casa", 0);
						}
						dini_IntSet(string, "TDono", 0);
						dini_Set(string, "Dono", "Ninguem");
						DestroyDynamicPickup(dini_Int(string, "Id"));
						pickupid = CreateDynamicPickup(1273, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
						dini_IntSet(string, "Id", pickupid);
						DestroyDynamicMapIcon(dini_Int(string, "IconId"));
						iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 31, 0, -1, -1, -1, 100.0);
						dini_IntSet(string, "IconId", iconid);
						format(STRX, sizeof(STRX), "Casa ID: %d\n}Dono: %s\nMorador: %s\nValor: $%d", c, dini_Get(string, "Dono"), dini_Get(string, "Morador"), dini_Int(string, "Preco"));
						UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
					}
				}
			}
			SendClientMessage(playerid, Amarelo, "Todas casas foram vendidas.");
			SendClientMessage(playerid, Verde, "O dinheiro foi depositado na conta do dono.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vendertodasprops", true) == 0)
	{
		if(PlayerInfo[playerid][SCON] == true)
		{
			new pickupid, iconid;
			for(new p = 0; p < MAX_PROPS; p++)
			{
				format(string, sizeof(string), PASTA_PROPS, p);
				if(dini_Exists(string))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						format(file, sizeof(file), PASTA_CONTAS, dini_Get(string, "Dono"));
						if(dini_Exists(file))
						{
							dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+dini_Int(string, "Preco"));
							dini_IntSet(file, "Prop", 0);
						}
						dini_IntSet(string, "TDono", 0);
						dini_Set(string, "Dono", "Ninguem");
						DestroyDynamicPickup(dini_Int(string, "Id"));
						pickupid = CreateDynamicPickup(1279, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
						dini_IntSet(string, "Id", pickupid);
						DestroyDynamicMapIcon(dini_Int(string, "IconId"));
						iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 11, 0, -1, -1, -1, 100.0);
						dini_IntSet(string, "IconId", iconid);
						format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", dini_Get(string, "Nome"), p, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
						UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
					}
				}
			}
			SendClientMessage(playerid, Amarelo, "Todas propriedades foram vendidas.");
			SendClientMessage(playerid, Verde, "O dinheiro foi depositado na conta do dono.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vendertodosveiculos", true) == 0)
	{
		if(PlayerInfo[playerid][SCON] == true)
		{
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(string, sizeof(string), PASTA_CONCE, carro);
				if(dini_Exists(string))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						format(file, sizeof(file), PASTA_CONTAS, dini_Get(string, "Dono"));
						if(dini_Exists(file))
						{
							dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+dini_Int(string, "Preco"));
						}
						dini_IntSet(string, "TDono", 0);
						dini_Set(string, "Dono", "Ninguem");
						dini_IntSet(string, "CarVIP", 0);
						DestroyVehicle(dini_Int(string, "Id"));
						CriarVeiculo3(carro, dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
					}
				}
			}
			SendClientMessage(playerid, Amarelo, "Todos veículos foram vendidos.");
			SendClientMessage(playerid, Verde, "O dinheiro foi depositado na conta do dono.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/liberartodosportoes", true) == 0)
	{
		if(PlayerInfo[playerid][SCON] == true)
		{
			for(new portao = 0; portao < MAX_PORTOES; portao++)
			{
				format(string, sizeof(string), PASTA_PORTOES, portao);
				if(dini_Exists(string))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						dini_Set(string, "Dono", "Ninguem");
						dini_Set(string, "Convidado1", "Ninguem");
						dini_Set(string, "Convidado2", "Ninguem");
						dini_Set(string, "Convidado3", "Ninguem");
						dini_IntSet(string, "TDono", 0);
					}
				}
			}
			SendClientMessage(playerid, Amarelo, "Todos portões foram liberados.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/comprarprop", true) == 0)
	{
		new pickupid, iconid;
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 0)
					{
						if(GetPlayerGrana(playerid) >= dini_Int(string, "Preco"))
						{
							if(GetProps(playerid) < 1)
							{
								dini_IntSet(string, "TDono", 1);
								dini_Set(string, "Dono", PlayerName(playerid));
								GivePlayerGrana(playerid, -dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1279, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 51, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: %s\nValor: $%d", dini_Get(string, "Nome"), p, PlayerName(playerid), dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
								OnPlayerCommandText(playerid, "/salvarprop");
								return 1;
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Você já possui uma propriedade!");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Essa propriedade não está a venda!");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/venderprop", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new pickupid, iconid;
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0 || pAdmin[playerid] == 5 || PlayerInfo[playerid][SCON] == true)
						{
							format(file, sizeof(file), PASTA_CONTAS, pname);
							dini_IntSet(file, "Prop", 0);
							dini_IntSet(string, "TDono", 0);
							dini_Set(string, "Dono", "Ninguem");
							GivePlayerGrana(playerid, dini_Int(string, "Preco"));
							DestroyDynamicPickup(dini_Int(string, "Id"));
							pickupid = CreateDynamicPickup(1279, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
							dini_IntSet(string, "Id", pickupid);
							DestroyDynamicMapIcon(dini_Int(string, "IconId"));
							iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 11, 0, -1, -1, -1, 100.0);
							dini_IntSet(string, "IconId", iconid);
							format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: Ninguem\nValor: $%d", dini_Get(string, "Nome"), p, dini_Int(string, "Preco"));
							UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esta propriedade não é sua!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta propriedade já está a venda!");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/sacarprop", true) == 0)
	{
		new strx[256];
		new pname[MAX_PLAYER_NAME];
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
						{
							GivePlayerGrana(playerid, dini_Int(string, "Grana"));
							format(strx, sizeof(strx), "Você pegou $%d de sua propriedade!", dini_Int(string, "Grana"));
							SendClientMessage(playerid, Amarelo, strx);
							dini_IntSet(string, "Grana", 0);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esta propriedade não é sua!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta propriedade não tem dono!");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/propnm", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
			{
				if(dini_Int(string, "TDono") == 1 || pAdmin[playerid] == 5 || PlayerInfo[playerid][SCON] == true)
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					if(strcmp(dini_Get(string, "Dono"), aname, false) == 0 || pAdmin[playerid] == 5 || PlayerInfo[playerid][SCON] == true)
					{
						new tmp[256];
						strmid(tmp, cmdtext, 8, strlen(cmdtext));
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_RED, "/propnm [nome]");
							return 1;
						}
						else
						{
							dini_Set(string, "Nome", tmp);
							format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: %s\nValor: $%d", tmp, p, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
							UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta propriedade não é sua!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Esta propriedade não tem dono!");
					return 1;
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/criarprop", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new Float:X, Float:Y, Float:Z, I,
				tmp[256], preco[256];

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/criarprop [preço]");
				return 1;
			}
			set(preco, tmp);
			GetPlayerPos(playerid, X, Y, Z);
			I = GetPlayerInterior(playerid);
			PlayerCreateProp(playerid, strval(preco), X, Y, Z, I);
		}
		return 1;
	}

	if(strcmp(cmd, "/mudarprop", true) == 0)
	{
		new id, tmp[256], string222[256];
		new dono[256], pickupid, iconid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/mudarprop [id]");
			return 1;
		}
		id = strval(tmp);
		if(pAdmin[playerid] >= 4)
		{
			format(string, sizeof(string), PASTA_PROPS, id);
			if(dini_Exists(string))
			{
				new Float:X, Float:Y, Float:Z, I;
				GetPlayerPos(playerid, X, Y, Z);
				I = GetPlayerInterior(playerid);
				dini_FloatSet(string, "PosX", X);
				dini_FloatSet(string, "PosY", Y);
				dini_FloatSet(string, "PosZ", Z);
				dini_IntSet(string, "IntID", I);

				DestroyDynamicPickup(dini_Int(string, "Id"));
				DestroyDynamicMapIcon(dini_Int(string, "IconId"));
				DestroyDynamic3DTextLabel(ptextoid[id]);
				ptextoid[id] = Text3D:INVALID_3DTEXT_ID;

				if(dini_Int(string, "TDono") == 0)
				{
					dono = dini_Get(string, "Dono");
					pickupid = CreateDynamicPickup(1279, 1, X, Y, Z, -1, -1, -1, 200.0);
					dini_IntSet(string, "Id", pickupid);
					iconid = CreateDynamicMapIcon(X, Y, Z, 11, 0, -1, -1, -1, 100.0);
					dini_IntSet(string, "IconId", iconid);
					format(file, sizeof(file), PASTA_CONTAS, dono);
					if(dini_Exists(file))
					{
						dini_FloatSet(file, "PropX", Float:X);
						dini_FloatSet(file, "PropY", Float:Y);
						dini_FloatSet(file, "PropZ", Float:Z);
						format(string222, sizeof(string222), "Dono Spawned: %s", dini_Get(string, "Dono"));
						SendClientMessage(playerid, BLUEWHITE, string222);
					}
				}
				else
				{
					pickupid = CreateDynamicPickup(1279, 1, X, Y, Z, -1, -1, -1, 200.0);
					dini_IntSet(string, "Id", pickupid);
					iconid = CreateDynamicMapIcon(X, Y, Z, 51, 0, -1, -1, -1, 100.0);
					dini_IntSet(string, "IconId", iconid);
				}
				format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: %s\nValor: $%d", dini_Get(string, "Nome"), id, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
				ptextoid[id] = CreateDynamic3DTextLabel(STRX, -1, X, Y, Z, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/criarcasa", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new Float:X, Float:Y, Float:Z, I,
				tmp[256], preco[128], cint[128];

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/criarcasa [preço] [interior]");
				return 1;
			}
			set(preco, tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/criarcasa [preço] [interior]");
				return 1;
			}
			set(cint, tmp);
			GetPlayerPos(playerid, X, Y, Z);
			I = GetPlayerInterior(playerid);
			PlayerCreateHause(playerid, strval(preco), strval(cint), X, Y, Z, I);
		}
		return 1;
	}

	if(strcmp(cmd, "/mudarcasa", true) == 0)
	{
		new id, tmp[256], string222[256];
		new dono[256], pickupid, iconid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/mudarcasa [id]");
			return 1;
		}
		id = strval(tmp);
		if(pAdmin[playerid] >= 4)
		{
			format(string, sizeof(string), PASTA_CASAS, id);
			if(dini_Exists(string))
			{
				new Float:X, Float:Y, Float:Z, I;
				GetPlayerPos(playerid, X, Y, Z);
				I = GetPlayerInterior(playerid);
				dini_FloatSet(string, "PosX", Float:X);
				dini_FloatSet(string, "PosY", Float:Y);
				dini_FloatSet(string, "PosZ", Float:Z);
				dini_IntSet(string, "IntID", I);

				DestroyDynamicPickup(dini_Int(string, "Id"));
				DestroyDynamicMapIcon(dini_Int(string, "IconId"));
				DestroyDynamic3DTextLabel(ctextoid[id]);
				ctextoid[id] = Text3D:INVALID_3DTEXT_ID;

				if(dini_Int(string, "TDono") == 0)
				{
					dono = dini_Get(string, "Dono");
					pickupid = CreateDynamicPickup(1273, 1, X, Y, Z, -1, -1, -1, 200.0);
					dini_IntSet(string, "Id", pickupid);
					iconid = CreateDynamicMapIcon(X, Y, Z, 31, 0, -1, -1, -1, 100.0);
					dini_IntSet(string, "IconId", iconid);
					format(file, sizeof(file), PASTA_CONTAS, dono);
					if(dini_Exists(file))
					{
						dini_FloatSet(file, "CasaX", Float:X);
						dini_FloatSet(file, "CasaY", Float:Y);
						dini_FloatSet(file, "CasaZ", Float:Z);
						format(string222, sizeof(string222), "Dono Spawned: %s", dini_Get(string, "Dono"));
						SendClientMessage(playerid, BLUEWHITE, string222);
					}
				}
				else
				{
					pickupid = CreateDynamicPickup(1272, 1, X, Y, Z, -1, -1, -1, 200.0);
					dini_IntSet(string, "Id", pickupid);
					iconid = CreateDynamicMapIcon(X, Y, Z, 32, 0, -1, -1, -1, 100.0);
					dini_IntSet(string, "IconId", iconid);
				}
				format(STRX, sizeof(STRX), "Casa ID: %d\nDono: %s\nMorador: %s\nValor: $%d", id, dini_Get(string, "Dono"), dini_Get(string, "Morador"), dini_Int(string, "Preco"));
				ctextoid[id] = CreateDynamic3DTextLabel(STRX, -1, X, Y, Z, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/precoprop", true) == 0)
	{
		new preco, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/precoprop [preço]");
			return 1;
		}
		preco = strval(tmp);
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(pAdmin[playerid] >= 5)
					{
						dini_IntSet(string, "Preco", preco);
						format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: %s\nValor: $%d", dini_Get(string, "Nome"), p, dini_Get(string, "Dono"), preco);
						UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/comprarcasa", true) == 0)
	{
		new pickupid, iconid;
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 0)
					{
						if(GetPlayerGrana(playerid) >= dini_Int(string, "Preco"))
						{
							if(GetCasas(playerid) < 1)
							{
								dini_IntSet(string, "TDono", 1);
								dini_Set(string, "Dono", PlayerName(playerid));
								GivePlayerGrana(playerid, -dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1272, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 32, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Morador: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", c, PlayerName(playerid), dini_Get(string, "Morador"), dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
								OnPlayerCommandText(playerid, "/nascercasa");
								return 1;
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Você só pode ter uma casa!");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem dinheiro!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta casa não está a venda!");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/precocasa", true) == 0)
	{
		new preco, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/precocasa [preço]");
			return 1;
		}
		preco = strval(tmp);
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(pAdmin[playerid] >= 5)
					{
						dini_IntSet(string, "Preco", preco);
						format(STRX, sizeof(STRX), "Casa ID: %d\nDono: %s\nMorador: %s\nValor: $%d", c, dini_Get(string, "Dono"), dini_Get(string, "Morador"), preco);
						UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/precocarro", true) == 0)
	{
		new preco, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/precocarro [preço]");
			return 1;
		}
		preco = strval(tmp);
		for(new c = 0; c < MAX_CONCES; c++)
		{
			format(string, sizeof(string), PASTA_CONCE, c);
			if(dini_Exists(string))
			{
				if(GetPlayerVehicleID(playerid) == dini_Int(string, "Id"))
				{
					if(pAdmin[playerid] >= 5)
					{
						dini_IntSet(string, "Preco", preco);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/convidarcasa", true) == 0)
	{
		new pid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/convidarcasa [id]");
			return 1;
		}
		pid = strval(tmp);
		if(IsPlayerConnected(pid))
		{
			new pname[MAX_PLAYER_NAME];
			for(new c = 0; c < MAX_CASAS; c++)
			{
				format(string, sizeof(string), PASTA_CASAS, c);
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Exists(string))
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
						{
							if(dini_Int(string, "TMorador") == 1)
							{
								SendClientMessage(playerid, Vermelho, "Já tem um morador em sua casa.");
								return 1;
							}
							morar[pid] = 1;
							moradia[pid] = c;
							convitede[pid] = playerid;
							MoradiaTime[pid] = SetTimerEx("Moradia", 30000, false, "d", pid);
							format(STRX, sizeof(STRX), "%s (ID: %d) está convidando você para morar na casa dele(a).", pname, playerid);
							SendClientMessage(pid, Amarelo, STRX);
							SendClientMessage(pid, Amarelo, "Para aceitar o convite, use: /aceitarmoradia   ||   Para recusar, use: /recusarmoradia");
							SendClientMessage(playerid, Vermelho, "Convite enviado.");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
							return 1;
						}
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/expulsarcasa", true) == 0)
	{
		new tmp[256], string222[256], morador[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/expulsarcasa [nick]");
			return 1;
		}
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					GetPlayerName(playerid, pname, sizeof(pname));
					if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
					{
						if(strcmp(dini_Get(string, "Morador"), tmp, true) == 0 && dini_Int(string, "TMorador") == 1)
						{
							morador = dini_Get(string, "Morador");
							dini_IntSet(string, "TMorador", 0);
							dini_Set(string, "Morador", "Ninguem");
							format(file, sizeof(file), PASTA_CONTAS, morador);
							if(dini_Exists(file))
							{
								dini_FloatSet(file, "CasaX", Float:1410.5046);
								dini_FloatSet(file, "CasaY", Float:-1789.7197);
								dini_FloatSet(file, "CasaZ", Float:13.8285);
								format(string222, sizeof(string222), "Morador Spawned: %s", morador);
								SendClientMessage(playerid, BLUEWHITE, string222);
							}
							format(STRX, sizeof(STRX), "Casa ID: %d\nDono: %s\nMorador: Ninguem\nValor: $%d", c, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
							UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
							SendClientMessage(playerid, Verde, "Expulso!");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esse jogador não mora aqui!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Sua casa não tem morador.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

    if(strcmp(cmd, "/deletarcasa", true) == 0)
	{
		new casaid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/deletarcasa [casaid]");
			return 1;
		}
		casaid = strval(tmp);
		format(string, sizeof(string), PASTA_CASAS, casaid);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] == 5)
			{
				DestroyDynamicPickup(dini_Int(string, "Id"));
				DestroyDynamicMapIcon(dini_Int(string, "IconId"));
				DestroyDynamic3DTextLabel(ctextoid[casaid]);
				ctextoid[casaid] = Text3D:INVALID_3DTEXT_ID;

				dini_IntSet(string, "TDono", 3);
				dini_Set(string, "Dono", "Ninguem");
				dini_IntSet(string, "Id", 999);
				dini_IntSet(string, "IconId", 999);
				SendClientMessage(playerid, roxo, "Casa deletada com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/deletarprop", true) == 0)
	{
		new propid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/deletarprop [propid]");
			return 1;
		}
		propid = strval(tmp);
		format(string, sizeof(string), PASTA_PROPS, propid);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] == 5)
			{
				DestroyDynamicPickup(dini_Int(string, "Id"));
				DestroyDynamicMapIcon(dini_Int(string, "IconId"));
				DestroyDynamic3DTextLabel(ptextoid[propid]);
				ptextoid[propid] = Text3D:INVALID_3DTEXT_ID;

				dini_IntSet(string, "TDono", 3);
				dini_Set(string, "Dono", "Ninguem");
				dini_IntSet(string, "Id", 999);
				dini_IntSet(string, "IconId", 999);
				SendClientMessage(playerid, roxo, "Propriedade deletada com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/liberarcarro", true) == 0)
	{
		new conceid, carroid, tmp[256];
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/liberarcarro [carro]");
			return 1;
		}
		conceid = strval(tmp);
		format(string, sizeof(string), PASTA_CONCE, conceid);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 5)
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(!(dini_Int(string, "TDono") == 3))
				{
					DestroyVehicle(dini_Int(string, "Id"));
				}
				dini_IntSet(string, "TDono", 0);
				dini_Set(string, "Dono", "Ninguem");
				dini_IntSet(string, "CarVIP", 0);
				carroid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
				dini_IntSet(string, "Id", carroid);
				format(string, sizeof(string), "O(A) ADM %s liberou o veículo: %d", pname, conceid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/liberarcasa", true) == 0)
	{
		new tmp[256];
		new casaid, pickupid, iconid;
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/liberarcasa [casa]");
			return 1;
		}
		casaid = strval(tmp);
		format(string, sizeof(string), PASTA_CASAS, casaid);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 5)
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(!(dini_Int(string, "TDono") == 3))
				{
					DestroyDynamicPickup(dini_Int(string, "Id"));
					DestroyDynamicMapIcon(dini_Int(string, "IconId"));
					DestroyDynamic3DTextLabel(ctextoid[casaid]);
					ctextoid[casaid] = Text3D:INVALID_3DTEXT_ID;
				}
				format(file, sizeof(file), PASTA_CONTAS, dini_Get(string, "Dono"));
				if(dini_Exists(file))
				{
					dini_FloatSet(file, "CasaX", Float:1410.5046);
					dini_FloatSet(file, "CasaY", Float:-1789.7197);
					dini_FloatSet(file, "CasaZ", Float:13.8285);
				}
				dini_IntSet(string, "TDono", 0);
				dini_Set(string, "Dono", "Ninguem");
				pickupid = CreateDynamicPickup(1273, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
				dini_IntSet(string, "Id", pickupid);
				iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 31, 0, -1, -1, -1, 100.0);
				dini_IntSet(string, "IconId", iconid);
				format(STRX, sizeof(STRX), "Casa ID: %d\nDono: %s\nMorador: %s\nValor: $%d", casaid, dini_Get(string, "Dono"), dini_Get(string, "Morador"), dini_Int(string, "Preco"));
				ctextoid[casaid] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				format(string, sizeof(string), "O(A) ADM %s liberou a casa: %d", pname, casaid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/liberarprop", true) == 0)
	{
		new iconid;
		new propid, tmp[256];
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/liberarprop [prop]");
			return 1;
		}
		propid = strval(tmp);
		format(string, sizeof(string), PASTA_PROPS, propid);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 5)
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(!(dini_Int(string, "TDono") == 3))
				{
					DestroyDynamicMapIcon(dini_Int(string, "IconId"));
					DestroyDynamic3DTextLabel(ptextoid[propid]);
					ptextoid[propid] = Text3D:INVALID_3DTEXT_ID;
				}
				dini_IntSet(string, "TDono", 0);
				dini_Set(string, "Dono", "Ninguem");
				iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 11, 0, -1, -1, -1, 100.0);
				dini_IntSet(string, "IconId", iconid);
				format(STRX, sizeof(STRX), "%s\n\nProp ID: %d\nDono: %s\nValor: $%d", dini_Get(string, "Nome"), propid, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
				ptextoid[propid] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				format(string, sizeof(string), "O(A) ADM %s liberou a propriedade: %d", pname, propid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/interiorcasa", true) == 0)
	{
		new intid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/interiorcasa [interior]");
			return 1;
		}
		intid = strval(tmp);
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(pAdmin[playerid] >= 5)
					{
						dini_IntSet(string, "Int", intid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ircasa", true) == 0)
	{
		new id, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/ircasa [id]");
			return 1;
		}
		id = strval(tmp);
		format(string, sizeof(string), PASTA_CASAS, id);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 4)
			{
				SetPlayerInterior(playerid, dini_Int(string, "IntID"));
				SetPlayerPos(playerid, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"));

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/irprop", true) == 0)
	{
		new id, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/irprop [id]");
			return 1;
		}
		id = strval(tmp);
		format(string, sizeof(string), PASTA_PROPS, id);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 5)
			{
				SetPlayerInterior(playerid, dini_Int(string, "IntID"));
				SetPlayerPos(playerid, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"));

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vendercasa", true) == 0)
	{
		new pickupid, iconid;
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0 || pAdmin[playerid] == 5 || PlayerInfo[playerid][SCON] == true)
						{
							format(file, sizeof(file), PASTA_CONTAS, pname);
							if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
							{
								dini_FloatSet(file, "CasaX", Float:1410.5046);
								dini_FloatSet(file, "CasaY", Float:-1789.7197);
								dini_FloatSet(file, "CasaZ", Float:13.8285);
							}
							dini_IntSet(file, "Casa", 0);
							dini_IntSet(string, "TDono", 0);
							dini_Set(string, "Dono", "Ninguem");
							GivePlayerGrana(playerid, dini_Int(string, "Preco"));
							DestroyDynamicPickup(dini_Int(string, "Id"));
							pickupid = CreateDynamicPickup(1273, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
							dini_IntSet(string, "Id", pickupid);
							DestroyDynamicMapIcon(dini_Int(string, "IconId"));
							iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 31, 0, -1, -1, -1, 100.0);
							dini_IntSet(string, "IconId", iconid);
							format(STRX, sizeof(STRX), "Casa ID: %d\nDono: Ninguem\nMorador: %s\nValor: $%d", c, dini_Get(string, "Morador"), dini_Int(string, "Preco"));
							UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esta casa não é sua.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta casa já está a venda!");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/desbugarcarro", true) == 0)
	{
		new id, tmp[256], carroid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/desbugarcarro [carro]");
			return 1;
		}
		id = strval(tmp);
		format(string, sizeof(string), PASTA_CONCE, id);
		if(dini_Exists(string))
		{
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(dini_Int(string, "Id"), X, Y, Z);
			if(pAdmin[playerid] >= 5)
			{
				DestroyVehicle(dini_Int(string, "Id"));
				carroid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
				dini_IntSet(string, "Id", carroid);
				if(strcmp(dini_Get(string, "Dono"), "Ninguem", true) == 0)
				{
					if(!(dini_Int(string, "TDono") == 3))
					{
						dini_IntSet(string, "TDono", 0);
					}
				}
				SetVehiclePos(carroid, X, Y, Z);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ircarro", true) == 0)
	{
		new id, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/ircarro [id]");
			return 1;
		}
		id = strval(tmp);
		format(string, sizeof(string), PASTA_CONCE, id);
		if(dini_Exists(string))
		{
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(dini_Int(string, "Id"), X, Y, Z);
			if(pAdmin[playerid] >= 4)
			{
				if(IsVehicleOccupied(dini_Int(string, "Id")))
				{
					SetPlayerPos(playerid, X, Y, Z+4);
				}
				else
				{
					PutPlayerInVehicle(playerid, dini_Int(string, "Id"), 0);
				}
				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/nascercasa", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
						{
							new Float:X, Float:Y, Float:Z;
							format(file, sizeof(file), PASTA_CONTAS, pname);
							GetPlayerPos(playerid, X, Y, Z);
							dini_FloatSet(file, "CasaX", Float:X);
							dini_FloatSet(file, "CasaY", Float:Y);
							dini_FloatSet(file, "CasaZ", Float:Z);
							dini_IntSet(file, "Casa", 1);
							SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 354.1657, 0, 0, 0, 0, 0, 0);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esta casa não é sua.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta casa não é sua.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/salvarprop", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_PROPS; c++)
		{
			format(string, sizeof(string), PASTA_PROPS, c);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
				{
					if(dini_Int(string, "TDono") == 1)
					{
						GetPlayerName(playerid, pname, sizeof(pname));
						if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
						{
							new Float:X, Float:Y, Float:Z;
							format(file, sizeof(file), PASTA_CONTAS, pname);
							GetPlayerPos(playerid, X, Y, Z);
							dini_FloatSet(file, "PropX", Float:X);
							dini_FloatSet(file, "PropY", Float:Y);
							dini_FloatSet(file, "PropZ", Float:Z);
							dini_IntSet(file, "Prop", 1);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esta propriedade não é sua.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Esta propriedade não é sua.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/aceitarmoradia", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Int(string, "TMorador") == 1)
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(strcmp(dini_Get(string, "Morador"), pname, true) == 0)
				{
					dini_IntSet(string, "TMorador", 0);
					dini_Set(string, "Morador", "Ninguem");
				}
			}
		}
		format(string, sizeof(string), PASTA_CASAS, moradia[playerid]);
		if(dini_Exists(string))
		{
			if(morar[playerid] == 1)
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				format(file, sizeof(file), PASTA_CONTAS, pname);

				morar[playerid] = 0;
				moradia[playerid] = 0;
				KillTimer(MoradiaTime[playerid]);

				dini_IntSet(string, "TMorador", 1);
				dini_Set(string, "Morador", pname);
				dini_FloatSet(file, "CasaX" , dini_Float(string, "PosX"));
				dini_FloatSet(file, "CasaY" , dini_Float(string, "PosY"));
				dini_FloatSet(file, "CasaZ" , dini_Float(string, "PosZ"));

				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 354.1657, 0, 0, 0, 0, 0, 0);
				format(STRX, sizeof(STRX), "Casa ID: %d\nDono: %s\nMorador: %s\nValor: $%d", moradia[playerid], dini_Get(string, "Dono"), pname, dini_Int(string, "Preco"));
				UpdateDynamic3DTextLabelText(ctextoid[moradia[playerid]], -1, STRX);
				SendClientMessage(playerid, Amarelo, "Agora você está morando em uma casa!");
				SendClientMessage(convitede[playerid], Amarelo, "O(A) jogador(a) aceitou!");
				convitede[playerid] = INVALID_PLAYER_ID;
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não foi convidado!");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/recusarmoradia", true) == 0)
	{
		if(morar[playerid] == 1)
		{
			morar[playerid] = 0;
			moradia[playerid] = 0;
			SendClientMessage(playerid, Amarelo, "Você recusou.");
			SendClientMessage(convitede[playerid], Amarelo, "O(A) jogador(a) recusou!");
			convitede[playerid] = INVALID_PLAYER_ID;
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não foi convidado!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/entrarcasa", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
			{
				if(dini_Int(string, "Trancada") == 1)
				{
					GetPlayerName(playerid, pname, sizeof(pname));
					if(strcmp(dini_Get(string, "Dono"), pname, true) == 0 || PlayerInfo[playerid][SCON] == true)
					{
						new strx[256];
						format(strx, sizeof(strx), PASTA_Int, dini_Int(string, "Int"));
						if(dini_Exists(strx))
						{
							new Float:X, Float:Y, Float:Z;
							emcasa[playerid] = 1;
							GetPlayerPos(playerid, X, Y, Z);
							CasaX[playerid] = X;
							CasaY[playerid] = Y;
							CasaZ[playerid] = Z;
							SetPlayerVirtualWorld(playerid, c);
							SetPlayerInterior(playerid, dini_Int(strx, "Int"));
							SetPlayerPos(playerid, dini_Float(strx, "EX"), dini_Float(strx, "EY"), dini_Float(strx, "EZ"));
							SendClientMessage(playerid, Vermelho, "Você entrou na casa, para sair aperte ENTER.");
							return 1;
						}
					}
				}
				else
				{
					new strx[256];
					format(strx, sizeof(strx), PASTA_Int, dini_Int(string, "Int"));
					if(dini_Exists(strx))
					{
						emcasa[playerid] = 1;
						new Float:X, Float:Y, Float:Z;
						GetPlayerPos(playerid, X, Y, Z);
						CasaX[playerid] = X;
						CasaY[playerid] = Y;
						CasaZ[playerid] = Z;
						SetPlayerVirtualWorld(playerid, c);
						SetPlayerInterior(playerid, dini_Int(strx, "Int"));
						SetPlayerPos(playerid, dini_Float(strx, "EX"), dini_Float(strx, "EY"), dini_Float(strx, "EZ"));
						SendClientMessage(playerid, Vermelho, "Você entrou na casa, para sair aperte ENTER.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/verinterior", true) == 0)
	{
		new preco, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/verinterior [interior]");
			return 1;
		}
		preco = strval(tmp);
		format(string, sizeof(string), PASTA_Int, preco);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] == 5)
			{
				if(GetPlayerInterior(playerid) == 0)
				{
					emcasa[playerid] = 1;
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					CasaX[playerid] = X;
					CasaY[playerid] = Y;
					CasaZ[playerid] = Z;
				}
				SetPlayerInterior(playerid, dini_Int(string, "Int"));
				SetPlayerPos(playerid, dini_Float(string, "EX"), dini_Float(string, "EY"), dini_Float(string, "EZ"));
				SendClientMessage(playerid, Amarelo, "Para voltar aperte ENTER.");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	// Casamento
	if(strcmp(cmd, "/pedircasamento", true) == 0)
	{
		new pid, tmp[256];
		new Float:x, Float:y, Float:z;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/pedircasamento [id]");
			return 1;
		}
		pid = strval(tmp);
		if(pid == playerid)
		{
			SendClientMessage(playerid, Vermelho, "Você não pode casar com si mesmo.");
			return 1 ;
		}
		if(IsPlayerConnected(pid))
		{
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
			if(dini_Int(file, "Casado") == 0)
			{
				GetPlayerPos(pid, x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
				{
					casar[playerid] = 1;
					pedidode[pid] = playerid;

					format(string, sizeof(string), "%s está te pedindo em casamento.\nEscolha abaixo a resposta para o pedido:", PlayerName(playerid));
					ShowPlayerDialog(pid, pedidocasamento, DIALOG_STYLE_MSGBOX, "Pedido de Casamento", string, "Aceitar", "Recusar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para pedir.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você já está casado(a), divorcie antes.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/divorcio", true) == 0)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(dini_Int(file, "Casado") == 1)
		{
			format(string, sizeof(string), "Você está casado(a) com: %s.\nQuer mesmo prosseguir com esta separação?", dini_Get(file, "CasouCom"));
			ShowPlayerDialog(playerid, divorcio, DIALOG_STYLE_MSGBOX, "Divórcio", string, "Sim", "Não");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está casado(a).");
		}
		return 1;
	}

	if(strcmp(cmd, "/criarportao", true) == 0)
	{
		new Float:pX, Float:pY, Float:pZ, I,
			tmp[256], modelo[256];

		if(PlayerInfo[playerid][SCON] == true)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/criarportao [modelo]");
				SendClientMessage(playerid, Verde, "Modelos permitidos: 969, 971, 980");
				return 1;
			}
			set(modelo, tmp);
			GetPlayerPos(playerid, pX, pY, pZ);
			I = GetPlayerInterior(playerid);
			PlayerCreatePortao(playerid, strval(modelo), pX, pY, pZ, I);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/modeloportao", true) == 0)
	{
		new modelo, portaoid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/modeloportao [modelo]");
			SendClientMessage(playerid, Verde, "Modelos permitidos: 969, 971, 980");
			return 1;
		}
		modelo = strval(tmp);
		if(!(modelo == 969 || modelo == 971 || modelo == 980))
		{
			SendClientMessage(playerid, Vermelho, "Use um modelo válido! | Modelos: 969, 971, 980");
			return 1;
		}
		for(new portao = 0; portao < MAX_PORTOES; portao++)
		{
			format(string, sizeof(string), PASTA_PORTOES, portao);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, dini_Float(string, "fCordX"), dini_Float(string, "fCordY"), dini_Float(string, "fCordZ")))
				{
					if(PlayerInfo[playerid][SCON] == true)
					{
						if(dini_Int(string, "TDono") == 3)
						{
							SendClientMessage(playerid, Vermelho, "Este portão foi deletado!");
						}
						else
						{
							DestroyDynamicObject(dini_Int(string, "Id"));
							dini_IntSet(string, "Modelo", modelo);
							portaoid = CreateDynamicObject(modelo, dini_Float(string, "fCordX"), dini_Float(string, "fCordY"), dini_Float(string, "fCordZ"), dini_Float(string, "fCordRX"), dini_Float(string, "fCordRY"), dini_Float(string, "fCordRZ"), -1, -1, -1, 200.0);
							dini_IntSet(string, "Id", portaoid);
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/mudarportao", true) == 0)
	{
		new id, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/mudarportao [id]");
			return 1;
		}
		id = strval(tmp);
		if(PlayerInfo[playerid][SCON] == true)
		{
			format(string, sizeof(string), PASTA_PORTOES, id);
			if(dini_Exists(string))
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, dini_Float(string, "fCordX"), dini_Float(string, "fCordY"), dini_Float(string, "fCordZ")))
				{
					SetPVarInt(playerid, "pidToEdit", id);
					SetPVarInt(playerid, "objToEdit", dini_Int(string, "Id"));
					SetPVarInt(playerid, "pidSalvo", 1);
					ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você está muito longe do portão!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/deletarportao", true) == 0)
	{
		new portaoid, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/deletarportao [portao]");
			return 1;
		}
		portaoid = strval(tmp);
		format(string, sizeof(string), PASTA_PORTOES, portaoid);
		if(dini_Exists(string))
		{
			if(PlayerInfo[playerid][SCON] == true)
			{
				if(dini_Int(string, "TDono") == 3)
				{
					SendClientMessage(playerid, Vermelho, "Este portão já foi deletado!");
				}
				else
				{
					DestroyDynamic3DTextLabel(potextoid[portaoid]);
					potextoid[portaoid] = Text3D:INVALID_3DTEXT_ID;
					DestroyDynamicObject(dini_Int(string, "Id"));
					dini_IntSet(string, "TDono", 3);
					dini_Set(string, "Dono", "Ninguem");
					dini_Set(string, "Convidado1", "Ninguem");
					dini_Set(string, "Convidado2", "Ninguem");
					dini_Set(string, "Convidado3", "Ninguem");
					dini_IntSet(string, "Id", INVALID_OBJECT_ID);
					SendClientMessage(playerid, roxo, "Portão deletado com sucesso!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/portoesdeletados", true) == 0)
	{
		new count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "=== Portões Deletados ===");
		for(new portao = 0; portao < MAX_PORTOES; portao++)
		{
			format(string, sizeof(string), PASTA_PORTOES, portao);
			if(dini_Int(string, "TDono") == 3)
			{
				format(msg, sizeof(msg), "» Portão ID: %d - Deletado", portao);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Nenhum portão foi deletado!");
		}
		return 1;
	}

	if(strcmp(cmd, "/infocarro", true) == 0)
	{
		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(file, sizeof(file), PASTA_CONCE, carro);
			if(dini_Exists(file))
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, dini_Float(file, "CordX"), dini_Float(file, "CordY"), dini_Float(file, "CordZ")))
				{
					format(string, sizeof(string), "Veículo: %s | Conce ID: %d", GetVehicleName(dini_Int(file, "Id")), carro);
					SendClientMessage(playerid, Blue, string);
					format(string, sizeof(string), "Dono: %s | Valor: %d", dini_Get(file, "Dono"), dini_Int(file, "Preco"));
					SendClientMessage(playerid, Blue, string);
					return 1;
				}
			}
		}
		SendClientMessage(playerid, Vermelho, "Não tem nenhum veículo válido por perto!");
		return 1;
	}

	if(strcmp(cmd, "/infoportao", true) == 0)
	{
		for(new portao = 0; portao < MAX_PORTOES; portao++)
		{
			format(file, sizeof(file), PASTA_PORTOES, portao);
			if(dini_Exists(file))
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, dini_Float(file, "fCordX"), dini_Float(file, "fCordY"), dini_Float(file, "fCordZ")))
				{
					format(string, sizeof(string), "Portão ID: %d | Dono: %s", portao, dini_Get(file, "Dono"));
					SendClientMessage(playerid, Blue, string);
					format(string, sizeof(string), "Cópias da chave com: %s, %s, %s", dini_Get(file, "Convidado1"), dini_Get(file, "Convidado2"), dini_Get(file, "Convidado3"));
					SendClientMessage(playerid, Blue, string);
					return 1;
				}
			}
		}
		SendClientMessage(playerid, Vermelho, "Não tem nenhum portão válido por perto!");
		return 1;
	}

	if(strcmp(cmd, "/irportao", true) == 0)
	{
		new id, tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/irportao [id]");
			return 1;
		}
		id = strval(tmp);
		format(string, sizeof(string), PASTA_PORTOES, id);
		if(dini_Exists(string))
		{
			if(pAdmin[playerid] >= 4)
			{
				SetPlayerInterior(playerid, dini_Int(string, "IntID"));
				SetPlayerPos(playerid, dini_Float(string, "fCordX")+2, dini_Float(string, "fCordY")+2, dini_Float(string, "fCordZ"));

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darchave", true) == 0)
	{
		new plid, id, tmp[256];
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/darchave [id] [portão-id]");
			return 1;
		}
		plid = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/darchave [id] [portão-id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(dini_Exists(file))
		{
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			if(pAdmin[playerid] >= 2)
			{
				if(dini_Int(file, "TDono") == 0)
				{
					GetPlayerName(plid, aname, sizeof(aname));
					dini_Set(file, "Dono", aname);
					dini_IntSet(file, "TDono", 1);
					format(string, sizeof(string), "O(A) ADM %s te deu a chave do portão: %d", pname, id);
					SendClientMessage(plid, Blue, string);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Este portão já tem dono!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/copiachave", true) == 0)
	{
		new plid, id, tmp[256];
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/copiachave [id] [portão-id]");
			return 1;
		}
		plid = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/copiachave [id] [portão-id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(dini_Exists(file))
		{
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			if(strcmp(dini_Get(file, "Dono"), pname, true) == 0 || pAdmin[playerid] >= 2)
			{
				GetPlayerName(plid, aname, sizeof(aname));
				if(strcmp(dini_Get(file, "Convidado1"), "Ninguem", true) == 0)
				{
					dini_Set(file, "Convidado1", aname);
					format(string, sizeof(string), "%s te deu uma cópia da chave do portão: %d", pname, id);
					SendClientMessage(plid, Blue, string);
					format(string, sizeof(string), "Cópia gerada com sucesso, agora %s pode abrir seu portão!", aname);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				if(strcmp(dini_Get(file, "Convidado2"), "Ninguem", true) == 0)
				{
					dini_Set(file, "Convidado2", aname);
					format(string, sizeof(string), "%s te deu uma cópia da chave do portão: %d", pname, id);
					SendClientMessage(plid, Blue, string);
					format(string, sizeof(string), "Cópia gerada com sucesso, agora %s pode abrir seu portão!", aname);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				if(strcmp(dini_Get(file, "Convidado3"), "Ninguem", true) == 0)
				{
					dini_Set(file, "Convidado3", aname);
					format(string, sizeof(string), "%s te deu uma cópia da chave do portão: %d", pname, id);
					SendClientMessage(plid, Blue, string);
					format(string, sizeof(string), "Cópia gerada com sucesso, agora %s pode abrir seu portão!", aname);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				SendClientMessage(playerid, Vermelho, "O limite de chaves foi ecedido!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não é dono deste portão.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/tomarchave", true) == 0)
	{
		new nick[256], id, tmp[256];
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/tomarchave [nick] [portão-id]");
			return 1;
		}
		nick = tmp;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/tomarchave [nick] [portão-id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(dini_Exists(file))
		{
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			if(strcmp(dini_Get(file, "Dono"), pname, true) == 0 || pAdmin[playerid] >= 2)
			{
				if(strcmp(dini_Get(file, "Convidado1"), nick, true) == 0)
				{
					dini_Set(file, "Convidado1", "Ninguem");
					format(string, sizeof(string), "Você tomou a chave de %s agora ele(a) não pode abrir seu portão!", nick);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				if(strcmp(dini_Get(file, "Convidado2"), nick, true) == 0)
				{
					dini_Set(file, "Convidado2", "Ninguem");
					format(string, sizeof(string), "Você tomou a chave de %s agora ele(a) não pode abrir seu portão!", nick);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				if(strcmp(dini_Get(file, "Convidado3"), nick, true) == 0)
				{
					dini_Set(file, "Convidado3", "Ninguem");
					format(string, sizeof(string), "Você tomou a chave de %s agora ele(a) não pode abrir seu portão!", nick);
					SendClientMessage(playerid, Verde, string);
					return 1;
				}
				SendClientMessage(playerid, Vermelho, "Verifique se digitou o nick corretamente!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não é dono deste portão.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/liberarportao", true) == 0)
	{
		new id, tmp[256], portaoid;
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/liberarportao [id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(dini_Exists(file))
		{
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			if(pAdmin[playerid] >= 2)
			{
				if(!(dini_Int(file, "TDono") == 3))
				{
					DestroyDynamic3DTextLabel(potextoid[id]);
					potextoid[id] = Text3D:INVALID_3DTEXT_ID;
					DestroyDynamicObject(dini_Int(file, "Id"));
				}
				portaoid = CreateDynamicObject(dini_Int(file, "Modelo"), dini_Float(file, "fCordX"), dini_Float(file, "fCordY"), dini_Float(file, "fCordZ"), dini_Float(file, "fCordRX"), dini_Float(file, "fCordRY"), dini_Float(file, "fCordRZ"), -1, -1, -1, 200.0);
				dini_IntSet(file, "Id", portaoid);
				format(STRX, sizeof(STRX), "/ap %d para abrir\n/fp %d para fechar", id, id);
				potextoid[id] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(file, "fCordX"), dini_Float(file, "fCordY"), dini_Float(file, "fCordZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				dini_Set(file, "Dono", "Ninguem");
				dini_Set(file, "Convidado1", "Ninguem");
				dini_Set(file, "Convidado2", "Ninguem");
				dini_Set(file, "Convidado3", "Ninguem");
				dini_IntSet(file, "TDono", 0);
				format(string, sizeof(string), "O(A) ADM %s liberou o portão: %d", pname, id);
				SendClientMessageToAll(Blue, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/ap", true) == 0)
	{
		new id, tmp[256];
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/ap [id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(!IsPlayerInRangeOfPoint(playerid, 50.0, dini_Float(file, "fCordX"), dini_Float(file, "fCordY"), dini_Float(file, "fCordZ")))
		{
			SendClientMessage(playerid, Vermelho, "Você está muito longe do portão!");
			return 1;
		}
		if(dini_Exists(file))
		{
			if(dini_Int(file, "TDono") == 3)
			{
				SendClientMessage(playerid, Vermelho, "Este portão foi deletado!");
			}
			else
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(strcmp(dini_Get(file, "Dono"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado1"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado2"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado3"), pname, true) == 0 || pAdmin[playerid] > 2)
				{
					MoveDynamicObject(dini_Int(file, "Id"), dini_Float(file, "aCordX"), dini_Float(file, "aCordY"), dini_Float(file, "aCordZ"), 4.0);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem a chave!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/fp", true) == 0)
	{
		new id, tmp[256];
		new pname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/fp [id]");
			return 1;
		}
		id = strval(tmp);
		format(file, sizeof(file), PASTA_PORTOES, id);
		if(!IsPlayerInRangeOfPoint(playerid, 50.0, dini_Float(file, "aCordX"), dini_Float(file, "aCordY"), dini_Float(file, "aCordZ")))
		{
			SendClientMessage(playerid, Vermelho, "Você está muito longe do portão!");
			return 1;
		}
		if(dini_Exists(file))
		{
			if(dini_Int(file, "TDono") == 3)
			{
				SendClientMessage(playerid, Vermelho, "Este portão foi deletado!");
			}
			else
			{
				GetPlayerName(playerid, pname, sizeof(pname));
				if(strcmp(dini_Get(file, "Dono"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado1"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado2"), pname, true) == 0 || strcmp(dini_Get(file, "Convidado3"), pname, true) == 0 || pAdmin[playerid] > 2)
				{
					MoveDynamicObject(dini_Int(file, "Id"), dini_Float(file, "fCordX"), dini_Float(file, "fCordY"), dini_Float(file, "fCordZ"), 4.0);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem a chave!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Portão inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/pm", true) == 0)
	{
		new tmp[256];
		tmp = strtok(cmdtext, idx);
		new Message[128], gMessage[128], manolow[128];
		new pName[MAX_PLAYER_NAME+1];
		new iName[MAX_PLAYER_NAME+1];
		if(!strlen(tmp) || strlen(tmp) > 5)
		{
			SendClientMessage(playerid, tcadm, "Use: /pm [id] [mensagem]");
			return 1;
		}
		new id = strval(tmp);
		manolow = strrest(cmdtext, idx);
		if(!strlen(manolow))
		{
			SendClientMessage(playerid, tcadm, "Use: /pm [id] [mensagem]");
			return 1;
		}

		for(new i = 0; i < strlen(manolow); i++)
		{
			gMessage[i] = manolow[i];
		}
		gMessage[strlen(manolow)] = EOS;

		if(!(pAdmin[playerid] >= 1))
		{
			for(new p = 0; p < sizeof Palavroes; p++)
			{
				new fp = strfind(gMessage, Palavroes[p], true);
				while(fp != -1)
				{
					for(new i = 0; i < strlen(Palavroes[p]); i++)
					{
						gMessage[fp + i] = '_';
					}
					fp = strfind(gMessage, Palavroes[p], true);
				}
			}
		}

		if(!IsPlayerConnected(id))
		{
			SendClientMessage(playerid, tcadm, "Valor inválido, tente novamente!");
			return 1;
		}

		if(playerid != id)
		{
			if(blockpm[id] == 1)
			{
				SendClientMessage(playerid, tcadm, "Este admin não está recebendo pms.");
				return 1;
			}
			GetPlayerName(id, iName, sizeof(iName));
			GetPlayerName(playerid, pName, sizeof(pName));
			format(Message, sizeof(Message), "Mensagem enviada para %s (ID: %d): %s", iName, id, gMessage);
			SendClientMessage(playerid, 0xFFD700AA, Message);
			format(Message, sizeof(Message), "Mensagem recebida de %s (ID: %d): %s", pName, playerid, gMessage);
			SendClientMessage(id, 0xDAA520AA, Message);
			format(Message, sizeof(Message), "PM: %s (%d) > %s (%d): %s", pName, playerid, iName, id, gMessage);
			ABroadCast2(Amarelo, Message, 1);
			PlayerPlaySound(id, 1085, 0.0, 0.0, 0.0);
			printf("PM de %s para %s: %s", pName, iName, gMessage);
		}
		else
		{
			SendClientMessage(playerid, tcadm, "Você não pode enviar PM para você mesmo!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/fianca", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		new grana = dini_Int(file, "SaldoBancario");
		if(dini_Int(file, "Preso") == 1)
		{
			if(grana > 5000)
			{
				if(Preso[playerid] >= 2)
				{
					preso[playerid] = 0;
					Preso[playerid] = 0;
					algemado[playerid] = 0;
					infratores[playerid] = 0;
					Procurados[playerid] = 0;
					dini_IntSet(file, "Procurado", 0);
					dini_IntSet(file, "Preso", 0);
					dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-Fianca);
					SetPlayerWantedLevel(playerid, 0);
					SetPlayerHealth(playerid, 100);
					SpawnPlayer(playerid);
					SendClientMessage(playerid, Verde, "Você pagou a fiança e foi solto. O dinheiro foi retirado do banco.");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você tem que esperar 2 minutos para poder pagar a fiança!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não possui dinheiro suficiente! ($10000)");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está preso!");
		}
		return 1;
	}

	if(strcmp(cmd, "/ccar", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new Float:X, Float:Y, Float:Z, Float:ang,
				tmp[256], carid[128], preco[128];

			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Veículo inválido!");
				return 1;
			}
			set(carid, tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Use: /ccar [id] [preço]");
				return 1;
			}
			set(preco, tmp);
			if(strval(carid) >= 400 && strval(carid) <= 611)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(strval(carid) == 425 || strval(carid) == 469 || strval(carid) == 538 || strval(carid) == 537 || strval(carid) == 520 || strval(carid) == 449 || strval(carid) == 447 || strval(carid) == 569 || strval(carid) == 570 || strval(carid) == 432)
					{
						SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
						return 1;
					}
					if(VBIsNumeric(carid) || VBIsNumeric(preco))
					{
						GetPlayerPos(playerid, X, Y, Z);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), ang);
						PlayerAddConceVehicle(playerid, strval(carid), strval(preco), X, Y, Z, ang, -1, -1);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não está em um veículo!");
				}
			}
			else
			{
				SendClientMessage(playerid, Cinza, "Valor inválido, tente novamente! | ID's = 400-611");
			}
		}
		else
		{
			SendClientMessage(playerid, Cinza, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/comprarveiculo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME],
			tmp[256], conceid[128];

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new VehicleID = GetPlayerVehicleID(playerid);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(file, sizeof(file), PASTA_CONCE, carro);
					if(dini_Exists(file))
					{
						if(GetPlayerVehicleSeat(playerid) == 0 && VehicleID == dini_Int(file, "Id"))
						{
							if(dini_Int(file, "TDono") == 0)
							{
								if(GetPlayerGrana(playerid) >= dini_Int(file, "Preco"))
								{
									if(GetCarros(playerid) < MAX_PLAYER_CONCE)
									{
										GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
										dini_IntSet(file, "TDono", 1);
										dini_Set(file, "Dono", aname);
										if(vip[playerid] == 0)
										{
											GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
											TogglePlayerControllable(playerid, 1);
											dini_IntSet(file, "CarVIP", 0);
											intest[playerid] = 0;
											SendClientMessageToAll(roxo, string);
											ClearChatbox(playerid, 1);
											SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
											SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
										}
										else
										{
											GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
											TogglePlayerControllable(playerid, 1);
											dini_IntSet(file, "CarVIP", 1);
											intest[playerid] = 0;
											format(string, sizeof(string), "%s comprou um carro equipado com alarme explosivo.", aname);
											SendClientMessageToAll(roxo, string);
											ClearChatbox(playerid, 1);
											SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
											SendClientMessage(playerid, Amarelo, "  (VIP) Seu carro foi equipado com alarme explosivo.");
											SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
											SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
										}
										return 1;
									}
									else
									{
										SendClientMessage(playerid, Amarelo, "Você só pode ter "#MAX_PLAYER_CONCE" carros!");
										SendClientMessage(playerid, Vermelho, "Para comprar outro venda um de seus!");
										return 1;
									}
								}
								else
								{
									SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Este carro não está a venda!");
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, Vermelho, "Use /comprarveiculo [conceid]");
			return 1;
		}
		set(conceid, tmp);
		format(file, sizeof(file), PASTA_CONCE, strval(conceid));
		if(dini_Exists(file))
		{
			if(dini_Int(file, "TDono") == 0)
			{
				if(GetPlayerGrana(playerid) >= dini_Int(file, "Preco"))
				{
					if(GetCarros(playerid) < MAX_PLAYER_CONCE)
					{
						GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
						dini_IntSet(file, "TDono", 1);
						dini_Set(file, "Dono", aname);
						if(vip[playerid] == 0)
						{
							GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
							TogglePlayerControllable(playerid, 1);
							dini_IntSet(file, "CarVIP", 0);
							intest[playerid] = 0;
							format(string, sizeof(string), "%s comprou um carro, deve estar feliz!", aname);
							SendClientMessageToAll(roxo, string);
							ClearChatbox(playerid, 1);
							SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
							SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
							SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
						}
						else
						{
							GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
							TogglePlayerControllable(playerid, 1);
							dini_IntSet(file, "CarVIP", 1);
							intest[playerid] = 0;
							format(string, sizeof(string), "%s comprou um carro equipado com alarme explosivo.", aname);
							SendClientMessageToAll(roxo, string);
							ClearChatbox(playerid, 1);
							SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
							SendClientMessage(playerid, Amarelo, "  (VIP) Seu carro foi equipado com alarme explosivo.");
							SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
							SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
						}
					}
					else
					{
						SendClientMessage(playerid, Amarelo, "Você só pode ter "#MAX_PLAYER_CONCE" carros!");
						SendClientMessage(playerid, Vermelho, "Para comprar outro venda um de seus!");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Este carro não está a venda!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Conce ID inválido, este veículo não existe ainda!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/testdrive", true) == 0)
	{
		if(incar[playerid] == 1)
		{
			incar[playerid] = 0;
			intest[playerid] = 1;
			TogglePlayerControllable(playerid, 1);
			testtime = SetTimerEx("TestDrive", 60000, false, "e", playerid);
			SendClientMessage(playerid, Azul, "Test-Drive iniciado com sucesso!");
			SendClientMessage(playerid, Blue, "Você tem 1 minuto de teste, aproveite!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Voçê não está em um carro avenda!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/meucarro", true) == 0)
	{
		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(string, sizeof(string), PASTA_CONCE, carro);
			if(dini_Exists(string))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				if(strcmp(dini_Get(string, "Dono"), pname, true) == 0)
				{
                    ShowPlayerDialog(playerid, 4501, DIALOG_STYLE_LIST, "Meu Carro", "{FF00FF}Entrar\n{FF0000}Salvar\n{AFAFAF}Cor 1\n{33AA33}Cor 2\n{FFFFFF}Respawnar\n\n{2C0BB3}Ferramentas\n{00FFFF}Vender\n{00BBFF}Modelo Vip\n{00FF00}Tunar", "OK", "Cancelar");
					SendClientMessage(playerid, Verde, "Você está no menu de seu(s) carro(s).");
					return 1;
				}
			}
		}
		SendClientMessage(playerid, Verde, "Você não tem nenhum carro proprio.");
		return 1;
	}

	if(strcmp(cmd, "/modelocarro", true) == 0)
	{
		new preco, tmp[256], vid,
			Float:carroX, Float:carroY, Float:carroZ,
			Float:carroA;

		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/modelocarro [modelo]");
			return 1;
		}
		preco = strval(tmp);
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um veículo!");
			return 1;
		}
		GetVehiclePos(GetPlayerVehicleID(playerid), carroX, carroY, carroZ);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), carroA);
		for(new c = 0; c < MAX_CONCES; c++)
		{
			format(string, sizeof(string), PASTA_CONCE, c);
			if(dini_Exists(string))
			{
				if(GetPlayerVehicleID(playerid) == dini_Int(string, "Id"))
				{
					if(pAdmin[playerid] >= 5)
					{
						dini_IntSet(string, "Modelo", preco);
						DestroyVehicle(dini_Int(string, "Id"));
						vid = AddStaticVehicle(preco, carroX, carroY, carroZ, carroA, dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
						dini_IntSet(string, "Id", vid);
						SendClientMessage(playerid, Verde, "Modelo alterado com sucesso!");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/veiculosdeletados", true) == 0)
	{
		new count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "=== Veículos Deletados ===");
		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(string, sizeof(string), PASTA_CONCE, carro);
			if(dini_Int(string, "TDono") == 3)
			{
				format(msg, sizeof(msg), "» Veículo ID: %d - Deletado", carro);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Nenhum veículo foi deletado!");
		}
		return 1;
	}

	if(strcmp(cmd, "/respawnccar", true) == 0)
	{
		new carroid;
		for(new c = 0; c < MAX_CONCES; c++)
		{
			format(string, sizeof(string), PASTA_CONCE, c);
			if(dini_Exists(string))
			{
				if(GetPlayerVehicleID(playerid) == dini_Int(string, "Id"))
				{
					if(pAdmin[playerid] >= 5)
					{
						DestroyVehicle(dini_Int(string, "Id"));
						carroid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
						dini_IntSet(string, "Id", carroid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
						return 1;
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/salvarcar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] >= 5)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new Float:carroX, Float:carroY, Float:carroZ, Float:carroA;
				new vid = GetPlayerVehicleID(playerid);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				GetVehiclePos(vid, carroX, carroY, carroZ);
				GetVehicleZAngle(vid, carroA);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == vid)
					{
						dini_FloatSet(string, "CordX", Float:carroX);
						dini_FloatSet(string, "CordY", Float:carroY);
						dini_FloatSet(string, "CordZ", Float:carroZ);
						dini_FloatSet(string, "Angulo", Float:carroA);
						DestroyVehicle(dini_Int(string, "Id"));
						vid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
						dini_IntSet(string, "Id", vid);
						if(dini_Int(string, "TRoda") == 1)
						{
							AddVehicleComponent(vid, dini_Int(string, "Roda"));
						}
						if(dini_Int(string, "TPaintjob") == 1)
						{
							ChangeVehiclePaintjob(vid, dini_Int(string, "Paintjob"));
						}
						if(dini_Int(string, "TNitro") == 1)
						{
							AddVehicleComponent(vid, dini_Int(string, "Nitro"));
						}
						if(dini_Int(string, "TSuspensao") == 1)
						{
							AddVehicleComponent(vid, dini_Int(string, "Suspensao"));
						}
						SendClientMessage(playerid, Verde, "Veículo salvo na sua posição.");
						return 1;
					}
				}
				SendClientMessage(playerid, Amarelo, "Este veículo não foi feito na Conce.");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você precisa estar no veículo.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/on", true) == 0)
	{
		if(AFK[playerid] == 1)
		{
			AFK[playerid] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			TogglePlayerControllable(playerid, 1);

			TextDrawHideForPlayer(playerid, AfkText);
			TextDrawHideForPlayer(playerid, AfkBackText);

			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "(ANTI-AFK) %s está de volta! ( /on )", playername);
			SendClientMessageToAll(0x2BFF95AA, string);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está AFK!");
		}
		return 1;
	}

	if(AFK[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está AFK e não poderá usar nenhum comando!");

	if(strcmp("/ajudavotacao", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			SendClientMessage(playerid, 0x008000AA, "Use: /votacao - Para iniciar uma votação.");
			SendClientMessage(playerid, 0x008000AA, "Use: /encerrar - Para encerrar uma votação.");
			return 1;
		}
	}

	if(!strcmp(cmdtext, "/votacao", true, 8))
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			if(!votacao[iniciada])
			{
				if(!strlen(cmdtext[9]))
					return SendClientMessage(playerid, 0xFFFFFFAA, "Use: /votacao [pergunta]");
				SendClientMessageToAll(LARANJA, "|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|");
				format(string, sizeof string, "Pergunta: %s?", cmdtext[9]);
				SendClientMessageToAll(VERDECLARO, string);
				SendClientMessageToAll(LARANJA, "---------------------------------------------");
				SendClientMessageToAll(VERDEMEDIO, "--> Se você acha que sim digite: /sim");
				SendClientMessageToAll(VERDEMEDIO, "--> Se você acha que não digite: /nao");
				SendClientMessageToAll(LARANJA, "|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|");
				votacao[iniciada] = true;
				votacao[sim] = 0;
				votacao[nao] = 0;
				GameTextForAll("~r~Enquete ~p~Iniciada!", 6000, 3);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					votou[i] = false;
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Já existe uma votação em andamento!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/sim", true))
	{
		if(votou[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você já votou.");
		if(votacao[iniciada] && !votou[playerid])
		{
			SendClientMessage(playerid, LARANJA, "Seu voto foi computado com sucesso.");
			votacao[sim]++;
			votacao[total]++;
			votou[playerid] = true;
			return 1;
		}
		return 0;
	}

	if(!strcmp(cmdtext, "/nao", true))
	{
		if(votou[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você já votou.");
		if(votacao[iniciada] && !votou[playerid])
		{
			SendClientMessage(playerid, LARANJA, "Seu voto foi computado com sucesso.");
			votacao[nao]++;
			votacao[total]++;
			votou[playerid] = true;
			return 1;
		}
		return 0;
	}

	if(!strcmp(cmdtext, "/encerrar", true))
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			if(votacao[iniciada])
			{
				SendClientMessageToAll(LARANJA, "=========== RESULTADOS ============");
				SendClientMessageToAll(LARANJA, "» RESULTADO DA VOTAÇÃO «");
				format(string, sizeof string, "» %d jogador(es) votaram em sim.", votacao[sim]);
				SendClientMessageToAll(VERDEMEDIO, string);
				format(string, sizeof string, "» %d jogador(es) votaram em não.", votacao[nao]);
				SendClientMessageToAll(VERDEMEDIO, string);
				format(string, sizeof string, "» Esta enquete teve %d votos!",votacao[total]);
				SendClientMessageToAll(BRANCO, string);
				if(votacao[sim] == votacao[nao])
				{
					SendClientMessageToAll(VERMELHO, "==> EMPATE!");
				} else if(votacao[sim] > votacao[nao])
				{
					SendClientMessageToAll(VERMELHO, "==> A maioria votou em sim.");
				} else if(votacao[sim] < votacao[nao])
				{
					SendClientMessageToAll(VERMELHO, "==> A maioria votou em não.");
				}
				SendClientMessageToAll(LARANJA, "====================================");
				GameTextForAll("~r~Votacao ~r~encerrada!", 6000, 3);
				votacao[iniciada] = false;
				votacao[sim] = 0;
				votacao[nao] = 0;
				votacao[total] = 0;
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					votou[i] = false;
				}
			}
			else
			{
				SendClientMessage(playerid, BRANCO, "Não existe nenhuma votação em andamento...");
			}
		}
		else
		{
			SendClientMessage(playerid, BRANCO, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/reconectarnpcs", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			KickNPCs();
			LoadNPCs();
			SendClientMessage(playerid, Verde, "Os npc's foram reconectados com sucesso!");
		}
		return 1;
	}

	if(strcmp(cmd, "/punir", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /punir [id] [motivo]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Use: /punir [ID] [Motivo]");
				}
				else
				{
					aviso[plid]+=1;
					if(aviso[plid] >= 3)
					{
						format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: 3/3 Punições", pname);
						SendClientMessageToAll(Amarelo, string);
						KickLog(string);
						Kick(plid);
					}
					format(string, sizeof(string), "O(A) jogador(a) %s foi punido(a) por %s. Motivo: %s (%d/3)", pname, aname, result, aviso[plid]);
					SendClientMessageToAll(Azul, string);
				}
			}
			else
			{
				format(string, sizeof(string), " ID %d inválido!", plid);
				SendClientMessage(playerid, Vermelho, string);
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/punirh", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(dini_Int(file, "Profissao") == Caminhoneiro)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /punirh [id] [motivo]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Use: /punirh [ID] [Motivo]");
				}
				else
				{
					aviso[plid]+=1;
					if(aviso[plid] >= 3)
					{
						format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: 3/3 Punições", pname);
						SendClientMessageToAll(Amarelo, string);
						KickLog(string);
						Kick(plid);
					}
					format(string, sizeof(string), "O(A) jogador(a) %s foi punido(a) por %s. Motivo: %s (%d/3)", pname, aname, result, aviso[plid]);
					SendClientMessageToAll(Azul, string);
				}
			}
			else
			{
				format(string, sizeof(string), " ID %d inválido!", plid);
				SendClientMessage(playerid, Vermelho, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/liberarnick", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /liberarnick [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				dini_IntSet(file2, "MN", 1);
				format(string, sizeof(string), "Você liberou o(a) %s para mudar de nick!", pname, playerid);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (ID: %d) liberou você para mudar de nick!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				GameTextForPlayer(plid, "~r~/trocarnick", 8000, 3);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(!strcmp("/ping", cmd, true))
	{
		if(pAdmin[playerid] > 0)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0x00E800FF, "Use: /ping [desativar/ban/kick]");
				SendClientMessage(playerid, 0x00E800FF, "Ex.: /ping ban");
				return 1;
			}
			if(!strcmp(tmp, "desativar", true))
			{
				PingCfg = 0;
				SendClientMessage(playerid, Amarelo, "Limite de ping desativado com sucesso!");
			}
			else if(!strcmp(tmp, "ban", true))
			{
				PingCfg = 1;
				SendClientMessage(playerid, Amarelo, "Agora os players que ultrapassar o limite serão banidos!");
			}
			else if(!strcmp(tmp, "kick", true))
			{
				PingCfg = 2;
				SendClientMessage(playerid, Amarelo, "Agora os players que ultrapassar o limite serão kickados!");
			}
			else SendClientMessage(playerid, 0x00E800FF, "Função não disponível!");
		}
		return 1;
	}

	if(strcmp(cmd, "/kick", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /kick [id] [motivo]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Use: /kick [id] [motivo]");
				}
				else
				{
					GetPlayerName(plid, pname, MAX_PLAYER_NAME);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) por %s. Motivo: %s", pname, aname, result);
					SendClientMessageToAll(Amarelo, string);
					KickLog(string);
					Kick(plid);
				}
			}
			else
			{
				format(string, sizeof(string), "Valor inválido, tente novamente!", plid);
				SendClientMessage(playerid, Vermelho, string);
			}
		}
		return 1;
	}
	
   	if(strcmp(cmd, "/kickh", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(dini_Int(file, "Profissao") == Caminhoneiro)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /kickh [id] [motivo]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Use: /kickh [id] [motivo]");
				}
				else
				{
					GetPlayerName(plid, pname, MAX_PLAYER_NAME);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O Helper %s foi kickado(a) por %s. Motivo: %s", pname, aname, result);
					SendClientMessageToAll(Amarelo, string);
					KickLog(string);
					Kick(plid);
				}
			}
			else
			{
				format(string, sizeof(string), "Valor inválido, tente novamente!", plid);
				SendClientMessage(playerid, Vermelho, string);
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/banirnick", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /banirnick [Nick] [Motivo]");
				return 1;
			}
			new length = strlen(cmdtext);
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Vermelho, "Use: /banirnick [Nick] [Motivo]");
				return 1;
			}
			VBanNick(playerid, tmp, result);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/desbanirnick", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /desbanirnick [Nick]");
				return 1;
			}
			VUnBan(playerid, tmp);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/ban", true) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Use: /ban [ID] [Motivo]");
				return 1;
			}
			plid = VBReturnUser(tmp);
			new length = strlen(cmdtext);
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Cinza, "Use: /ban [ID] [Motivo]");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				ClearChatbox(plid, 3);
				VBanID(playerid, plid, result);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/banip", true) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Use: /banip [IP] [Motivo]");
				return 1;
			}
			new length = strlen(cmdtext);
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Cinza, "Use: /banip [IP] [Motivo]");
				return 1;
			}
			if(VBIsIP(tmp))
			{
				VBanIP(playerid, tmp, result);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Endereço IP inválido, tente novamente!");
				SendClientMessage(playerid, Amarelo, "/ip [id]: Para ver o endereço IP de um jogador.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/desbanir", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Use: /desbanir [Nick/IP]");
				return 1;
			}
			VUnBan(playerid, tmp);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/baninfo", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Cinza, "Use: /baninfo [Nick/IP]");
				return 1;
			}
			format(file, sizeof(file), "/Bans/%s.ini", tmp);
			VBanLoadInfo(playerid, file);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/deletaracc", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			format(file2, sizeof(file2), PASTA_CONTAS, tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /deletaracc [nick]");
				return 1;
			}
			if(dini_Exists(file2))
			{
				dini_Remove(file2);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				SendClientMessage(playerid, Verde, "Usuário deletado!");
				format(string, sizeof(string), "O(A) ADM %s excluiu a conta %s.", aname, tmp);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Este usuário não existe!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/fakeban", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /fakeban [id] [motivo]");
				return 1;
			}
			plid = strval(tmp);
			new pname[MAX_PLAYER_NAME];
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Você só pode fake banir com uma razão apropriada.");
				}
				else
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "Você fakebaniu o(a) jogador(a) %s.", pname);
					SendClientMessage(playerid, tcadm, string);
					format(string, sizeof(string), "O(A) jogador(a) %s foi banido(a) por %s. Motivo: %s", pname, aname, result);
					SendClientMessageToAll(CorBan, string);
					format(string, sizeof(string), "{FFFFFF}-| {33AA33}%s {FFFFFF}deve ter vacilado.", pname);
					SendClientMessageToAll(-1, string);
					SendClientMessage(plid, 0xDFDFDFAA, "Server closed the connection.");
				}
			}
			else
			{
				format(string, sizeof(string), "ID %d não é válido!", plid);
				SendClientMessage(playerid, Vermelho, string);
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/afk", true) == 0)
	{
		if(AFK[playerid] == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, Vermelho, "Você não pode usar este comando dentro de um carro!");
				return 1;
			}
			AFK[playerid] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 0);

			TextDrawShowForPlayer(playerid, AfkText);
			TextDrawShowForPlayer(playerid, AfkBackText);

			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s ficou ausente do jogo! ( /afk )", playername);
			SendClientMessageToAll(0xFF9595AA, string);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você já está no modo online para poder utilizar esse comando!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/ausentes", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "~~~~ Jogadores AFK ~~~~");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && AFK[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg, sizeof(msg), "%s", Jogador);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém está ausente.");
		}
		return 1;
	}

	if(strcmp("/trabalhar", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Serviços ~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "PizzaBoy = Ganho: $500 - /pizzaboy");
		SendClientMessage(playerid, Branco, "Pescador = Ganho: $130 - /pescador");
		SendClientMessage(playerid, Branco, "Lenhador = Ganho: $150 - /lenhador");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Serviços ~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp("/pizzaboy", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Pizza-boy ~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Entrega de pizzas!");
		SendClientMessage(playerid, Branco, "Area de pegar pizzas: simbolizado por o ícones de ''Hamburgers'', ''Pizzas'' ou ''Frangos'' por Los Santos.");
		SendClientMessage(playerid, Branco, "Area de entregar pizzas: simbolizado pelo ícone de ''Garfo e Faca'' na entrada de Los Santos.");
		SendClientMessage(playerid, Branco, "Valor recebido: $500 - Por cada entrega.");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Pizza-boy ~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp("/pescador", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Pescador ~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Pesque em alto mar e venda sua pesca!");
		SendClientMessage(playerid, Branco, "Area de pesca: simbolizado pelo ícone de uma ''Ancora'' em Santa Maria Beach. (Los Santos)");
		SendClientMessage(playerid, Branco, "Area de venda de pesca: simbolizado pelo ícone ''Vermelho'' na areia da Praia. (Los Santos)");
		SendClientMessage(playerid, Branco, "Valor recebido: $130 - por cada peixe pescado.");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Pescador ~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp("/lenhador", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Lenhador ~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Corte e venda de madeiras ilegais!");
		SendClientMessage(playerid, Branco, "Area de corte: simbolizado por o ícone de um ''C-'' no mapa na entrada de Los Santos.");
		SendClientMessage(playerid, Branco, "Area de venda de madeira: simbolizado por o ícone de um ''Boneco Verde'' na entrada de Los Santos.");
		SendClientMessage(playerid, Branco, "Valor recebido: $80 - Por cada madeira.");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~ Lenhador ~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}

	if(strcmp("/pagamento", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s adiantou o salário de todos!", aname);
			SendClientMessageToAll(BLUEWHITE, string);
			Up();
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/cp", true) == 0)
	{
		new tmp[256];
		new aname[MAX_PLAYER_NAME];
		strmid(tmp,cmdtext, 3, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/cp [texto]");
		}
		else
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "(Chat Profissão) %s: %s", aname, tmp);
			Chatp(GetPlayerColor(playerid), string, 1, playerid);
		}
		return 1;
	}

	if(strcmp("/virar", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				FlipCar(GetPlayerVehicleID(playerid));
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/virarp", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /virarp [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				if(IsPlayerInAnyVehicle(plid))
				{
					FlipCar(GetPlayerVehicleID(plid));
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
					format(string, sizeof(string), "O(A) ADM %s (%d) virou seu veículo!", aname, playerid);
					SendClientMessage(plid, tcadm, string);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ip", true) == 0)
	{
		new sstring[256], ip[128];
		new pname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 2)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/ip [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				GetPlayerIp(plid, ip, 128);
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(sstring, sizeof(sstring), "-| %s (ID: %d) IP: %s |-", pname, plid, ip);
				SendClientMessage(playerid, 0x0080FFAA, sstring);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/rv", true) == 0)
	{
		if(pAdmin[playerid] > 3)
		{
			for(new v; v < MAX_VEHICLES; v++)
			{
				SetVehicleToRespawn(v);
			}
			SendClientMessage(playerid, Verde, "Veículos respawnados!");
			format(string, sizeof(string), "O(A) ADM %s (%d) respawnou todos os veículos.", PlayerName(playerid), playerid);
			SendClientMessageToAll(tcadm, string);
			return 1;
		}
	}

	if(strcmp(cmd, "/rvu", true) == 0)
	{
		if(pAdmin[playerid] > 3)
		{
			for(new v = 0; v < MAX_VEHICLES; v++)
			{
				if(!IsVehicleOccupied(v)) SetVehicleToRespawn(v);
			}
			SendClientMessage(playerid, Verde, "Veículos desocupados respawnados!");
			format(string, sizeof(string), "O(A) ADM %s (%d) respawnou todos os veículos desocupados.", PlayerName(playerid), playerid);
			SendClientMessageToAll(tcadm, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/rvc", true) == 0)
	{
		new carroid;
		if(pAdmin[playerid] > 3)
		{
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(file, sizeof(file), PASTA_CONCE, carro);
				if(dini_Exists(file))
				{
					DestroyVehicle(dini_Int(file, "Id"));
					carroid = AddStaticVehicle(dini_Int(file, "Modelo"), dini_Float(file, "CordX"), dini_Float(file, "CordY"), dini_Float(file, "CordZ"), dini_Float(file, "Angulo"), dini_Int(file, "Cor1"), dini_Int(file, "Cor2"));
					dini_IntSet(file, "Id", carroid);
					if(dini_Int(file, "TRoda") == 1)
					{
						AddVehicleComponent(carroid, dini_Int(file, "Roda"));
					}
					if(dini_Int(file, "TPaintjob") == 1)
					{
						ChangeVehiclePaintjob(carroid, dini_Int(file, "Paintjob"));
					}
					if(dini_Int(file, "TNitro") == 1)
					{
						AddVehicleComponent(carroid, dini_Int(file, "Nitro"));
					}
					if(dini_Int(file, "TSuspensao") == 1)
					{
						AddVehicleComponent(carroid, dini_Int(file, "Suspensao"));
					}
					if(strcmp(dini_Get(file, "Dono"), "Ninguem", true) == 0)
					{
						if(!(dini_Int(file, "TDono") == 3))
						{
							dini_IntSet(file, "TDono", 0);
						}
					}
				}
			}
			SendClientMessage(playerid, Verde, "Veículos da Conce respawnados!");
			format(string, sizeof(string), "O(A) ADM %s (%d) respawnou os veículos da Conce.", PlayerName(playerid), playerid);
			SendClientMessageToAll(tcadm, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/objstatus", true) == 0)
	{
		format(string, sizeof(string), "Existe %d objetos ao total no servidor.", CountDynamicObjects());
		SendClientMessage(playerid, Amarelo, string);
		return 1;
	}

	if(strcmp(cmd, "/vehstatus", true) == 0)
	{
		format(string, sizeof(string), "Existe %d veículos na Conce do servidor.", proximocarro);
		SendClientMessage(playerid, Amarelo, string);
		return 1;
	}

	if(strcmp(cmd, "/rmov", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			if(EventoCriado == 1)
			{
				SendClientMessage(playerid, Vermelho, "Antes de fazer isso feche ou cancele o evento.");
				return 1;
			}

			ClearChatbox(playerid, 3);
			SendClientMessage(playerid, Azul, "Seu pedido foi processado, aguarde...");
			ClearChatbox(playerid, 3);

			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					TextDrawHideForPlayer(i, gps[i]);

					#if defined gText2User
     TextDrawHideForPlayer(i, gText2[i]);
					#endif

					#if defined gText3User
					TextDrawHideForPlayer(i, gText3);
					#endif

					#if defined gText4User
					TextDrawHideForPlayer(i, gText4[i]);
					#endif

					TextDrawHideForPlayer(i, Relogio);

					if(AFK[playerid] == 1)
					{
						TextDrawHideForPlayer(playerid, AfkText);
						TextDrawHideForPlayer(playerid, AfkBackText);
					}
					DeletePlayerTextDraws(i);

					GangZoneHideForPlayer(i, GangZonesFix[1]);
					GangZoneHideForPlayer(i, GangZonesFix[2]);
					GangZoneHideForPlayer(i, GangZonesFix[3]);
					GangZoneHideForPlayer(i, GangZonesFix[4]);
					GangZoneHideForPlayer(i, GangZonesFix[5]);
					GangZoneHideForPlayer(i, GangZonesFix[6]);
					GangZoneHideForPlayer(i, GangZonesFix[7]);
					GangZoneHideForPlayer(i, GangZonesFix[8]);
					GangZoneHideForPlayer(i, GangZonesFix[9]);
					SpawnPlayer(i);
				}
			}

			DeleteTextDraws();
			Destroy3DTextsFix();
			DestroyCheckpointsFix();
			DestroyGangZonesFix();
			DestroyMapIconsFix();
			DestroyPickupsFix();
			DestroyObjectsFix();
			DestroyVehiclesFix();
			UnloadFilesIniItens();
			UnloadAllDynamicObjects();
			UnloadAllStaticVehicles();

			SetTimerEx("RespawnSystem", 1000, false, "e", playerid);
		}
		return 1;
	}

	if(strcmp(cmd, "/deletcar", true) == 0)
	{
		if(pAdmin[playerid] > 3)
		{
			new vid = GetPlayerVehicleID(playerid);
			Loop(o, sizeof(VehiclesFix))
			{
				if(vid == VehiclesFix[o])
				{
					SendClientMessage(playerid, Vermelho, "Este carro não pode ser deletado!");
					return 1;
				}
			}
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(string, sizeof(string), PASTA_CONCE, carro);
				if(vid == dini_Int(string, "Id"))
				{
					ShowPlayerDialog(playerid, deletcarconce, DIALOG_STYLE_MSGBOX, "Deletando Veículo", "{FF0000}Este veículo é da Conce, quer mesmo deletar?", "Sim", "Não");
					return 1;
				}
			}
			DestroyVehicle(vid);
			vid = INVALID_VEHICLE_ID;
			SendClientMessage(playerid, 0x0080FFAA, "Veículo deletado com sucesso!");
			return 1;
		}
	}

	if(strcmp(cmd, "/respawncar", true) == 0)
	{
		if(pAdmin[playerid] > 0)
		{
			new id = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(id);
			SendClientMessage(playerid, 0x0080FFAA, "Veículo respawnado com sucesso!");
		}
		return 1;
	}

	if(strcmp(cmd, "/explodir", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 4)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /explodir [id]");
				return 1;
			}
			plid = strval(tmp);
			new Float:X, Float:Y, Float:Z;
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				GetPlayerPos(plid, X, Y, Z);
				CreateExplosion(X, Y, Z-3, 10, 100);
				CreateExplosion(X, Y, Z-3, 10, 100);
				SetPlayerHealth(plid, 50);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				format(string, sizeof(string), "O(A) ADM %s (%d) explodiu você!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/clima", true) == 0)
	{
		if(pAdmin[playerid] > 2)
		{
			new tmp[256], weatherid;
			tmp = strtok(cmdtext, idx);
			weatherid = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /clima [clima]");
				return 1;
			}
			if(weatherid >= 1 && weatherid <= 50)
			{
				new Names[30];
				SetWeather(weatherid);
				GetPlayerName(playerid, Names, sizeof(Names));
				format(string, sizeof(string), "O(A) ADM %s (%d) alterou o clima para ID: %d", Names, playerid, weatherid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente! | ID's = 1-50");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/recuperar", true) == 0)
	{
		if(pAdmin[playerid] > 1)
		{
			SendClientMessage(playerid, COLOR_GREEN, "Vida e coletes recuperados!");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SetPlayerArmour(i, 100);
					SetPlayerHealth(i, 100);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/godmod", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			gmod[playerid] = 1;
			SetPlayerHealth(playerid, 999999);
			SendClientMessage(playerid, COLOR_GREEN, "Você agora está em godmod.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/lc", true) == 0)
	{
		if(pAdmin[playerid] > 0)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					ClearChatbox(i, 30);
				}
			}
			GameTextForAll("~w~Chat ~p~Limpo", 1000, 1);
			SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/jetpack", true) == 0)
	{
		if(pAdmin[playerid] > 1 || vip[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GREEN, "(SERVER) Jetpack criado!");
			SetPlayerSpecialAction(playerid, 2);
		}
		return 1;
	}

	if(strcmp(cmd, "/vida", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid, vida;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vida [id] [vida]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vida [id] [vida]");
				return 1;
			}
			vida = strval(tmp);
			if(vida < 1 || vida > 100)
			{
				SendClientMessage(playerid, Vermelho, "Quantidade inválida!");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				format(string, sizeof(string), "O(A) ADM %s (%d) alterou sua vida para: %d", aname, playerid, vida);
				SendClientMessage(plid, tcadm, string);
				SetPlayerHealth(plid, vida);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/colete", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid, colete;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /colete [id] [vida]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /colete [id] [vida]");
				return 1;
			}
			colete = strval(tmp);
			if(colete < 0 || colete > 100)
			{
				SendClientMessage(playerid, Vermelho, "Quantidade inválida!");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				format(string, sizeof(string), "%s (%d) alterou seu colete para: %d", aname, playerid, colete);
				SendClientMessage(plid,tcadm, string);
				SetPlayerArmour(plid, colete);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ir", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ir [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new interiordele = GetPlayerInterior(plid);
				new Float:X, Float:Y, Float:Z;
				SetPlayerInterior(playerid, interiordele);
				GetPlayerPos(plid, X, Y, Z);
				if(IsPlayerInAnyVehicle(playerid))
				{
					new VehicleID = GetPlayerVehicleID(playerid);
					SetVehiclePos(VehicleID, X+2, Y+2, Z);
					PutPlayerInVehicle(playerid, VehicleID, 0);
				}
				else
				{
					SetPlayerPos(playerid, X+2, Y+2, Z);

					TogglePlayerControllable(playerid, false);
					SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
				}
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) foi até sua posição para ajuda-lo(a)!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/irh", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(dini_Int(file, "Profissao") == Caminhoneiro)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /irh [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new interiordele = GetPlayerInterior(plid);
				new Float:X, Float:Y, Float:Z;
				SetPlayerInterior(playerid, interiordele);
				GetPlayerPos(plid, X, Y, Z);
				if(IsPlayerInAnyVehicle(playerid))
				{
					new VehicleID = GetPlayerVehicleID(playerid);
					SetVehiclePos(VehicleID, X+2, Y+2, Z);
					PutPlayerInVehicle(playerid, VehicleID, 0);
				}
				else
				{
					SetPlayerPos(playerid, X+2, Y+2, Z);

					TogglePlayerControllable(playerid, false);
					SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);
				}
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) Helper %s (%d) foi até sua posição para ajuda-lo(a)!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/tapa", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 4)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /tapa [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new interiordele = GetPlayerInterior(plid);
				new Float:X, Float:Y, Float:Z;
				SetPlayerInterior(plid, interiordele);
				GetPlayerPos(plid, X, Y, Z);
				SetPlayerPos(plid, X, Y, Z +50);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) deu um tapa em você!", aname, playerid);
				SendClientMessage(plid,tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/cercar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /cercar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(cercado[plid] == 1)
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) já está cercado(a).");
				return 1 ;
			}
			if(IsPlayerConnected(plid))
			{
				new Float:px, Float:py, Float:pz;
				CagePlayer(plid);
				cercado[plid] = 1;
				GetPlayerPos(plid, px, py, pz);
				SetPlayerPos(plid, px, py, pz+7);

				TogglePlayerControllable(plid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", plid);

				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) cercou você!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/descercar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /descercar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(cercado[plid] == 0)
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está cercado(a).");
				return 1 ;
			}
			if(IsPlayerConnected(plid))
			{
				new Float:px, Float:py, Float:pz;
				UncagePlayer(plid);
				cercado[plid] = 0;
				GetPlayerPos(plid, px, py, pz);
				SetPlayerPos(plid, px, py, pz-4);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) descercou você!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/congelar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /congelar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				TogglePlayerControllable(plid, 0);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) parou você!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/descongelar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /descongelar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				TogglePlayerControllable(plid, 1);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) desparou você!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/aclima", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não e um admin!");
			return 1;
		}
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new texto[256], Previsao;
			Previsao = random(sizeof(WeatherName));
			if(Previsao >= 1 && Previsao <= 50)
			{
				SetWeather(Previsao);
			}
			format(texto, sizeof(texto), "O clima de hoje é: %s", WeatherName[Previsao]);
			SendClientMessageToAll(0xFFFFFFAA, texto);
		}
		return 1;
	}

	if(strcmp(cmd, "/desarmar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /desarmar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				ResetPlayerWeapons(plid);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) te desarmou!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/trazer", true) == 0)
	{
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || dini_Int(file, "Profissao") == Temac ||dini_Int(file, "Profissao") == Caminhoneiro || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /trazer [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new Float:X, Float:Y, Float:Z;
				new interiormeu = GetPlayerInterior(playerid);
				SetPlayerInterior(plid, interiormeu);
				GetPlayerPos(playerid, X, Y, Z);
				if(IsPlayerInAnyVehicle(plid))
				{
					new VehicleID = GetPlayerVehicleID(plid);
					SetVehiclePos(VehicleID, X+2, Y+2, Z);
					PutPlayerInVehicle(plid, VehicleID, 0);
				}
				else
				{
					SetPlayerPos(plid, X+2, Y+2, Z);

					TogglePlayerControllable(plid, false);
					SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", plid);
				}
				format(string, sizeof(string), "%s (ID: %d) trouxe você até sua posição!", PlayerName(playerid), playerid);
				SendClientMessage(plid, tcadm, string);
				format(string, sizeof(string), "Você trouxe %s (ID: %d) até sua posição!", PlayerName(plid), plid);
				SendClientMessage(playerid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, 0xFF0000AA, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/calar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /calar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				Mute[plid] = 1;
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) pregou um durex na boca do(a): %s (%d)!", aname, playerid, pname, plid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/descalar", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /descalar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				Mute[plid] = 0;
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) tirou o durex da boca do(a): %s (%d)!", aname, playerid, pname, plid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/resetarflood", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /resetarflood [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				FloodAlert[plid] = 0;
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) resetou seu flood!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/carona", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /carona [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode pegar uma carona com você mesmo.");
				return 1;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(IsPlayerInAnyVehicle(plid))
				{
					new VehicleID = GetPlayerVehicleID(plid);
					PutPlayerInVehicle(playerid, VehicleID, 1);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
					format(string, sizeof(string), "O(A) ADM %s (%d) entrou no seu carro!", aname, playerid);
					SendClientMessage(plid, tcadm, string);
				}
				else
				{
					GetPlayerName(plid, pname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "%s (%d) não está em um carro!", pname, plid);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas ADM's podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/injetar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /injetar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode dar uma carona para você mesmo.");
				return 1 ;
			}
			if(IsPlayerConnected(plid))
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					new VehicleID = GetPlayerVehicleID(playerid);
					PutPlayerInVehicle(plid, VehicleID, 1);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
					format(string, sizeof(string), "O(A) ADM %s (%d) te deu uma carona!", aname, playerid);
					SendClientMessage(plid, tcadm, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não está em um carro!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas ADM's podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/ejetar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ejetar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				if(IsPlayerInAnyVehicle(plid))
				{
					RemovePlayerFromVehicle(plid);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O(A) ADM %s (%d) te tirou do veículo!", aname, playerid);
					SendClientMessage(plid, tcadm, string);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				}
				else
				{
					GetPlayerName(plid, pname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "%s (%d) não está em um carro!", pname, plid);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/desbugar", true) == 0)
	{
		if(pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /desbugar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				DesbugPlayer(plid);
				format(string, sizeof(string), "O(A) ADM %s (%d) desbugou o player: %s (%d)!", PlayerName(playerid), playerid, PlayerName(plid), plid);
				SendClientMessageToAll(tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/abencoar", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, pname);
		if(dini_Int(file, "Profissao") == vice/presidente || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /abencoar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				dini_IntSet(file, "Dinheiro", 1000);
				format(string, sizeof(string), "O vice/presidente %s abençoou você.", aname);
				SendClientMessage(playerid, C_vice/presidente, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/espiar", true) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /espiar [id]");
				return 1;
			}
			specplayerid = strval(tmp);
			if(!IsPlayerConnected(specplayerid))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
				return 1;
			}
			TogglePlayerSpectating(playerid, 1);
			PlayerSpectatePlayer(playerid, specplayerid);
			SetPlayerInterior(playerid, GetPlayerInterior(specplayerid));
			gSpectateID[playerid] = specplayerid;
			gSpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
		}
		return 1;
	}

	if(strcmp(cmd, "/pararespiar", true) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			TogglePlayerSpectating(playerid, 0);
			gSpectateID[playerid] = INVALID_PLAYER_ID;
			gSpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
		}
		return 1;
	}

	if(strcmp(cmd, "/explodircarp", true) == 0)
	{
		new aname[MAX_PLAYER_NAME], vid;
		if(pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /explodircarp [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				vid = GetPlayerVehicleID(plid);
				KillVehicle(vid);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) explodiu o seu veículo!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/abrirconta", true) == 0)
	{
		new aname[MAX_PLAYER_NAME], grana;
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[36]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[37]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[38]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[39]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[40]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[41]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[42]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[43])
			|| IsPlayerInDynamicCP(playerid, CheckpointsFix[52]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[53]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[54]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[55]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[56]))
		{
			if(dini_Int(file, "ContaBancaria") == 0)
			{
				grana = GetPlayerGrana(playerid);
				if(grana > 299)
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O(A) jogador(a) %s (ID: %d) abriu uma conta bancária.", aname, playerid);
					SendClientMessageToAll(roxo, string);
					dini_IntSet(file, "ContaBancaria", 1);
					GivePlayerGrana(playerid, -300);
					dini_IntSet(file, "SaldoBancario", 300);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Para abrir uma conta bancária você presisa de pelo menos $300.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você já tem uma conta bancária.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um banco.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/saldo", true) == 0)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[36]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[37]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[38]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[39]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[40]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[41]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[42]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[43])
			|| IsPlayerInDynamicCP(playerid, CheckpointsFix[52]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[53]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[54]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[55]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[56]))
		{
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				format(string, sizeof(string), "Banco: Você tem depositado em sua conta $%d.", dini_Int(file, "SaldoBancario"));
				SendClientMessage(playerid, Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho,"Você não tem uma conta bancária.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um banco.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/saldocell", true) == 0)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(dini_Int(file, "ContaBancaria") == 1)
		{
			format(string, sizeof(string), "Secretaria eletrônica: Você tem depositado no banco $%d.", dini_Int(file, "SaldoBancario"));
			SendClientMessage(playerid, Verde, string);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem uma conta bancária.");
		}
		return 1;
	}

	if(strcmp(cmd, "/depositar", true) == 0)
	{
		new tmp[256], valor, grana;
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[36]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[37]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[38]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[39]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[40]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[41]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[42]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[43])
			|| IsPlayerInDynamicCP(playerid, CheckpointsFix[52]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[53]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[54]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[55]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[56]))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use /depositar [quantia]");
				return 1;
			}
			if(strfind(tmp, "-", true) != -1)
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente.");
				return 1;
			}
			if(strlen(tmp) > 8)
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente.");
				return 1;
			}
			valor = strval(tmp);
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				grana = GetPlayerGrana(playerid);
				if(grana > valor-1 && valor > 0)
				{
					format(string, sizeof(string), "Banco: Você depositou a quantia de $%d.", valor);
					SendClientMessage(playerid, Verde, string);
					dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+valor);
					GivePlayerGrana(playerid, -valor);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem todo este dinheiro.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem uma conta bancária.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um banco.");
		}
		return 1;
	}

	if(strcmp(cmd, "/sacar", true) == 0)
	{
		new tmp[256], valor;
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[36]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[37]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[38]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[39]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[40]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[41]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[42]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[43])
			|| IsPlayerInDynamicCP(playerid, CheckpointsFix[52]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[53]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[54]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[55]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[56]))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use /sacar [quantia]");
				return 1;
			}
			if(strfind(tmp, "-", true) != -1)
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente.");
				return 1;
			}
			if(strlen(tmp) > 8)
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente.");
				return 1;
			}
			valor = strval(tmp);
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				if(dini_Int(file, "SaldoBancario") > valor-1 && valor > 0)
				{
					format(string, sizeof(string), "Banco: Você sacou a quantia de $%d.", valor);
					SendClientMessage(playerid, Verde, string);
					dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-valor);
					GivePlayerGrana(playerid, valor);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem todo este dinheiro.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem uma conta bancária.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um banco.");
		}
		return 1;
	}

	if(strcmp(cmd, "/repararp", true) == 0)
	{
		new aname[MAX_PLAYER_NAME], vid;
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || dini_Int(file, "Profissao") == Caminhoneiro || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /repararp [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				vid = GetPlayerVehicleID(plid);
				ResprayVehicle(vid);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) conscertou o seu veículo!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/deletcarp", true) == 0)
	{
		new aname[MAX_PLAYER_NAME], vid;
		if(pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /deletcarp [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				vid = GetPlayerVehicleID(plid);
				Loop(o, sizeof(VehiclesFix))
				{
					if(vid == VehiclesFix[o])
					{
						SendClientMessage(playerid, Vermelho, "O veículo em que o player está não pode ser deletado!");
						return 1;
					}
				}
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(vid == dini_Int(string, "Id"))
					{
						SendClientMessage(playerid, Vermelho, "Este carro não pode ser deletado!");
						return 1;
					}
				}
				DestroyVehicle(vid);
				vid = INVALID_VEHICLE_ID;
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) deletou o seu veículo!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/respawncarp", true) == 0)
	{
		new tmp[256], plid, vid;
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /respawncarp [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				vid = GetPlayerVehicleID(plid);
				SetVehicleToRespawn(vid);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) resetou seu carro!", aname, playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		else
		{
			SendClientMessage(playerid, Verde, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/cv", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid, carro;
			new Float:X, Float:Y, Float:Z, Float:Angle;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /cv [carro]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(playerid))
			{
				if(plid >= 400 && plid <= 611)
				{
					if(plid == 425 || plid == 469 || plid == 538 || plid == 537 || plid == 520 || plid == 449 || plid == 447 || plid == 569 || plid == 570 || plid == 432)
					{
						SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
						return 1;
					}
					if(IsPlayerInAnyVehicle(playerid))
					{
						SendClientMessage(playerid, Vermelho, "Você já está um carro!");
						return 1;
					}
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, Angle);
					carro = AddStaticVehicleEx(plid, X, Y, Z, Angle, -1, -1, 30);
					PutPlayerInVehicle(playerid, carro, 0);
					LinkVehicleToInterior(carro, GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(carro, GetPlayerVirtualWorld(playerid));
					format(string, sizeof(string), "Você criou o veículo de id: %d", plid);
					SendClientMessage(playerid, tcadm, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente! | ID's = 400-611");
				}
			}
		}
		return 1;
	}

	/*if(strcmp(cmd, "/vipcv", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			new tmp[256], plid, carro;
			new Float:X, Float:Y, Float:Z, Float:Angle;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vipcv [carro]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(playerid))
			{
				if(plid >= 400 && plid <= 611)
				{
					if(plid == 425 || plid == 469 || plid == 538 || plid == 537 || plid == 520 || plid == 449 || plid == 447 || plid == 569 || plid == 570 || plid == 432)
					{
						SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
						return 1;
					}
					if(crioucarro[playerid] == 1)
					{
						SendClientMessage(playerid, Vermelho, "Você já criou um carro!");
						return 1;
					}
					crioucarro[playerid] = 1;
					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, Angle);
					carro = AddStaticVehicleEx(plid, X, Y, Z, Angle, -1, -1, 30);
					PutPlayerInVehicle(playerid, carro, 0);
					LinkVehicleToInterior(carro, GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(carro, GetPlayerVirtualWorld(playerid));
					format(string, sizeof(string), "Você criou o veículo de id: %d", plid);
					SendClientMessage(playerid, tcadm, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente! | ID's = 400-611");
				}
			}
		}
		return 1;
	}*/

	if(strcmp(cmd, "/skin", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid, skin;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /skin [id] [skin]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /skin [id] [skin]");
				return 1;
			}
			skin = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				if(skin >= 0 && skin < 299)
				{
					if(skin == 292 || skin == 271 || skin == 272 || skin == 273 || skin == 270 || skin == 269 || skin == 274 || skin == 289)
					{
						SendClientMessage(playerid, Vermelho, "Skin proibido, tente outro! | ID's = 0-298");
						return 1;
					}
					SetPlayerSkin(plid, skin);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O ADM %s (%d) alterou sua skin para: %d", aname, playerid, skin);
					SendClientMessage(plid,tcadm, string);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente! | ID's = 0-298");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/vidaveiculo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid, Float:vidacarro;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vidaveiculo [id] [vida]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vidaveiculo [id] [vida]");
				return 1;
			}
			vidacarro = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				if(IsPlayerInAnyVehicle(plid))
				{
					new vid = GetPlayerVehicleID(plid);
					FreezeVehicleHealth(vid, vidacarro, 1);
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O(A) ADM %s (%d) setou a vida do seu veículo para: %d", aname, playerid, vid);
					SendClientMessage(plid, tcadm, string);
					SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está em um veículo.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dararma", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid, idarma;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /dararma [id] [arma]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /dararma [id] [arma]");
				return 1;
			}
			idarma = strval(tmp);
			if(idarma == 38 || idarma == 35 || idarma == 36 || idarma == 37 || idarma == 39 || idarma == 40)
			{
				SendClientMessage(playerid, Vermelho, "ID de arma proibida!");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				GivePlayerWeapon(plid, idarma, 100000);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O(A) ADM %s (%d) te forneceu uma arma de ID: %d", aname, playerid, idarma);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ann", true) == 0)
	{
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ann [texto]");
				return 1;
			}
			if(PlayerInfo[playerid][Logged] == 1)
			{
				if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
				{
					format(string, sizeof(string), "~g~] ~w~%s ~g~]", tmp);
					GameTextForAll(string, 5000, 3);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem permissão para usar este comando!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você tem que estar logado para usar este comando!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/cnn", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			tmp = strtok(cmdtext, idx, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /cnn [texto]");
				return 1;
			}
			if(PlayerInfo[playerid][Logged] == 1)
			{
				if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(string, sizeof(string), "%s diz:~n~~g~%s", aname, tmp);
					GameTextForAll(string, 5000, 3);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem permissão para usar este comando!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você tem que estar logado para usar este comando!");
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/cnnv", true) == 0)
    {
	if(vip[playerid] == 0)
	{
		SendClientMessage(playerid, 0xFFFF00AA, "(ERRO) Você nao é um player VIP!");
		return 1;
	}
	if(vip[playerid] == 1)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		new tmp[256];
		tmp = strtok(cmdtext, idx);
		if (!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Digite: /cnnv [texto]");
			return 1;
		}
		if(PlayerInfo[playerid][Logged] == 1)
		{
			if(vip[playerid] == 1 || pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
			{
				format(string, sizeof(string), "~b~Vip:~y~%s~r~: ~w~%s", aname, tmp);
				GameTextForAll(string, 5000, 3);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "(ERRO) Você não tem permissão para usar este comando!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "(ERRO) Você tem que estar logado para usar este comando!");
		}
		return 1;
	}
}

	if(strcmp(cmd, "/resetargrana", true) == 0)
	{
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /resetargrana [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				ResetPlayerGrana(plid);
				format(string, sizeof(string), "O(A) ADM %s (%d) resetou sua grana!", PlayerName(playerid), playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/resetarsaldo", true) == 0)
	{
		if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /resetarsaldo [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				format(file, sizeof(file), PASTA_CONTAS, PlayerName(plid));
				dini_IntSet(file, "SaldoBancario", 300);
				format(string, sizeof(string), "O(A) ADM %s (%d) resetou seu saldo no banco!", PlayerName(playerid), playerid);
				SendClientMessage(plid, tcadm, string);
				SendClientMessage(playerid, Verde, "Comando efetuado com sucesso!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/setadmin", true) == 0)
	{
		#if defined SystemAdminUser
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, lvl;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setadmin [id] [level]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setadmin [id] [level]");
				return 1;
			}
			lvl = strval(tmp);
			if(lvl >= 6)
			{
				SendClientMessage(playerid, Vermelho, "O level permitido para ADM é de 0 a 5!");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(file, sizeof(file), PASTA_CONTAS, pname);
				DesbugPlayer(plid);
				if(lvl >= 1)
				{
					pAdmin[plid] = lvl;
					dini_IntSet(file, "Admin", lvl);
                    format(string, sizeof(string), "%s (%d) (») Promoveu: %s (%d) para ADM (») Level: %d", aname, playerid, pname, plid, lvl);
					SendClientMessageToAll(tcadm, string);
				}
				if(lvl == 0)
				{
					pAdmin[plid] = 0;
					dini_IntSet(file, "Admin", 0);
                    format(string, sizeof(string), "%s (%d) (») Retirou ADM do(a) jogador(a): %s (%d)", aname, playerid, pname, plid);
					SendClientMessageToAll(tcadm, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		#else
		SendClientMessage(playerid, Azul, "Comando desativado temporáriamente.");
		#endif
		return 1;
	}

	if(strcmp(cmd, "/tiraradmdetodos", true) == 0)
	{
		if(!PlayerInfo[playerid][SCON] == true) return 1;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(pAdmin[i] > 0)
				{
					format(file, sizeof(file), PASTA_CONTAS, PlayerName(i));
					DesbugPlayer(i);
					pAdmin[i] = 0;
					dini_IntSet(file, "Admin", 0);
				}
			}
		}
		SendClientMessage(playerid, Verde, "Concluído somente para os Online!");
		return 1;
	}

	if(!strcmp(cmdtext, "/admins", true))
	{
		new str[256], pname[24], count = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(admin[i])
				{
					GetPlayerName(i, pname, 24);
					if(pAdmin[i] == 1)
					{
						format(str, sizeof(str), "{FF00DD}%s (%d) :: [MOD]\n", pname, i);
						strcat(string, str, sizeof(string));
					}
					if(pAdmin[i] == 2)
					{
					    format(str, sizeof(str), "{0000FF}%s (%d) :: [ADM]\n", pname, i);
						strcat(string, str, sizeof(string));
					}
					if(pAdmin[i] == 3)
					{
						format(str, sizeof(str), "{00FFFF}%s (%d) :: [Chefe]\n", pname, i);
						strcat(string, str, sizeof(string));
					}
					if(pAdmin[i] == 4)
					{
						format(str, sizeof(str), "{FFFF00}%s (%d) :: [Sub-Dono]\n", pname, i);
						strcat(string, str, sizeof(string));
					}
					if(pAdmin[i] == 5)
					{
						format(str, sizeof(str), "{00FF00}%s (%d) :: [Dono]\n", pname, i);
						strcat(string, str, sizeof(string));
					}
					count++;
				}
			}
		}
		if(count == 0)
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - ADM's Online - ::.", "Não há ADM's online no momento.", "OK", "");
		}
		else
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - ADM's Online - ::.", string, "OK", "");
		}
		return 1;
	}

	if(strcmp(cmd, "/cmdsvip", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(vip[playerid] == 1)
			{
				strcat(string, ">: /eusouvip  /cnnv /vipcv = desativado /virar /comemorar /irpos\n", sizeof(string));
				strcat(string, ">: /tunar /jetpack /armas /minigun /bazuca\n", sizeof(string));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos VIP - ::.", string, "OK", "");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/comandosadm", true) == 0)
	{
		new strcmd[1000];
		if(IsPlayerConnected(playerid))
		{
			if(pAdmin[playerid] == 1)
			{
				strcat(strcmd, "{00FF00}>: /respawncar /vida /colete /cercar /descercar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /desbugar /espiar /punir /banip /lc\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /virar /repararp /skin /darlevel /ann /carona\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /coletet /kick /evento /pararespiar /a\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /cnn /vidat /contar /ingetar /comemorar /ban /ir\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos ADM 1 - ::.", strcmd, "OK", "");
			}
			if(pAdmin[playerid] == 2)
			{
				strcat(strcmd, "{00FF00}>: /respawncar /recuperar /descalar /resetarflood /cercar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /lc /colete /calar /trazer /contar /ingetar /descercar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /descongelar /desarmar /desbugar /comemorar /banip /jetpack\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /virar /pararespiar /repararp /ejetar /coletet\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /espiar /ircarro /respawncarp /punir /congelar /evento /ir\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /carona /skin /kick /ban /vidat /vida /ann /cnn /a\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos ADM 2 - ::.", strcmd, "OK", "");
			}
			if(pAdmin[playerid] == 3)
			{
				strcat(strcmd, "{00FF00}>: /virar /respawncar /cnn /punir /darlevel /blockpm /banip /ejetar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /recuperar /jetpack /resetargrana /resetarsaldo /colete /trazer\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /skin /desbugar /congelar /descongelar /desarmar /lc /comemorar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /ban /espiar /pararespiar /repararp /ir /vidat /resetarflood /a\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /respawncarp /clima /ircarro /coletet /desarmart /carona\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /dararma /ann /liberarnick /amod /trazertodos /cercar /descercar /ip\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /vidaveiculo /kick /evento /ingetar /contar /calar /descalar /vida\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos ADM 3 - ::.", strcmd, "OK", "");
			}
			if(pAdmin[playerid] == 4)
			{
				strcat(strcmd, "{00FF00}>: /ip /virar /respawncar /contar /ircarro /resetarflood /liberarchat\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /recuperar /jetpack /colete /trazer /fakeban /baninfo /banip /lc /cnn\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /congelar /descongelar /desarmar /ejetar /darestudo /blockchat /ann\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /desbugar /espiar /pararespiar /repararp /ingetar /blockpm /rvc /rvu /a\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /deletcar /respawncarp /skin /dargrana /comemorar /punir /vida /clima\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /vidaveiculo /dararma /calar /descalar /resetargrana /resetarsaldo\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /ban /desbanir /trazertodos /liberarnick /darlevel /descercar /ir /rv\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /kick /vidat /coletet /desarmart /amod /evento /carona /cercar /cv\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos ADM 4 - ::.", strcmd, "OK", "");
			}
			if(pAdmin[playerid] == 5)
			{
				strcat(strcmd, "{00FF00}>: /virar /evento /deletcar /respawncar /explodir /clima /fakeban /banip /descercar /skin\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /calar /recuperar /godmod /ir /jetpack /vida /colete /desbugar /blockpm /baninfo /cercar\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /rmov /desarmar /espiar /trazer /descongelar /contar /darlevel /vercmds /carona /rv /lc\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /congelar /pararespiar /explodircarp /objstatus /vehstatus /liberarchat /blockchat /cnn /a\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /deletcarp /tapa /respawncarp /salvarcar /comemorar /ircarro /reconectarnpcs /rvc /rvu /cv /ip\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /descalar /vidaveiculo /dararma /dargrana /liberardm /blockdm /resetargrana /resetarsaldo\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /ban /banirnick /desbanirnick /desbanir /liberarnick /punir /ingetar /resetarflood /ann\n", sizeof(strcmd));
				strcat(strcmd, "{00FF00}>: /kick /vidat /coletet /desarmart /trazertodos /darestudo /amod /ejetar /repararp /irpos\n", sizeof(strcmd));
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos ADM 5 - ::.", strcmd, "OK", "");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/a", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			strmid(tmp, cmdtext, 2, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /a [texto]");
			}
			else
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "(») Admin («) %s diz: %s", aname, tmp);
				SendClientMessageToAll(Verde, string);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/ac", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256];
			strmid(tmp, cmdtext, 3, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ac [texto]");
			}
			else
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "(») Chat-Admin («) %s (%d) diz: %s", aname, playerid, tmp);
				ABroadCast(Amarelo, string, 1);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão para usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/armas", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Armas Vip", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
		}
		return 1;
	}

	if(strcmp(cmd, "/minigun", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			GivePlayerWeapon(playerid, 38, 999999);
		}
		return 1;
	}

	if(strcmp(cmd, "/bazuca", true) == 0)
	{
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			GivePlayerWeapon(playerid, 35, 999999);
		}
		return 1;
	}

	if(strcmp(cmd, "/relatorio", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while((idx < length) && ((idx - offset) < (sizeof(result) -1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Vermelho, "Use /relatorio [motivo]");
				return 1;
			}
			if(vip[playerid] < 1)
			{
				format(string, sizeof(string), "Relatorio de %s (%d): %s <<<<< AJUDE ELE(A) By: Sub >>>>>", sendername, playerid, (result));
				Relatorio(0xFF8000AA, string, 1);
				SendClientMessage(playerid, Aviso, "Seu relatorio foi enviado a administração com sucesso, aguarde uma resposta!");
			}
			else if(vip[playerid] >= 1)
			{
				format(string, sizeof(string), "Relatorio VIP de %s (ID: %d): %s", sendername, playerid, (result));
				ABroadCast(Violeta, string, 1);
				SendClientMessage(playerid, Aviso, "Seu relatorio 'VIP' foi enviado a administração com sucesso, aguarde uma resposta!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/exame", true) == 0)
	{
		new tmp[256], plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Use /exame [id]");
			return 1;
		}
		plid = strval(tmp);
		if(IsPlayerConnected(plid))
		{
			if(GetDistanceBetweenPlayers(plid, playerid) < 21)
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file, sizeof(file), PASTA_CONTAS, pname);
				SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~ Exame ~~~~~~~~~~~~~~");
				format(string, sizeof(string), "- Maconha: %d", dini_Int(file, "Maconha"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "- Crack: %d", dini_Int(file, "Crack"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "- Cocaina: %d", dini_Int(file, "Cocaina"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				SendClientMessage(playerid, Vermelho, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				format(string, sizeof(string), "- Maconha no sangue: %d", dini_Int(file, "tmaconha"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "- Crack no sangue: %d", dini_Int(file, "tcrack"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				format(string, sizeof(string), "- Cocaína no sangue: %d", dini_Int(file, "tcocaina"));
				SendClientMessage(playerid, 0xFFFFFFAA, string);
				SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~ Exame ~~~~~~~~~~~~~~");
				format(string, sizeof(string), "Você está examinando o(a) jogador(a) %s ", pname);
				SendClientMessage(playerid, COLOR_GREEN, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Chega mais perto para examinar!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp("/minhasdrogas", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == TraficanteD)
		{
			SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			format(string, sizeof(string), "Maconha: %d", dini_Int(file, "Maconha"));
			SendClientMessage(playerid, 0xFFFFFFAA, string);
			format(string, sizeof(string), "Crack: %d", dini_Int(file, "Crack"));
			SendClientMessage(playerid, 0xFFFFFFAA, string);
			format(string, sizeof(string), "Cocaina: %d", dini_Int(file, "Cocaina"));
			SendClientMessage(playerid, 0xFFFFFFAA, string);
			SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		}
		return 1;
	}

	if(strcmp("/usarmaconha", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "tmaconha") >= 1)
		{
			dini_IntSet(file, "tmaconha", dini_Int(file, "tmaconha") -1);
			dini_IntSet(file, "usoudroga", 1);
			TextDrawShowForPlayer(playerid, drogas1);
			TextDrawShowForPlayer(playerid, drogas2);
			SendClientMessage(playerid, C_TraficanteD, "Você usou maconha agora aguarde e verá os efeitos dela!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem Maconha.");
		}
		return 1;
	}

	if(strcmp("/usarcrack", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "tcrack") >= 1)
		{
			dini_IntSet(file, "tcrack", dini_Int(file, "tcrack") +1);
			dini_IntSet(file, "usoudroga", 1);
			TextDrawShowForPlayer(playerid, drogas1);
			TextDrawShowForPlayer(playerid, drogas2);
			SendClientMessage(playerid, C_TraficanteD, "Você usou crack agora aguarde e verá os efeitos dela!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, " Você não tem Crack.");
		}
		return 1;
	}

	if(strcmp("/usarcocaina", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "tcocaina") == 1)
		{
			dini_IntSet(file, "tcocaina", dini_Int(file, "tcocaina") +1);
			dini_IntSet(file, "usoudroga", 1);
			TextDrawShowForPlayer(playerid, drogas1);
			TextDrawShowForPlayer(playerid, drogas2);
			SendClientMessage(playerid, C_TraficanteD, "Você usou cocaína agora aguarde e verá os efeitos dela!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem Cocaína.");
		}
		return 1;
	}

	if(strcmp("/pegardrogas", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new grana = GetPlayerGrana(playerid);
		if(grana > 199)
		{
			if(IsPlayerInDynamicCP(playerid, CheckpointsFix[3]))
			{
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(file, sizeof(file), PASTA_CONTAS, aname);
				if(dini_Int(file, "Profissao") == TraficanteD)
				{
					SendClientMessage(playerid, C_TraficanteD, "Você pegou as drogas, 5kg de Maconha, Cocaína e Crack.");
					SendClientMessage(playerid, C_TraficanteD, "Você pagou $200 por elas. /minhasdrogas");
					GivePlayerGrana(playerid, -200);
					dini_IntSet(file, "Maconha", dini_Int(file, "Maconha") +5);
					dini_IntSet(file, "Crack", dini_Int(file, "Crack") +5);
					dini_IntSet(file, "Cocaina", dini_Int(file, "Cocaina") +5);
				}
				else
				{
					SendClientMessage(playerid, C_TraficanteD, "Você não é um Traficante de Drogas!");
				}
			}
			else
			{
				SendClientMessage(playerid, C_TraficanteD, "Você não está na 'boca' de fumo e não pode pegar drogas!");
			}
		}
		else
		{
			SendClientMessage(playerid, C_TraficanteD, "Você não tem dinheiro suficiente. ($200)");
		}
		return 1;
	}

	if(strcmp(cmd, "/ofmaconha", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == TraficanteD)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ofmaconha [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				if(dini_Int(file, "Maconha") == 0)
				{
					SendClientMessage(playerid, Vermelho, "Sua maconha acabou pegue mais na boca!");
					return 1;
				}
				if(dini_Int(file, "Maconha") >= 1)
				{
					dini_IntSet(file, "Maconha", dini_Int(file, "Maconha") -1);
					format(string, sizeof(string), "O traficante %s te ofereceu 1kg de Maconha!", aname);
					SendClientMessage(plid, C_TraficanteD, string);
					SendClientMessage(plid, C_TraficanteD, "Você pode aceitar a droga ou recusar: /aceitar /recusar.");
					SendClientMessage(playerid, Verde, "Maconha oferecida com sucesso!");
					dini_IntSet(file2, "ofmaconha", 1);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ofcrack", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == TraficanteD)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ofcrack [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				if(dini_Int(file, "Crack") == 0)
				{
					SendClientMessage(playerid, Vermelho, "Seu crack acabou pegue mais na boca!");
					return 1;
				}
				if(dini_Int(file, "Crack") >= 1)
				{
					dini_IntSet(file, "Crack", dini_Int(file, "Crack") -1);
					format(string, sizeof(string), "O traficante %s te ofereceu 1kg de Crack!", aname);
					SendClientMessage(plid, C_TraficanteD, string);
					SendClientMessage(plid, C_TraficanteD, "Você pode aceitar a droga ou recusar: /aceitar /recusar.");
					SendClientMessage(playerid, Verde, "Crack oferecido com sucesso!");
					dini_IntSet(file2, "ofcrack", 1);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/ofcocaina", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == TraficanteD)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /ofcocaina [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				if(dini_Int(file, "Cocaina") == 0)
				{
					SendClientMessage(playerid, Vermelho, "Sua cocaína acabou pegue mais na boca!");
					return 1;
				}
				if(dini_Int(file, "Cocaina") >= 1)
				{
					dini_IntSet(file, "Cocaina", dini_Int(file, "Cocaina") -1);
					format(string, sizeof(string), "O traficante %s te ofereceu 1kg de Cocaína!", aname);
					SendClientMessage(plid, C_TraficanteD, string);
					SendClientMessage(plid, C_TraficanteD, "Você pode aceitar a droga ou recusar: /aceitar /recusar.");
					SendClientMessage(playerid, Verde, "Cocaina oferecida com sucesso!");
					dini_IntSet(file2, "ofcocaina", 1);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/aceitar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file2, sizeof(file2), PASTA_CONTAS, aname);
		if(IsPlayerConnected(playerid))
		{
			if(dini_Int(file2, "convitent") == 1)
			{
				SendClientMessage(playerid, Amarelo, "Você aceitou o convite para a entrevista!");
				SendClientMessage(playerid, Amarelo, "Vá até a prefeitura para começar a entrevista.");
			}
			if(dini_Int(file2, "ofmaconha") == 1)
			{
				dini_IntSet(file2, "ofmaconha", 0);
				dini_IntSet(file2, "tmaconha", dini_Int(file2, "tmaconha") +1);
				SendClientMessage(playerid, Amarelo, "Você aceitou 1kg de maconha para usar digite /usarmaconha");
			}
			if(dini_Int(file2, "ofcrack") == 1)
			{
				dini_IntSet(file2, "ofcrack", 0);
				dini_IntSet(file2, "tcrack", dini_Int(file2, "tcrack") +1);
				SendClientMessage(playerid, Amarelo, "Você aceitou 1kg de crack para usar digite /usarcrack!");
			}
			if(dini_Int(file2, "ofcocaina") == 1)
			{
				dini_IntSet(file2, "ofcocaina", 0);
				dini_IntSet(file2, "tcocaina", dini_Int(file2, "tcocaina") +1);
				SendClientMessage(playerid, Amarelo, "Você aceitou 1kg de cocaína para usar digite /usarcocaina!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/recusar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file2, sizeof(file2), PASTA_CONTAS, aname);
		if(IsPlayerConnected(playerid))
		{
			if(dini_Int(file2, "convitent") == 1)
			{
				SendClientMessage(playerid, Amarelo, "Você recusou o convite para entra para a entrevista!");
				format(string, sizeof(string), "O player %s (ID: %d) Não quis fazer a entrevista!.", aname, playerid);
				SendClientMessageToAll(Vermelho, string);
				dini_IntSet(file2, "convitent", 0);
			}
			if(dini_Int(file2, "ofmaconha") == 1)
			{
				dini_IntSet(file2, "ofmaconha", 0);
				SendClientMessage(playerid, Amarelo, "Você recusou 1KG de maconha!");
			}
			if(dini_Int(file2, "ofcrack") == 1)
			{
				dini_IntSet(file2, "ofcrack", 0);
				SendClientMessage(playerid, Amarelo, "Você recusou 1KG de crack!");
			}
			if(dini_Int(file2, "ofcocaina") == 1)
			{
				dini_IntSet(file2, "ofcocaina", 0);
				SendClientMessage(playerid, Amarelo, "Você recusou 1KG de cocaina!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/preprr", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			CreateCountdown(30, 1);
			PrepTimer = SetTimer("AutoRestart", 32000, 1);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					ClearChatbox(i, 3);
					SendClientMessage(i, Verde, "O servidor está sendo preparado para reniciar em 30 segundos.");
					SendClientMessage(i, Branco, "Após 'Server closed the connection.' aguarde, não precisa sair.");
					SendClientMessage(i, Azul, "Fique ligado conosco, use /salvar e ao relogar use /continuar.");
					ClearChatbox(i, 3);
				}
			}
			SendClientMessage(playerid, Amarelo, "Para cancelar o processo use /cancelprep");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/cancelprep", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			new pname[MAX_PLAYER_NAME];
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			StopCountdown();
			KillTimer(PrepTimer);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerName(i, aname, MAX_PLAYER_NAME);
					ClearChatbox(i, 10);
					format(string, sizeof(string), "  %s (%d) cancelou o reiniciamento do servidor.", pname, playerid);
					SendClientMessage(i, tcadm, string);
					ClearChatbox(i, 3);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/trazertodos", true) == 0)
	{
		if(pAdmin[playerid] > 2)
		{
			new aname[MAX_PLAYER_NAME];
			new interiormeu, Float:X, Float:Y, Float:Z;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					interiormeu = GetPlayerInterior(playerid);
					SetPlayerInterior(i, interiormeu);
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(i, X+2, Y+2, Z);

					TogglePlayerControllable(i, false);
					SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", i);

					format(string, sizeof(string), "O(A) ADM %s (%d) trouxe todos para sua posição.", aname, playerid);
					SendClientMessage(i, tcadm, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/vidat", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) recuperou a vida de todos.", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SetPlayerHealth(i, 100);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/liberarchat", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 3)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) liberou o Chat Global!", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			Chatlb = 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/blockchat", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 3)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) bloqueou o Chat Global!", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			Chatlb = 0;
		}
		return 1;
	}

	if(strcmp(cmd, "/liberardm", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 5)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) liberou o DM!", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			DMlb = 1;
		}
		return 1;
	}

	if(strcmp(cmd, "/blockdm", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 4)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) bloqueou o DM!", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			DMlb = 0;
		}
		return 1;
	}

	if(strcmp(cmd, "/coletet", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 0)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) recuperou o colete de todos.", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SetPlayerArmour(i, 100);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/desarmart", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] > 2)
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) ADM %s (%d) desarmou todos.", aname, playerid);
			SendClientMessageToAll(tcadm, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					ResetPlayerWeapons(i);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/amod", true) == 0)
	{
		if(pAdmin[playerid] > 2)
		{
			if(amod[playerid] == 0)
			{
				amod[playerid] = 1;
				SendClientMessage(playerid, 0x0016DDFF, "Mode: Ligado");
				SendClientMessage(playerid, 0x0016DDFF, "Teclas: ALT SPACE ENTER");
			}
			else if(amod[playerid] == 1)
			{
				amod[playerid] = 0;
				SendClientMessage(playerid, 0x0016DDFF, "Mode: Desligado");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vercmds", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			if(vercmds[playerid] == 0)
			{
				vercmds[playerid] = 1;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você está lendo os comandos do servidor!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /vercmds para não ver os comandos!");
			}
			else if(vercmds[playerid] == 1)
			{
				vercmds[playerid] = 0;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você não está mais lendo os comandos do servidor!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /vercmds para ver os comandos!");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/verpms", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			if(verpms[playerid] == 0)
			{
				verpms[playerid] = 1;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você está lendo as pms do servidor!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /verpms para não ver as pms!");
			}
			else if(verpms[playerid] == 1)
			{
				verpms[playerid] = 0;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você não está mais lendo as pms do servidor!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /verpms para ver as pms!");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/blockpm", true) == 0)
	{
		if(pAdmin[playerid] > 2)
		{
			if(blockpm[playerid] == 1)
			{
				blockpm[playerid] = 0;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você está recebendo pms!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /blockpm para não receber pms!");
			}
			else if(blockpm[playerid] == 0)
			{
				blockpm[playerid] = 1;
				SendClientMessage(playerid, 0x0016DDFF, "Agora você não está recebendo pms!");
				SendClientMessage(playerid, Amarelo, "Digite novamente /blockpm para receber pms!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/soltar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || dini_Int(file, "Profissao") == Advogado || dini_Int(file, "Profissao") == Caminhoneiro || dini_Int(file, "Profissao") == Presidente || dini_Int(file, "Profissao") == Prefeito || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /soltar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid && dini_Int(file, "aAdmin") == 0)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode se soltar, contrate outro advogado.");
				return 1;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está online.");
			}
			else
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				preso[plid] = 0;
				Preso[plid] = 0;
				algemado[plid] = 0;
				dini_IntSet(file2, "Preso", 0);
				SetPlayerWantedLevel(plid, 0);
				SetPlayerHealth(plid, 100);
				SpawnPlayer(plid);
				format(string, sizeof(string), "%s (%d) (») Soltou  jogador(a) Cadeia : %s (%d)", aname, playerid, pname, plid);
                SendClientMessageToAll(COLOR_GREEN, string);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não é um advogado.");
		}
		return 1;
	}

	if(NaFaculdade[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está na biblioteca e não pode usar nenhum comando.");
	if(preso[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você não pode usar nenhum comando pois está preso.");
	if(algemado[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você não pode usar nenhum comando pois está algemado.");
	if(cercado[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você não pode usar nenhum comando pois está cercado.");
	// =================================================================================
	if(strcmp(cmdtext, "/games", true) == 0)
	{
		ShowPlayerDialog(playerid, Menugame, DIALOG_STYLE_LIST, "Lan House", "Counter-Striker SA\nBomber-Man SA\nBate-Bate SA\nBasquete-Car SA\nMonster-Down SA\nSnake SA", "OK", "Cancelar");
		return 1;
	}

	if(strcmp(cmdtext, "/sairgame", true) == 0)
	{
		if(nogame[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você não está em um game.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			new id = GetPlayerVehicleID(playerid);
			DestroyVehicle(id);
			id = INVALID_VEHICLE_ID;
			nogame[playerid] = 0;
			SetPlayerColor(playerid, 0x008000AA);
			SetPlayerInterior(playerid, lanI[playerid]);
			SetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
			SetPlayerSkin(playerid, dini_Int(file, "Skin"));
			GameTextForPlayer(playerid, "~r~Saiu do Game", 4000, 1);
			SendClientMessage(playerid, 0xFF0000AA, "Você saiu do game.");
		}
		else
		{
			nogame[playerid] = 0;
			nobomber[playerid] = 0;
			SetPlayerColor(playerid, 0x008000AA);
			SetPlayerInterior(playerid, lanI[playerid]);
			SetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
			SetPlayerSkin(playerid, dini_Int(file, "Skin"));
			GameTextForPlayer(playerid, "~r~Saiu do Game", 4000, 1);
			SendClientMessage(playerid, 0xFF0000AA, "Você saiu do game.");
		}
		return 1;
	}
	// =================================================================================
	if(strcmp(cmdtext, "/nalan", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "|_Players na Lan House_|");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && nogame[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg, sizeof(msg), "%s (ID: %d)", Jogador, i);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém está em um x1!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/naautoescola", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "(») Quem está na Auto-Escola («)");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && autoescola[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg,sizeof(msg), "%s (ID: %d)", Jogador, i);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém está em teste da Auto-Escola!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/contar", true) == 0)
	{
		if(pAdmin[playerid] > 0 || nogame[playerid] == 1)
		{
			if(nogame[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(nogame[i] == 1)
						{
							CreatePlayerCountdown(i, 5, 1);
						}
					}
				}
			}
			else
			{
				CreateCountdown(5, 1);
			}
		}
		return 1;
	}

	// Variaveis
	if(nogame[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você não pode usar comando em um game!");
	if(autoescola[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você não pode usar comando em um teste de Auto-Escola!");

	if(strcmp("/horarios", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, 0x80FF00AA, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Verde, "A Biblioteca estará aberta nos horários:");
		SendClientMessage(playerid, Amarelo, "» De manha das 9:00 as 12:00");
		SendClientMessage(playerid, Amarelo, "» De tarde das 14:00 as 17:00");
		SendClientMessage(playerid, Amarelo, "» De noite das 21:00 as 24:00");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Verde, "Você receberá seu salário no horário:");
		SendClientMessage(playerid, Amarelo, "» De noite as 19:00 horas!");
		SendClientMessage(playerid, 0x80FF00AA, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}

	if(strcmp(cmd, "/desbugarme", true) == 0)
	{
		DesbugPlayer(playerid);
		format(string, sizeof(string), "O(A) %s (%d) tentou se desbugar. ( /desbugarme )", PlayerName(playerid), playerid);
		SendClientMessageToAll(tcadm, string);
		return 1;
	}

	if(strcmp("/criarevento", cmdtext, true, 10) == 0)
	{
		new tmp[256];
		if(pAdmin[playerid] > 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/criarevento [vagas] [nome]");
				SendClientMessage(playerid, Amarelo, "Ou opte por usar as Opções de Evento.");
				ClearChatbox(playerid, 3);
				ShowPlayerDialog(playerid, eventos, DIALOG_STYLE_LIST, "Opções de Evento", "{00FFFF}Circuito LS (Normal)\n{FFFF00}Circuito LV (Easy)\n{FF33FF}Corrida Maluca (Normal)\n{00FFFF}Vôo Leve (Normal)\n{FF0000}Vôo Veloz (Expert)\n{003300}Campeonato de Bike (Expert)\n{0000FF}Moto Cross (Expert)", "Criar", "Cancelar");
				return 1;
			}
			new length = strlen(cmdtext);
			while((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while((idx < length) && ((idx - offset) < (sizeof(result) -1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Vermelho, "/criarevento [vagas] [nome]");
				SendClientMessage(playerid, Amarelo, "Ou opte por usar as Opções de Evento.");
				ClearChatbox(playerid, 3);
				ShowPlayerDialog(playerid, eventos, DIALOG_STYLE_LIST, "Opções de Evento", "{00FFFF}Circuito LS (Normal)\n{FFFF00}Circuito LV (Easy)\n{FF33FF}Corrida Maluca (Normal)\n{00FFFF}Vôo Leve (Normal)\n{FF0000}Vôo Veloz (Expert)\n{003300}Campeonato de Bike (Expert)\n{0000FF}Moto Cross (Expert)", "Criar", "Cancelar");
				return 1;
			}
			if(VBIsNumeric(tmp))
			{
				new Float:eXx,
					Float:eYy,
					Float:eZz,
					eIi;

				eIi = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, eXx, eYy, eZz);
				PlayerCreateEvent(playerid, StrToInt(tmp), result, eXx, eYy, eZz, eIi);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp("/cancelarevento", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] > 2)
		{
			// Corrida Pista 1
			if(EventoCorrida1 == 1)
			{
				EventoCorrida1 = 0;
				DestroyVehiclesPista1();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista1[i] == 1)
						{
							InRacePista1[i] = 0;
							DeletePlayerPistaRace1(i);
						}
					}
				}
			}
			// Corrida Pista 2
			if(EventoCorrida2 == 1)
			{
				EventoCorrida2 = 0;
				DestroyVehiclesPista2();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista2[i] == 1)
						{
							InRacePista2[i] = 0;
							DeletePlayerPistaRace2(i);
						}
					}
				}
			}
			// Corrida Pista 3
			if(EventoCorrida3 == 1)
			{
				EventoCorrida3 = 0;
				DestroyVehiclesPista3();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista3[i] == 1)
						{
							InRacePista3[i] = 0;
							DeletePlayerPistaRace3(i);
						}
					}
				}
			}
			// Fliping Pista 4
			if(EventoCorrida4 == 1)
			{
				EventoCorrida4 = 0;
				DestroyVehiclesPista4();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista4[i] == 1)
						{
							InRacePista4[i] = 0;
							DeletePlayerPistaRace4(i);
						}
					}
				}
			}
			// Fliping Pista 5
			if(EventoCorrida5 == 1)
			{
				EventoCorrida5 = 0;
				DestroyVehiclesPista5();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista5[i] == 1)
						{
							InRacePista5[i] = 0;
							DeletePlayerPistaRace5(i);
						}
					}
				}
			}
			// Campeonato de Bike
			if(EventoCorrida6 == 1)
			{
				EventoCorrida6 = 0;
				DestroyVehiclesPista6();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista6[i] == 1)
						{
							InRacePista6[i] = 0;
							DeletePlayerPistaRace6(i);
						}
					}
				}
			}
			PlayerCancelEvent(playerid);
		}
		return 1;
	}

	if(strcmp("/fecharevento", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] > 0)
		{
			// Corrida Pista 1
			if(EventoCorrida1 == 1)
			{
				EventoCorrida1 = 0;
				DestroyVehiclesPista1();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista1[i] == 1)
						{
							InRacePista1[i] = 0;
							DeletePlayerPistaRace1(i);
						}
					}
				}
			}
			// Corrida Pista 2
			if(EventoCorrida2 == 1)
			{
				EventoCorrida2 = 0;
				DestroyVehiclesPista2();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista2[i] == 1)
						{
							InRacePista2[i] = 0;
							DeletePlayerPistaRace2(i);
						}
					}
				}
			}
			// Corrida Pista 3
			if(EventoCorrida3 == 1)
			{
				EventoCorrida3 = 0;
				DestroyVehiclesPista3();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista3[i] == 1)
						{
							InRacePista3[i] = 0;
							DeletePlayerPistaRace3(i);
						}
					}
				}
			}
			// Fliping Pista 4
			if(EventoCorrida4 == 1)
			{
				EventoCorrida4 = 0;
				DestroyVehiclesPista4();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista4[i] == 1)
						{
							InRacePista4[i] = 0;
							DeletePlayerPistaRace4(i);
						}
					}
				}
			}
			// Fliping Pista 5
			if(EventoCorrida5 == 1)
			{
				EventoCorrida5 = 0;
				DestroyVehiclesPista5();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista5[i] == 1)
						{
							InRacePista5[i] = 0;
							DeletePlayerPistaRace5(i);
						}
					}
				}
			}
			// Campeonato de Bike
			if(EventoCorrida6 == 1)
			{
				EventoCorrida6 = 0;
				DestroyVehiclesPista6();
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(InRacePista6[i] == 1)
						{
							InRacePista6[i] = 0;
							DeletePlayerPistaRace6(i);
						}
					}
				}
			}
			PlayerCloseEvent(playerid);
		}
		return 1;
	}

	if(strcmp("/expulsarevento", cmdtext, true, 10) == 0)
	{
		new tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/expulsarevento [id] [motivo]");
			return 1;
		}
		new length = strlen(cmdtext);
		while((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while((idx < length) && ((idx - offset) < (sizeof(result) -1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Vermelho, "/expulsarevento [id] [motivo]");
			return 1;
		}
		PlayerExpulsePlayerEvent(playerid, StrToInt(tmp), result);
		return 1;
	}

	if(strcmp(cmd, "/pausarevento", true) == 0)
	{
		if(EventoCriado == 0)
		{
			SendClientMessage(playerid, Vermelho, "O evento não começou.");
			return 1;
		}
		if(pAdmin[playerid] > 2)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(noevento[i] == 1)
					{
						TogglePlayerControllable(i, 0);
					}
				}
			}
			GameTextForAll("~y~Evento ~b~Pausado", 6000, 1);
			format(STRX, sizeof(STRX), "O(A) ADM %s pausou o evento.", PlayerName(playerid));
			SendClientMessageToAll(tcadm, STRX);
		}
		return 1;
	}

	if(strcmp(cmd, "/continuarevento", true) == 0)
	{
		if(EventoCriado == 0)
		{
			SendClientMessage(playerid, Vermelho, "O evento não começou.");
			return 1;
		}
		if(pAdmin[playerid] > 2)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(noevento[i] == 1)
					{
						TogglePlayerControllable(i, 1);
					}
				}
			}
			GameTextForAll("~y~Evento ~b~Continua", 6000, 1);
			format(STRX, sizeof(STRX), "O(A) ADM %s deu continuação ao evento.", PlayerName(playerid));
			SendClientMessageToAll(tcadm, STRX);
		}
		return 1;
	}

	if(strcmp("/comecarevento", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] > 0)
		{
			// Corrida Pista 1
			if(EventoCorrida1 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista1[i] = 1;
							CreatePlayerPistaRace1(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista1[i][0]);
						}
					}
				}
			}
			// Corrida Pista 2
			if(EventoCorrida2 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista2[i] = 1;
							CreatePlayerPistaRace2(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista2[i][0]);
						}
					}
				}
			}
			// Corrida Pista 3
			if(EventoCorrida3 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista3[i] = 1;
							CreatePlayerPistaRace3(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista3[i][0]);
						}
					}
				}
			}
			// Fliping Pista 4
			if(EventoCorrida4 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista4[i] = 1;
							CreatePlayerPistaRace4(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista4[i][0]);
						}
					}
				}
			}
			// Fliping Pista 5
			if(EventoCorrida5 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista5[i] = 1;
							CreatePlayerPistaRace5(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista5[i][0]);
						}
					}
				}
			}
			// Campeonato de Bike
			if(EventoCorrida6 == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(noevento[i] == 1)
						{
							InRacePista6[i] = 1;
							CreatePlayerPistaRace6(i);
							SetTimerEx("DestogglePlayerDynamicRaceCP", 5000, 0, "dd", i, RaceChecksPista6[i][0]);
						}
					}
				}
			}
			PlayerInitEvent(playerid);
		}
		return 1;
	}

	if(strcmp("/irevento", cmdtext, true, 10) == 0)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(dini_Int(file, "Preso") == 1) return SendClientMessage(playerid, Vermelho, "Você está preso!");
		ResetPlayerWeapons(playerid);
		SetPlayerEventPos(playerid);
		return 1;
	}

	// ============================== Teleportes =======================================
	if(strcmp("/aerolv", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 1285.2111, 1271.6621, 10.5278, 323.3700);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroLV (») Quer ir? Use: /aerolv", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1285.2111, 1271.6621, 10.5278);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroLV (») Quer ir? Use: /aerolv", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/aerosf", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -1644.0799, -207.7807, 13.8556, 224.8902);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroSF (») Quer ir? Use: /aerosf", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -1644.0799, -207.7807, 13.8556);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroSF (») Quer ir? Use: /aerosf", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/aerols", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 1565.4782, -2485.5905, 13.2604, 137.6596);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroLS (») Quer ir? Use: /aerols", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1565.4782, -2485.5905, 13.2604);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroLS (») Quer ir? Use: /aerols", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/aerovm", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 398.7192, 2526.5710, 16.2140, 137.5965);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroVM (») Quer ir? Use: /aerovm", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 398.7192, 2526.5710, 16.2140);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o AeroVM (») Quer ir? Use: /aerovm", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/skate", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 1877.6309, -1385.1787, 13.2740, 359.2364);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o Skate (») Quer ir? Use: /skate", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1877.6309, -1385.1787, 13.2740);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o Skate (») Quer ir? Use: /skate", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/grove", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 2486.0910, -1657.3436, 13.0549, 85.1661);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Grove (») Quer ir? Use: /grove", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2486.0910, -1657.3436, 13.0549);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Grove (») Quer ir? Use: /grove", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/avenidals", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 1640.4237, -1034.4143, 61.7462, 170.5807);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaLS (») Quer ir? Use: /avenidals", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1640.4237, -1034.4143, 61.7462);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaLS (») Quer ir? Use: /avenidals", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/avenidasf", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -1894.1353, -722.6907, 43.3611, 0.4021);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaSF (») Quer ir? Use: /avenidasf", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -1894.1353, -722.6907, 43.3611);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaSF (») Quer ir? Use: /avenidasf", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/avenidalv", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 2068.9570, 874.0946, 6.6860, 359.7521);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaLV (») Quer ir? Use: /avenidalv", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2068.9570, 874.0946, 6.6860);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a AvenidaLV (») Quer ir? Use: /avenidalv", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/ruafc", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -198.2528, 1178.2636, 19.3007, 180.0000);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a RuaFC (») Quer ir? Use: /ruafc", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -198.2528, 1178.2636, 19.3007);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a RuaFC (») Quer ir? Use: /ruafc", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/drift", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -304.4063, 1500.2224, 75.3148, 184.6666);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o Drift (») Quer ir? Use: /drift", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -304.4063, 1500.2224, 75.3148);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para o Drift (») Quer ir? Use: /drift", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/favela", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 2172.7041, -1003.7318, 62.5093, 80.3100);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Favela (») Quer ir? Use: /favela", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2172.7041, -1003.7318, 62.5093);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Favela (») Quer ir? Use: /favela", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/lybert", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 1);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -736.6300, 492.9294, 1371.6842, 149.0222);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 1);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para Lybert City (») Quer ir? Use: /lybert", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid, -736.6300, 492.9294, 1371.6842);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para Lybert City (») Quer ir? Use: /lybert", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
    if(strcmp("/es", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 2814.6516,-1474.4885,16.1675,26.1315);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a estacionamento (») Quer ir? Use: /es", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2814.6516,-1474.4885,16.1675);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a estacionamento (») Quer ir? Use: /es", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
    if(strcmp("/condominio", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 834.5617,-2053.0249,12.8672,26.1315);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a 1ºcondominio (») Quer ir? Use: /condominio", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 834.5617,-2053.0249,12.8672);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a estacionamento (») Quer ir? Use: /condominio", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/detran", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), 1082.6553, 1375.7139, 10.3849, 89.6340);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Detran (») Quer ir? Use: /detran", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1082.6553, 1375.7139, 10.3849);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Detran (») Quer ir? Use: /detran", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
    if(strcmp("/batbat", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetVehiclePosEx(GetPlayerVehicleID(playerid), -1394.2000,987.6200,1023.9598,30.1096);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Detran (») Quer ir? Use: /detran", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -1394.2000,987.6200,1023.9598);
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "O(A) jogador(a) %s foi para a Detran (») Quer ir? Use: /detran", pname);
			SendClientMessageToAll(0x33AA33A, string);
		}
		return 1;
	}
	if(strcmp("/arenadm", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1369.7585, 2195.4555, 9.7578);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a ArenaDM (») Quer ir? Use: /arenadm", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/oceandm", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2734.7502, -2450.1545, 17.5937);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a OceanDM (») Quer ir? Use: /oceandm", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/swatdm", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1182.0980, -2036.8110, 69.0078);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a SwatDM (») Quer ir? Use: /swatdm", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/naviodm", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, -2373.2142, 1551.4996, 2.1172);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o NavioDM (») Quer ir? Use: /naviodm", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/a51", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 88.3497, 1918.6447, 17.8780);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Area51 (») Quer ir? Use: /a51", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/ufo", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1931.7877, -506.3997, 21.1385);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o Ufo (») Quer ir? Use: /ufo", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/montesf", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, -2233.7698, -1736.4923, 480.8207);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o MonteSF (») Quer ir? Use: /montesf", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/cassino", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2022.4974, 1007.9083, 10.8203);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o Cassino (») Quer ir? Use: /cassino", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/pref", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1484.4818,-1772.3768,13.5469);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Prefeitura (») Quer ir? Use: /pref", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp(cmdtext,"/loop3", true) == 0)
    {
  	SetPlayerInterior(playerid,0);
	GameTextForPlayer(playerid, "~p~Voce esta na, Loop3", 1000, 1);
	SetPlayerPos(playerid,219.80000305176,-2430.1000976563,14.60000038147);
    new pname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
    SendClientMessage(playerid,Vermelho,"Lol Loop2 kkkk.");
    SendClientMessageToAll(0x33AA33A, string);
	return 1;
    }
    if(strcmp("/dp", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1553.7681, -1675.6943, 16.1953);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Delegacia (») Quer ir? Use: /dp", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/bi", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1081.0706, -1701.3231, 13.5469);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Biblioteca (») Quer ir? Use: /bi", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/facul", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1225.5422, -1844.4948, 13.5468);
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Faculdade (») Quer ir? Use: /facul", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/Concessionaria", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 794.1492, -3235.0273, 9.7802);

		TogglePlayerControllable(playerid, false);
		SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi Concessionaria (») Quer ir? Use: /Concessionaria", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/lostc", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2188.6123, 1038.7008, 494.3419);

		TogglePlayerControllable(playerid, false);
		SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para a Lost City (») Quer ir? Use: /lostc", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/jump", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2072.8071, 3.2631, 300.6766);

		TogglePlayerControllable(playerid, false);
		SetTimerEx("JumpDesbug", 3000, 0, "d", playerid);

		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o Jump (») Quer ir? Use: /jump", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/drop", cmdtext, true, 10) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1006.9839, -2623.7243, 149.2153);

		TogglePlayerControllable(playerid, false);
		SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "O(A) jogador(a) %s foi para o Drop (») Quer ir? Use: /drop", pname);
		SendClientMessageToAll(0x33AA33A, string);
		return 1;
	}
	if(strcmp("/teles", cmdtext, true, 10) == 0 || strcmp("/gps", cmdtext, true, 10) == 0)
	{
		SendClientMessage(playerid, Branco, "=-=-=-=-=-=-=-=-=-=-=-= Teleportes =-=-=-=-=-=-=-=-=-=-=-=");
		SendClientMessage(playerid, Azul, "/avenidalv /avenidasf /avenidals /ruafc /drift /lybert");
		SendClientMessage(playerid, Azul, "/aerolv /aerosf /aerols /aerovm /skate /grove /jump");
		SendClientMessage(playerid, Azul, "/pref /dp /bi /cassino /ufo /montesf /ilhap /a51 /drop");
		SendClientMessage(playerid, Azul, "/favela /arenadm /oceandm /swatdm /naviodm /lostc /facul");
		SendClientMessage(playerid, Branco, "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
		return 1;
	}
	// =================================================================================

	if(strcmp("/evento", cmdtext, true, 10) == 0)
	{
		if(pAdmin[playerid] > 0)
		{
			SendClientMessage(playerid, 0x008000AA, "Use: /criarevento para criar um evento");
			SendClientMessage(playerid, 0x008000AA, "Use: /expulsarevento para expulsar alguem do evento");
			SendClientMessage(playerid, 0x008000AA, "Use: /comecarevento para iniciar o evento");
			SendClientMessage(playerid, 0x008000AA, "Use: /pausarevento para pausar o evento");
			SendClientMessage(playerid, 0x008000AA, "Use: /continuarevento para continuar o evento em pausa");
			SendClientMessage(playerid, 0x008000AA, "Use: /cancelarevento para cancelar o evento");
			SendClientMessage(playerid, 0x008000AA, "Use: /fecharevento quando o evento começado acabar");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/comandoscelular", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Celular") == 1)
		{
			SendClientMessage(playerid, Verde, "-- Menu celular --.");
			SendClientMessage(playerid, Amarelo, "/ligar [ID] para ligar.");
			SendClientMessage(playerid, Amarelo, "/atender para atender.");
			SendClientMessage(playerid, Amarelo, "/ignorar para não atender.");
			SendClientMessage(playerid, Amarelo, "/desligar para desligar.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, " Você precisa de um celular.");
		}
		return 1;
	}

	if(!strcmp(cmd, "/ligar", true))
	{
		tmmp2 = strtok(cmdtext, idx);
		docommand = playerid;
		id2 = strval(tmmp2);
		new aname[MAX_PLAYER_NAME];
		new nname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(id2, nname, MAX_PLAYER_NAME);
		if(InCall[id2] == 1) return SendClientMessage(gc, RED, "O(A) jogador(a) que você está ligando está ocupado(a)!");
		if(InCall[playerid] == 1) return SendClientMessage(gc, RED, "Você já está em uma chamada!");
		if(GetPlayerState(docommand) == PLAYER_STATE_DRIVER) return SendClientMessage(docommand, RED, "Você não pode dirigir e falar no celular ao mesmo tempo.");
		if(!IsPlayerConnected(id2)) return SendClientMessage(docommand, RED, "Valor inválido, tente novamente!");
		if(IsPlayerNPC(id2)) return SendClientMessage(docommand, RED, "Você não pode ligar para um NPC.");
		if(id2 == playerid) return SendClientMessage(docommand, RED, "Você não pode ligar para si mesmo.");
		if(IsPlayerInAnyVehicle(id2) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
		{
			SendClientMessage(playerid, Vermelho, " A pessoa que voce ligou está dentro de um carro.");
			return 1 ;
		}
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Celular") == 1)
		{
			GetPlayerName(id2, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(dini_Int(file2, "Celular") == 1)
			{
				format(str3, 128, "Você está ligando para %s, aguarde ele(a) atender. tammm... tammm...", GetName(id2));
				SendClientMessage(docommand, WHITE, str3);
				format(str3, 128, "O(A) jogador(a) %s está ligando para você. trim... trim... trim...", GetName(docommand));
				SendClientMessage(id2, WHITE, str3);
				SendClientMessage(id2, BLUEWHITE, "Para atender o telefone use /atender e para recusar a chamada use /ignorar");
				InCall[docommand] = 0, InCall[id2] = 0;
				GetCall[docommand] = 0, GetCall[id2] = 1;
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "O player que você está ligando não tem um celular!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você precisa de um celular!");
		}
		return 1;
	}
	gc = id2; sender = docommand;

	if(!strcmp(cmd, "/ignorar", true))
	{
		if(GetCall[playerid] == 0)return SendClientMessage(playerid, RED, " Você não está recebendo uma chamada.");
		format(str3, 128, " Você não atendeu a chamada de %s.", GetName(sender));
		SendClientMessage(gc,GREEN,str3);
		format(str3, 128, " O player %s não atendeu o telefone.", GetName(gc));
		SendClientMessage(sender, GRAY, str3);
		InCall[sender] = 0, InCall[gc] = 0;
		GetCall[sender] = 0, GetCall[gc] = 0;
		return 1;
	}

	if(!strcmp(cmd, "/atender", true))
	{
		if(IsPlayerInAnyVehicle(playerid) == 1)
		{
			SendClientMessage(playerid, Vermelho, "Você está dentro de um carro e não pode atender.");
			return 1 ;
		}
		if(GetCall[playerid] == 0) return SendClientMessage(playerid, RED, "Você não está recebendo uma chamada.");
		if(InCall[playerid] == 1) return SendClientMessage(playerid, RED, "Seu telefone está tocando. Plinnnn... Plinnnn... Plinnnn...");
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "Você não pode dirigir e falar no celular ao mesmo tempo.");
		format(str3, 128, " Você atendeu o telefonema de %s.", GetName(sender));
		SendClientMessage(gc, GREEN, str3);
		format(str3, 128, " O(A) jogador(a) %s atendeu o telefone.", GetName(gc));
		SendClientMessage(sender, GREEN, str3);
		InCall[sender] = 1, InCall[gc] = 1; GetCall[sender] = 0, GetCall[gc] = 0;
		SetPlayerSpecialAction(sender, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerSpecialAction(gc, SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}

	if(!strcmp(cmd,"/desligar",true))
	{
		if(IsPlayerInAnyVehicle(playerid) == 1)
		{
			SendClientMessage(playerid, Vermelho, "Você está dentro de um carro e não pode desligar.");
			return 1 ;
		}
		if(InCall[gc] == 0) return SendClientMessage(gc, RED, "Você não está em uma chamada agora.");
		if(gc == playerid)
		{
			format(str3, 128, "Voce desligou a ligação com o %s.", GetName(sender));
			SendClientMessage(gc, GREEN, str3);
			format(str3, 128, "O player %s desligou a ligação.", GetName(gc));
			SendClientMessage(sender, GRAY, str3);
			SetPlayerSpecialAction(gc, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(sender, SPECIAL_ACTION_STOPUSECELLPHONE);
			InCall[gc] = 0, GetCall[gc] = 0; InCall[sender] = 0, GetCall[sender] = 0;
		}
		if(sender == playerid)
		{
			format(str3, 128, "Você desligou a chamada com o %s.", GetName(gc));
			SendClientMessage(sender, GREEN, str3);
			format(str3, 128, "O player %s desligou o celular.", GetName(sender));
			SendClientMessage(gc, GRAY, str3);
			SetPlayerSpecialAction(gc, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(sender, SPECIAL_ACTION_STOPUSECELLPHONE);
			InCall[gc] = 0, GetCall[gc] = 0; InCall[sender] = 0, GetCall[sender] = 0;
		}
		return 1;
	}

	if(strcmp(cmd, "/continuar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Continuar") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não tem nova posição salva.");
			SendClientMessage(playerid, Vermelho, "Use /salvar para salvar uma posição.");
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Você está dentro de um carro.");
			}
			else
			{
				dini_IntSet(file, "Continuar", 0);
				SetPlayerInterior(playerid, dini_Int(file, "ContinuarI"));
				SetPlayerPos(playerid, dini_Int(file, "ContinuarX"), dini_Int(file, "ContinuarY"), dini_Int(file, "ContinuarZ"));
				SendClientMessage(playerid, Azul, "Você foi até sua posição salva.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/veiculosa", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos A ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " AT-400: 577 || Andromada: 592");
		SendClientMessage(playerid, COLOR_WHITE, " Admiral: 445 || Alpha: 602 || Ambulan: 416");
		SendClientMessage(playerid, COLOR_WHITE, " Artict1: 435 || Artict2: 450");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos A ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosb", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos B ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " BF-400: 581 || Beagle: 511 || Baggage: 485 || Bandito: 568");
		SendClientMessage(playerid, COLOR_WHITE, " Banshee: 429 || Barracks: 433 || Benson: 499 || Bfinject: 424");
		SendClientMessage(playerid, COLOR_WHITE, " Blade: 536 || Blistac: 496 || Bloodra: 504 || Bobcat: 422");
		SendClientMessage(playerid, COLOR_WHITE, " Boxburg: 609 || Boxville: 498 || Bravura: 401 || Broadway: 575");
		SendClientMessage(playerid, COLOR_WHITE, " Buccanee: 518 || Buffalo: 402 || Bullet: 541 || Bagboxb: 607");
		SendClientMessage(playerid, COLOR_WHITE, " Burrito: 482 || Bus: 431 || Bike: 509 || BMX: 481 || Bagboxa: 606");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos B ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosc", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos C ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " CopBike: 523 || Cropdust: 512 || CoastGuard: 472");
		SendClientMessage(playerid, COLOR_WHITE, " Caddy: 457 || Cadrona: 527 || Camper: 483 || Cement: 524");
		SendClientMessage(playerid, COLOR_WHITE, " Cheetah: 415 || Clover: 542 || Club: 589 || Coach: 437");
		SendClientMessage(playerid, COLOR_WHITE, " Combine: 532 || Comet: 480 || CopCarLS: 596 || CopCar: 599");
		SendClientMessage(playerid, COLOR_WHITE, " CopCarSF: 597 || CopCarLV: 598 || Cft30: 578 || Cozer: 486");
		SendClientMessage(playerid, COLOR_WHITE, " Cargobob: 548 || Cabbie: 438");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos C ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosd", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos D ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Dodo: 593 || Dinghy: 473 || Dumper: 406 || Duneride: 573");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos D ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculose", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos E ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Elegant: 507 || Elegy: 562 || Emperor: 585");
		SendClientMessage(playerid, COLOR_WHITE, " Esperant: 419 || Euros: 587 || Enforcer: 427");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos E ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosf", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos F ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Faggio: 462 || FCR-900: 521 || Freeway: 463 || Fbiranch: 490");
		SendClientMessage(playerid, COLOR_WHITE, " Fbitruck: 528 || Feltze: 533 || Firela: 544 || Firetruck: 407");
		SendClientMessage(playerid, COLOR_WHITE, " Flash: 565 || Flatbed: 455 || Forklift: 530 || Fortune: 526");
		SendClientMessage(playerid, COLOR_WHITE, " Freight: 537 || Farmtr1: 610 ");
		SendClientMessage(playerid, verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veículos F ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosg", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos G ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Glendale: 466 || Glenshit: 604 || Greenwoo: 492 ");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos G ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosh", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos H ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Hydra: 520 || Hermes: 474 || Hotdog: 588 ");
		SendClientMessage(playerid, COLOR_WHITE, " Hotrina: 502 || Hotrinb: 503 || Hotring: 594 ");
		SendClientMessage(playerid, COLOR_WHITE, " Hustler: 545 || Huntley: 579 || Hotknife: 434");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos H ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosi", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos I ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Infernus: 411 || Intruder: 546");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos I ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosj", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos J ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Jester: 559 || Journey: 508 ");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos J ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosk", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos K ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Kart: 571");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos K ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosl", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos L ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Launch: 595 || Landstal: 400");
		SendClientMessage(playerid, COLOR_WHITE, " Leviathn: 417 || Linerun: 403");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos L ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosm", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos M ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Marquis: 484 || Majestic: 517 || Manana: 410 ");
		SendClientMessage(playerid, COLOR_WHITE, " Merit: 551 || Mesa: 500 || Moonbeam: 418 || Mowerr: 572");
		SendClientMessage(playerid, COLOR_WHITE, " Mrwhoop: 423 || Mule: 414 || Monster: 444 || MonsterA: 556");
		SendClientMessage(playerid, COLOR_WHITE, " MonsterB: 557 || Mountain Bike: 510 || Maverick: 487");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos M ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosn", true) == 0)
	{
		SendClientMessage(playerid, verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veículos N ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE," NRG-500: 522 || Nevada: 553 || Nebula: 516 || Newsvan: 582");
		SendClientMessage(playerid, verdel,"~~~~~~~~~~~~~~~~~~~~~~~~ Veículos N ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculoso", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos O ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Oceanic: 467");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos O ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosp", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos P ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " PCJ-600: 461 || Pizzaboy: 448 || Predator: 430");
		SendClientMessage(playerid, COLOR_WHITE, " Packer: 443 || Patriot: 470 || Peren: 404 || Petro: 514");
		SendClientMessage(playerid, COLOR_WHITE, " Phoenix: 603 || Picador: 600 || Pony: 413 || Premier: 426");
		SendClientMessage(playerid, COLOR_WHITE, " Previon: 436 || Primo: 547 || Polmav: 497 || Petrotr: 584");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos P ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosq", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos Q ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Quad: 471");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos Q ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosr", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos R ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Rustler: 476 || RC Barron: 464 || Reefer: 453");
		SendClientMessage(playerid, COLOR_WHITE, " Rancher: 489 || Rcbandit: 441 || Rccam: 594 ");
		SendClientMessage(playerid, COLOR_WHITE, " Rctiger: 564 || Rdtrain: 515 || Regina: 479 ");
		SendClientMessage(playerid, COLOR_WHITE, " Remingtn: 534 || Rhino: 432 || Rnchlure: 505 || Rcraider: 465");
		SendClientMessage(playerid, COLOR_WHITE, " Romero: 442 || Rumpo: 440 || Raindanc: 563 || Rcgoblin: 501");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos R ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculoss", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos S ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Sanchez: 468 || Stuntplane: 513 || Skimmer: 460 || Sparrow: 469");
		SendClientMessage(playerid, COLOR_WHITE, " Shamal: 519 || Speeder: 452 || Squalo: 446 || Sabre: 475");
		SendClientMessage(playerid, COLOR_WHITE, " Sadler: 543 || Sadlshit: 605 || Sandking: 495 || Savanna: 567");
		SendClientMessage(playerid, COLOR_WHITE, " Securica: 428 || Sentinel: 405 || Slamvan: 535 || Solair: 458");
		SendClientMessage(playerid, COLOR_WHITE, " Stafford: 580 || Stallion: 439 || Stratum: 561 || Stretch: 409 ");
		SendClientMessage(playerid, COLOR_WHITE, " Sultan: 560 || Sunrise: 550 || Supergt: 506 || Swatvan: 601 ");
		SendClientMessage(playerid, COLOR_WHITE, " Sweeper: 574 || Streak: 538 || Streakc: 570 || Seasparr: 447");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos S ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculost", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos T ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Tropic: 454 || Tahoma: 566 || Tampa: 499 || Taxi: 420");
		SendClientMessage(playerid, COLOR_WHITE, " Topfun: 459 || Tornado: 576 || Towtruck: 525");
		SendClientMessage(playerid, COLOR_WHITE, " Trash: 408 || Tug: 583 || Turismo: 451 || Tram: 449 ");
		SendClientMessage(playerid, COLOR_WHITE, " Tugstair: 608 ");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos T ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosu", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos U ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Uranus: 558 || Utility: 522 || Utiltr1: 611");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos U ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosv", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos V ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Vortex: 539 || Vincent: 540 || Virgo: 491");
		SendClientMessage(playerid, COLOR_WHITE, " Vcnmav: 488 || Voodoo: 412");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos V ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosx", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos X ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Não existe veículos com as inicias da letra 'X'");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos X ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}
	if(strcmp(cmd, "/veiculosz", true) == 0)
	{
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos Z ~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, " Zr350: 477");
		SendClientMessage(playerid, verdel, "~~~~~~~~~~~~~~~~~~~~~~~~ Veículos Z ~~~~~~~~~~~~~~~~~~~~~~~~");
		return 1;
	}

	if(strcmp(cmd, "/conce", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(vip[playerid] == 1 || dini_Int(file, "UsouConce") == 0)
		{
			ShowPlayerDialog(playerid, escolherid, DIALOG_STYLE_INPUT, "Outros", "{FF0000}[x] {00FF00}Os ID's vão de {FF0000}400 {00FF00}a {FF0000}611\n\n{0000FF}O veículo custará $100mil\n\n{00FF00}Digite o ID do veículo que deseja comprar:", "Comprar", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, Amarelo, "Torne-se um 'VIP' para comprar mais veículos assim.");
		}
		return 1;
	}

	if(strcmp(cmd, "/ajuda", true) == 0)
	{
		SendClientMessage(playerid, verdel, "====================== SERVER AJUDA =====================");
		SendClientMessage(playerid, COLOR_WHITE, "» Aqui você terá sua 2ª vida online, viva ela.");
		SendClientMessage(playerid, COLOR_WHITE, "» Adquira uma carteira de trabalho na delegacia.");
		SendClientMessage(playerid, COLOR_WHITE, "» Pegue um emprego na prefeitura de sua cidade.");
		SendClientMessage(playerid, COLOR_WHITE, "» Compre roupas em uma loja ou de algum(a) vendedor(a).");
		SendClientMessage(playerid, COLOR_WHITE, "» Abra uma conta no banco para gerenciar seu dinheiro.");
		SendClientMessage(playerid, verdel, "====================== SERVER AJUDA =====================");
		return 1;
	}

	if(strcmp(cmd, "/regras", true) == 0)
	{
		ShowPlayerDialog(playerid, Regras, DIALOG_STYLE_MSGBOX, "Regras", "{33AAFF}1ª Evite insultar, ofender, usar de meios para prejudicar outros jogadores.\n{33AA33}2ª Não tente usar Xiters ou qualquer Mode para ter beneficios.\n{33AAFF}3ª Não abuse de tais comandos de profissões existentes.\n{33AA33}4ª O descomprimento de regras resultará em Banimento.\n{33AAFF}5ª Seja honesto e jogue limpo conosco.", "Aceitar", "Recusar");
		return 1;
	}

	if(strcmp(cmd, "/tutorial", true) == 0)
	{
		DynTutorialStart(playerid);
		return 1;
	}

	if(strcmp(cmd, "/ajudalevel", true) == 0)
	{
		SendClientMessage(playerid, 0xFF8000AA, "======================== Ajuda Level ========================");
		SendClientMessage(playerid, COLOR_WHITE, "» Para você ganhar level(s) precisa juntar "#MAX_PLAYER_EXP" EXP's.");
		SendClientMessage(playerid, COLOR_WHITE, "» A cada "#TEMPO_EXP" minutos jogando você ganhará "#EXP_POR_TEMPO" EXP's.");
		SendClientMessage(playerid, COLOR_WHITE, "» Juntando "#MAX_PLAYER_EXP" EXP's você ganhará "#LEVEL_POR_EXP" level(s).");
		SendClientMessage(playerid, COLOR_WHITE, "» Você precisa ir estudar para ganhar "#ESTUDO_POR_TEMPO" de estudo por aula.");
		SendClientMessage(playerid, COLOR_WHITE, "» Veja seu level em /verlevel");
		SendClientMessage(playerid, 0xFF8000AA, "======================== Ajuda Level ========================");
		return 1;
	}

	if(strcmp(cmd, "/data", true) == 0)
	{
		new hour, minute, second;
		new year, month, day;
		getdate(year, month, day);
		gettime(hour, minute, second);
		format(string, sizeof(string), "%d/%d/%d~n~%d:%d:%d", day, month, year, hour, minute, second);
		GameTextForPlayer(playerid, string, 5000, 1);
		return 1;
	}

/*
		Dten's Server
			By Dyow_Deyv

		Hospedagem SA:MP com Qualidade, Organização...
			É com: www.minigun.com.br
*/

	if(strcmp("/comandos", cmdtext, true, 10) == 0)
	{
		new strcmd[1000];
		strcat(strcmd, "» /animes /dance /concessionaria/teleportes /data /ausentes\n", sizeof(strcmd));
		strcat(strcmd, "» /regras /creditos /ajudalevel /vips /afk /on\n", sizeof(strcmd));
		strcat(strcmd, "» /procurados /profissao /saldocell /horarios\n", sizeof(strcmd));
		strcat(strcmd, "» /transferir /trocarsenha /trocarnick /mudarsexo\n", sizeof(strcmd));
		strcat(strcmd, "» /minhaprop /tutorial /ajudaprop /ajudacasa\n", sizeof(strcmd));
		strcat(strcmd, "» /minhacasa /meucarro /conce /p /verlevel\n", sizeof(strcmd));
		ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos Úteis - ::.", strcmd, "OK", "");
		return 1;
	}


	if(strcmp("/compraradm", cmdtext, true, 10) == 0)
	{
		new strcmd[1000];
		strcat(strcmd, "» Preço Do ADM LV 3 10,00 Reais Por Mes !\n", sizeof(strcmd));
		strcat(strcmd, "» Preço Do ADM LV 5 20 Reais adm lv 5 + RCON 30Reais\n", sizeof(strcmd));
		strcat(strcmd, "» Para Mais Detalhes Adicione Msn Do Server!\n", sizeof(strcmd));
		strcat(strcmd, "» msn : nome005@hotmail.com\n", sizeof(strcmd));
		ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Comandos Úteis - ::.", strcmd, "OK", "");
		return 1;
    }

	if(strcmp(cmdtext, "/profissao", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Desempregado)
		{
			SendClientMessage(playerid, Verde, "Desempregado");
		}
		if(dini_Int(file, "Profissao") == MotoristaP)
		{
			SendClientMessage(playerid, C_MotoristaP, "~~~~~~~~~~~~~~ Motorista Particular ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, 0xFFFFFFAA, "Arrume um patrão e cobre pelo seu serviço.");
			SendClientMessage(playerid, 0xFFFFFFAA, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_MotoristaP, "~~~~~~~~~~~~~~ Motorista Particular ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Guarda)
		{
			SendClientMessage(playerid, C_Guarda, "~~~~~~~~~~~~~~ Guarda ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Guarda, "~~~~~~~~~~~~~~ Guarda ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Policial_R)
		{
			SendClientMessage(playerid, C_PR, "~~~~~~~~~~~~~~ Policial Rodoviário ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_PR, "~~~~~~~~~~~~~~ Policial Rodoviário ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Policial_M)
		{
			SendClientMessage(playerid, C_PM, "~~~~~~~~~~~~~~ Policial Militar ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_PM, "~~~~~~~~~~~~~~ Policial Militar ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Policial_C)
		{
			SendClientMessage(playerid, C_PC, "~~~~~~~~~~~~~~ Policial Civil ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_PC, "~~~~~~~~~~~~~~ Policial Civil ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Policial_F)
		{
			SendClientMessage(playerid, C_PF, "~~~~~~~~~~~~~~ Policial Federal ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_PF, "~~~~~~~~~~~~~~ Policial Federal ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Delegado)
		{
			SendClientMessage(playerid, C_Delegado, "~~~~~~~~~~~~~~ Delegado ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_Delegado, "~~~~~~~~~~~~~~ Delegado ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Bope)
		{
			SendClientMessage(playerid, C_Bope, "~~~~~~~~~~~~~~ B.O.P.E ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_Bope, "~~~~~~~~~~~~~~ B.O.P.E ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Swat)
		{
			SendClientMessage(playerid, C_Swat, "~~~~~~~~~~~~~~ SWAT ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_Swat, "~~~~~~~~~~~~~~ SWAT ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Espião)
		{
			SendClientMessage(playerid, C_Espião, "~~~~~~~~~~~~~~ Espião ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_Espião, "~~~~~~~~~~~~~~ Espião ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Traficante)
		{
			SendClientMessage(playerid, C_Traficante, "~~~~~~~~~~~~~~ Traficante de Armas ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/venderak [id]");
			SendClientMessage(playerid, Branco, "/venderm4 [id]");
			SendClientMessage(playerid, Branco, "/venderswanoff [id]");
			SendClientMessage(playerid, Branco, "/vendersniper [id]");
			SendClientMessage(playerid, Branco, "/vendertec [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Traficante, "~~~~~~~~~~~~~~ Traficante de Armas ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Assasino)
		{
			SendClientMessage(playerid, C_Assasino, "~~~~~~~~~~~~~~ Assasino ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Cobre por cada assasinato.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Assasino, "~~~~~~~~~~~~~~ Assasino ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Terrorista)
		{
			SendClientMessage(playerid, C_Terrorista, "~~~~~~~~~~~~~~ Terrorista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/terror [texto]");
			SendClientMessage(playerid, Branco, "/plantarbomba");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Terrorista, "~~~~~~~~~~~~~~ Terrorista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Sequestrador)
		{
			SendClientMessage(playerid, C_Sequestrador, "~~~~~~~~~~~~~~ Sequestrador ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/avisar [texto]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/sequestrar - /liberar");
			SendClientMessage(playerid, C_Sequestrador, "~~~~~~~~~~~~~~ Sequestrador ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == AssasinoProfissional)
		{
			SendClientMessage(playerid, C_AssasinoP, "~~~~~~~~~~~~~~ Assasino Profissional ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Cobre por cada assasinato.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_AssasinoP, "~~~~~~~~~~~~~~ Assasino Profissional ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Jornalista)
		{
			SendClientMessage(playerid, C_Jornalista, "~~~~~~~~~~~~~~ Jornalista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/noticiar [texto]");
			SendClientMessage(playerid, Branco, "/convidarent [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Jornalista, "~~~~~~~~~~~~~~ Jornalista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Fotografo)
		{
			SendClientMessage(playerid, C_Fotografo, "~~~~~~~~~~~~~~ Fotografo ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Tire fotos para o jornal San Andreas.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Fotografo, "~~~~~~~~~~~~~~ Fotografo ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Reporter)
		{
			SendClientMessage(playerid, C_Reporter, "~~~~~~~~~~~~~~ Reporter ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/noticiar [texto]");
			SendClientMessage(playerid, Branco, "/convidarent [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Reporter, "~~~~~~~~~~~~~~ Reporter ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Ancora)
		{
			SendClientMessage(playerid, C_Ancora, "~~~~~~~~~~~~~~ Ancora ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/noticiar [texto]");
			SendClientMessage(playerid, Branco, "/convidarent [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Ancora, "~~~~~~~~~~~~~~ Ancora ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Meteorologista)
		{
			SendClientMessage(playerid, C_Meteoro, "~~~~~~~~~~~~~~ Meteorologista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/previsao [previsão]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Meteoro, "~~~~~~~~~~~~~~ Meteorologista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Mecanico)
		{
			SendClientMessage(playerid, C_Mecanico, "~~~~~~~~~~~~~~ Oficina ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pintar [cor1] [cor2]");
			SendClientMessage(playerid, Branco, "/vcontrole");
			SendClientMessage(playerid, Branco, "/reparar");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Mecanico, "~~~~~~~~~~~~~~ Oficina ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Rapper)
		{
			SendClientMessage(playerid, C_Rapper, "~~~~~~~~~~~~~~ Rapper ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/rimar [texto]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Rapper, "~~~~~~~~~~~~~~ Rapper ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == VendedorSkin)
		{
			SendClientMessage(playerid, C_VendedorSkin, "~~~~~~~~~~~~~~ Vendedor(a) de Skins ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/venderskin [id] [skin]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_VendedorSkin, "~~~~~~~~~~~~~~ Vendedor(a) de Skins ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == VendedorCarro)
		{
			SendClientMessage(playerid, C_VendedorCarro, "~~~~~~~~~~~~~~ Vendedor(a) de Carros ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/setcar [id] [cor1] [cor2]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_VendedorCarro, "~~~~~~~~~~~~~~ Vendedor(a) de Carros ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Frentista)
		{
			SendClientMessage(playerid, C_Frentista, "~~~~~~~~~~~~~~ Frentista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/darcomb [id] [litros]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Frentista, "~~~~~~~~~~~~~~ Frentista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Taxista)
		{
			SendClientMessage(playerid, C_Taxista, "~~~~~~~~~~~~~~ Taxista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/ttaxi [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Taxista, "~~~~~~~~~~~~~~ Taxista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Paramedico)
		{
			SendClientMessage(playerid, C_Paramedico, "~~~~~~~~~~~~~~ Paramédico ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/curativo [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Paramedico, "~~~~~~~~~~~~~~ Paramédico ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == FBI)
		{
			SendClientMessage(playerid, C_FBI, "~~~~~~~~~~~~~~ FBI ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_FBI, "~~~~~~~~~~~~~~ FBI ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Interpol)
		{
			SendClientMessage(playerid, C_Interpol, "~~~~~~~~~~~~~~ Interpol ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_Interpol, "~~~~~~~~~~~~~~ Interpol ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Aposentado)
		{
			SendClientMessage(playerid, C_Aposentado, "~~~~~~~~~~~~~~ Aposentado ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Você está cansado da vida e não trabalha só recebe.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Aposentado, "~~~~~~~~~~~~~~ Aposentado ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Advogado)
		{
			SendClientMessage(playerid, C_Advogado, "~~~~~~~~~~~~~~ Advogado ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/soltar [id]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Advogado, "~~~~~~~~~~~~~~ Advogado ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == GuardaCostas)
		{
			SendClientMessage(playerid, C_GuardaCostas, "~~~~~~~~~~~~~~ Guarda Costas ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Encontre um patrão e cobre pelo seu serviço.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_GuardaCostas, "~~~~~~~~~~~~~~ Guarda Costas ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Corredor)
		{
			SendClientMessage(playerid, C_Corredor, "~~~~~~~~~~~~~~ Corredor de Rua ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/corrida [texto]");
			SendClientMessage(playerid, Branco, "Anuncie alguma corrida.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Corredor, "~~~~~~~~~~~~~~ Corredor de Rua ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Prostituta)
		{
			SendClientMessage(playerid, C_Prostituta, "~~~~~~~~~~~~~~ Prostituta ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Cobre por cada encontro.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Prostituta, "~~~~~~~~~~~~~~ Prostituta ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Promoter)
		{
			SendClientMessage(playerid, C_Promoter, "~~~~~~~~~~~~~~ Promoter ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/festa [texto] - Anuncie uma festa.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Promoter, "~~~~~~~~~~~~~~ Promoter ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == SegVila)
		{
			SendClientMessage(playerid, C_SegVila, "~~~~~~~~~~~~~~ Segurança da Vila ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_SegVila, "~~~~~~~~~~~~~~ Segurança da Vila ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Assaltante)
		{
			SendClientMessage(playerid, C_SegVila, "~~~~~~~~~~~~~~ Assaltante ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Seu trabalho e assaltar bancos!");
			SendClientMessage(playerid, Branco, "/amarrar [id]");
			SendClientMessage(playerid, Branco, "/desamarrar [id]");
			SendClientMessage(playerid, C_SegVila, "~~~~~~~~~~~~~~ Assaltante ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Bibliotecario)
		{
			SendClientMessage(playerid, C_Bibliotecario, "~~~~~~~~~~~~~~ Bibliotecário(a) ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Você pode cuidar da biblioteca!");
			SendClientMessage(playerid, Branco, "/abrirbi");
			SendClientMessage(playerid, Branco, "/fecharbi");
			SendClientMessage(playerid, C_Bibliotecario, "~~~~~~~~~~~~~~ Bibliotecário(a) ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == TraficanteD)
		{
			SendClientMessage(playerid, C_TraficanteD, "~~~~~~~~~~~~~~ Traficante ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/ofmaconha [id]");
			SendClientMessage(playerid, Branco, "/ofcrack [id]");
			SendClientMessage(playerid, Branco, "/ofcocaina [id]");
			SendClientMessage(playerid, C_TraficanteD, "~~~~~~~~~~~~~~ Traficante ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Prefeito)
		{
			SendClientMessage(playerid, C_Prefeito, "~~~~~~~~~~~~~~ Prefeito ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/discurso");
			SendClientMessage(playerid, Branco, "/soltar [id]");
			SendClientMessage(playerid, C_Prefeito, "~~~~~~~~~~~~~~ Prefeito ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Presidente)
		{
			SendClientMessage(playerid, C_Presidente, "~~~~~~~~~~~~~~ Presidente ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/discursar");
			SendClientMessage(playerid, Branco, "/soltar [id]");
			SendClientMessage(playerid, C_Presidente, "~~~~~~~~~~~~~~ Presidente ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == vice/presidente)
		{
			SendClientMessage(playerid, C_vice/presidente, "~~~~~~~~~~~~~~ vice/presidente ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/abencoar [id]");
			SendClientMessage(playerid, C_vice/presidente, "~~~~~~~~~~~~~~ vice/presidente ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Mendigo)
		{
			SendClientMessage(playerid, C_Mendigo, "~~~~~~~~~~~~~~ Mendigo ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, 0xFFFFFFAA, "/esmola - Peça uma esmola.");
			SendClientMessage(playerid, 0xFFFFFFAA, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Mendigo, "~~~~~~~~~~~~~~ Mendigo ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == LSPD)
		{
			SendClientMessage(playerid, C_LSPD, "~~~~~~~~~~~~~~ LSPD ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/pegararmas [id]");
			SendClientMessage(playerid, Branco, "/algemar [id]");
			SendClientMessage(playerid, Branco, "/desalgemar [id]");
			SendClientMessage(playerid, Branco, "/prender [id]");
			SendClientMessage(playerid, Branco, "/multar [id] [quantia]");
			SendClientMessage(playerid, Branco, "/ad - /fd");
			SendClientMessage(playerid, Branco, "/ad2 - /fd2");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, Branco, "/paradoai [id]");
			SendClientMessage(playerid, C_LSPD, "~~~~~~~~~~~~~~ LSPD ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Pedreiro)
		{
			SendClientMessage(playerid, C_Pedreiro, "~~~~~~~~~~~~~~ Pedreiro ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/reformar - Para reformar alguma coisa.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Pedreiro, "~~~~~~~~~~~~~~ Pedreiro ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Gari)
		{
			SendClientMessage(playerid, C_Gari, "~~~~~~~~~~~~~~ Gari ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/catarlixo - Para limpar a rua.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Gari, "~~~~~~~~~~~~~~ Gari ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Lixeiro)
		{
			SendClientMessage(playerid, C_Lixeiro, "~~~~~~~~~~~~~~ Lixeiro ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/catarlixo - Para pegar o lixo da rua.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Lixeiro, "~~~~~~~~~~~~~~ Lixeiro ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Temac)
		{
			SendClientMessage(playerid, C_Temac, "~~~~~~~~~~~~~~ Temac ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/trazer - Para dar assistencia a alguma pessoa.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Temac, "~~~~~~~~~~~~~~ Temac ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Correio)
		{
			SendClientMessage(playerid, C_Correio, "~~~~~~~~~~~~~~ Correios ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/publicar - Para publicar alguma coisa.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Correio, "~~~~~~~~~~~~~~ Correios ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Estudante)
		{
			SendClientMessage(playerid, C_Estudante, "~~~~~~~~~~~~~~ Estudante ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/horarios - Para ver os horários de funcionamento da biblioteca.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Estudante, "~~~~~~~~~~~~~~ Estudante ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Flanelinha)
		{
			SendClientMessage(playerid, C_Flanelinha, "~~~~~~~~~~~~~~ Flanelinha ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/vigiar - Para vigiar o carro de alguem.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Flanelinha, "~~~~~~~~~~~~~~ Flanelinha ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Cantor)
		{
			SendClientMessage(playerid, C_Cantor, "~~~~~~~~~~~~~~ Cantor(a) ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/cantar - Para cantar à todos do server.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Cantor, "~~~~~~~~~~~~~~ Cantor(a) ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Poeta)
		{
			SendClientMessage(playerid, C_Poeta, "~~~~~~~~~~~~~~ Poeta ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/poema - Para publicar um de seus poemas.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Poeta, "~~~~~~~~~~~~~~ Poeta ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Empregada)
		{
			SendClientMessage(playerid, C_Empregada, "~~~~~~~~~~~~~~ Empregada Doméstica ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/limparcasa - Encontre algum(a) patrão(oa) para te contratar.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Empregada, "~~~~~~~~~~~~~~ Empregada Doméstica ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == YKZ)
		{
			SendClientMessage(playerid, C_YKZ, "~~~~~~~~~~~~~~ Yakuza ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/venderak [id]");
			SendClientMessage(playerid, Branco, "/venderm4 [id]");
			SendClientMessage(playerid, Branco, "/venderswanoff [id]");
			SendClientMessage(playerid, Branco, "/vendersniper [id]");
			SendClientMessage(playerid, Branco, "/vendertec [id]");
			SendClientMessage(playerid, Branco, "/plantarbomba");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_YKZ, "~~~~~~~~~~~~~~ Yakuza ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == MRN)
		{
			SendClientMessage(playerid, C_MRN, "~~~~~~~~~~~~~~ Marines ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Obedeça as ordens do General MacTavish.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_MRN, "~~~~~~~~~~~~~~ Marines ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Mafia)
		{
			SendClientMessage(playerid, C_Mafia, "~~~~~~~~~~~~~~ Máfia ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/venderak [id]");
			SendClientMessage(playerid, Branco, "/venderm4 [id]");
			SendClientMessage(playerid, Branco, "/venderswanoff [id]");
			SendClientMessage(playerid, Branco, "/vendersniper [id]");
			SendClientMessage(playerid, Branco, "/vendertec [id]");
			SendClientMessage(playerid, Branco, "/sequestrar - /liberar");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Mafia, "~~~~~~~~~~~~~~ Máfia ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Drifter)
		{
			SendClientMessage(playerid, C_Drifter, "~~~~~~~~~~~~~~ Drifter King ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Melhore seu drift ao extremo.");
			SendClientMessage(playerid, Branco, "/dk - Anuncie um drift aqui.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Drifter, "~~~~~~~~~~~~~~ Drifter King ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Professor)
		{
			SendClientMessage(playerid, C_Professor, "~~~~~~~~~~~~~~ Professor ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/darestudo [id] [estudo]");
			SendClientMessage(playerid, Branco, "/abrirbi - /fecharbi");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Professor, "~~~~~~~~~~~~~~ Professor ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Empregador)
		{
			SendClientMessage(playerid, C_Empregador, "~~~~~~~~~~~~~~ Empregador ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/convidarent [id]");
			SendClientMessage(playerid, Branco, "/setprof [id] [prof]");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Empregador, "~~~~~~~~~~~~~~ Empregador ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == AtiradorElite)
		{
			SendClientMessage(playerid, C_AtiradorElite, "~~~~~~~~~~~~~~ Atirador Elite ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Os comandos se encontram em construção.");
			SendClientMessage(playerid, Branco, " ");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_AtiradorElite, "~~~~~~~~~~~~~~ Atirador Elite ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Ninja)
		{
			SendClientMessage(playerid, C_Ninja, "~~~~~~~~~~~~~~ Ninja ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Especialista em mortes silênciadas.");
			SendClientMessage(playerid, Branco, "/na - Anúncie sua profissão.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Ninja, "~~~~~~~~~~~~~~ Ninja ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Maquinista)
		{
			SendClientMessage(playerid, C_Maquinista, "~~~~~~~~~~~~~~ Maquinista ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "Pegue o trem para fazer seus serviços.");
			SendClientMessage(playerid, Branco, "/cp - Chat Profissão.");
			SendClientMessage(playerid, C_Maquinista, "~~~~~~~~~~~~~~ Maquinista ~~~~~~~~~~~~~~");
		}
		if(dini_Int(file, "Profissao") == Caminhoneiro)
		{
			SendClientMessage(playerid, C_Caminhoneiro, "~~~~~~~~~~~~~~ Helper ~~~~~~~~~~~~~~");
			SendClientMessage(playerid, Branco, "/trazerh [ID] , /ir [ID] /dartodas[ID]");
			SendClientMessage(playerid, Branco, "/punir /kickh /soltar /reparar /repararp [ID] /tunar");
			SendClientMessage(playerid, C_Caminhoneiro, "~~~~~~~~~~~~~~ Helper ~~~~~~~~~~~~~~");
		}
		return 1;
	}

	if(!strcmp(cmd, "/comemorar", true))
	{
		if(pAdmin[playerid] > 0 || vip[playerid] == 1)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetTimerEx("CriarExplosao", 1000, false, "fffdf", x+1, y+1, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 2000, false, "fffdf", x+5, y+5, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 3000, false, "fffdf", x+9, y+9, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 4000, false, "fffdf", x+1, y+1, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 5000, false, "fffdf", x+5, y+5, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 6000, false, "fffdf", x+9, y+9, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 7000, false, "fffdf", x+1, y+1, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 8000, false, "fffdf", x+5, y+5, z+12, 10, 100.0);
			SetTimerEx("CriarExplosao", 9000, false, "fffdf", x+9, y+9, z+12, 10, 100.0);
			GameTextForPlayer(playerid, "~r~FOGOS ~y~DE ~b~ARTIFICIO", 1000, 4);
		}
		return 1;
	}

	if(!strcmp(cmd, "/plantarbomba", true))
	{
		if(pbomba[playerid] == 0)
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "Profissao") == Terrorista || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessage(playerid, Vermelho, "Você não pode plantar uma bomba dentro do veículo.");
				}
				else
				{
					new dinid, Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					pbomba[playerid] = 1;

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					#endif

					dinid = CreateDynamicObject(1252, x, y, z-0.8, 0, 0, 0, -1, -1, -1, 200.0);
					SetTimerEx("DestruirObjeto", 8000, false, "d", dinid);
					SetTimerEx("PlantouBomba", 7000, false, "i", playerid);
					SetTimerEx("CriarExplosao", 8000, false, "fffdf", x, y, z-0.8, 7, 50.0);
					SetTimerEx("CriarExplosao", 8000, false, "fffdf", x, y, z-0.8, 10, 50.0);
					SetTimerEx("CriarExplosao", 8000, false, "fffdf", x, y, z-0.8, 2, 50.0);
					GameTextForPlayer(playerid, "~r~BOMBA ~b~PLANTADA", 1000, 4);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Verde, "Plante uma bomba por vez.");
		}
		return 1;
	}

	if(strcmp(cmd, "/taxi", true) == 0)
	{
		new tmp[256];
		new aname[MAX_PLAYER_NAME];
		strmid(tmp, cmdtext, 5, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /taxi [lugar]");
		}
		else
		{
			SendClientMessage(playerid, Amarelo, "Os taxistas foram informados, aguarde uma resposta.");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(file, sizeof(file), PASTA_CONTAS, aname);
					if(dini_Int(file, "Profissao") == Taxista || dini_Int(file, "aAdmin") == 1)
					{
						format(string, sizeof(string), "%s pediu um Taxi (») Local: %s (») Atenda-o e não esqueça de ligar o taximetro.", aname, tmp);
						SendClientMessage(i, Amarelo, string);
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/190", true) == 0)
	{
		new tmp[256];
		new aname[MAX_PLAYER_NAME];
		strmid(tmp, cmdtext, 4, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /190 [denuncia]");
		}
		else
		{
			SendClientMessage(playerid, Blue, "Os policiais foram informados, aguarde uma resposta.");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(file, sizeof(file), PASTA_CONTAS, aname);
					if(dini_Int(file, "Profissao") == Guarda || dini_Int(file, "Profissao") == Policial_R  || dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD)
					{
						format(string, sizeof(string), "%s fez uma denuncia: %s (») Atenda-o!", aname, tmp);
						SendClientMessage(i, Blue, string);
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/193", true) == 0)
	{
		new tmp[256];
		new aname[MAX_PLAYER_NAME];
		strmid(tmp, cmdtext, 4, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /193 [local]");
		}
		else
		{
			SendClientMessage(playerid, Blue, "Os paramédicos foram informados, aguarde uma resposta.");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
					format(file, sizeof(file), PASTA_CONTAS, aname);
					if(dini_Int(file, "Profissao") == Paramedico || dini_Int(file, "Profissao") == Guarda || dini_Int(file, "Profissao") == Policial_R  || dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
					{
						format(string, sizeof(string), "%s está pedindo uma ambulância (») Local: %s (») Atenda-o o mais rápido possível!", aname, tmp);
						SendClientMessage(i, Blue, string);
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/curativo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Paramedico || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /curativo [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não consegue curar você mesmo.");
				return 1;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 21)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Missão cumprida!");
					SendClientMessage(plid, COLOR_WHITE, "Um paramédico aplicou uma injeção e você melhoro!");
					SetPlayerHealth(plid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para aplicar o curativo!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas paramédicos podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/adminsrcon", true) == 0)
	{
		new Jogador[24], count = 0, random1, msg[120];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][SCON] == true)
			{
				GetPlayerName(i, Jogador, 24);
				random1 = random(sizeof(CORESTEXT));
				format(msg,sizeof(msg), "{%s}» %s (ID: %d)\n", CORESTEXT[random1], Jogador, i);
				strcat(string, msg, sizeof(string));
				count++;
			}
		}
		if(count == 0)
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - RCON's Online - ::.", "Não há nenhum ADM RCON online no momento.", "OK", "");
		}
		else
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - RCON's Online - ::.", string, "OK", "");
		}
		return 1;
	}

/*
		Dten's Server
			By Dyow_Deyv

		Hospedagem SA:MP com Qualidade, Organização...
			É com: www.minigun.com.br
*/

	if(strcmp("/creditos", cmdtext, true, 10) == 0)
	{
		ShowPlayerDialog(playerid, Creditos, DIALOG_STYLE_MSGBOX, "Creditos", "Dono: podecafe\nServidor em Desenvolvimento\nNada de Forum por hora!.", "OK", "");
		return 1;
	}

	if(strcmp(cmd, "/setarvip", true) == 0)
	{
		if(!PlayerInfo[playerid][SCON] == true) return 1;
		new tmp[256], plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0x008040AA, "Use: /setarvip [id]");
			return 1;
		}
		plid = strval(tmp);
		if(IsPlayerConnected(plid))
		{
			format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(plid));
			dini_IntSet(file2, "VIP", 1);
			dini_IntSet(file2, "UsouConce", 0);
			SpawnPlayer(plid);
			SendClientMessage(playerid, 0x00FF00AA, "VIP setado com sucesso!");
			SendClientMessage(plid, 0x00FF00AA, "Um admin setou VIP para você, aproveite!");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/tirarvip", true) == 0)
	{
		if(!PlayerInfo[playerid][SCON] == true) return 1;
		new tmp[256], plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0x008040AA, "Use: /tirarvip [id]");
			return 1;
		}
		plid = strval(tmp);
		if(IsPlayerConnected(plid))
		{
			format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(plid));
			dini_IntSet(file2, "VIP", 0);
			SpawnPlayer(plid);
			SendClientMessage(playerid, 0x00FF00AA, "VIP tirado com sucesso!");
			SendClientMessage(plid, 0x00FF00AA, "Um admin tirou VIP de você.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/tirarvipdetodos", true) == 0)
	{
		if(!PlayerInfo[playerid][SCON] == true) return 1;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(vip[i] == 1)
				{
					format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(i));
					dini_IntSet(file2, "VIP", 0);
					SpawnPlayer(i);
				}
			}
		}
		SendClientMessage(playerid, Verde, "Concluído somente para os Online!");
		return 1;
	}

	if(strcmp(cmdtext, "/eusouvip", true) == 0)
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é um player VIP!");
			return 1;
		}
		if(vip[playerid] == 1)
		{
			new pname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "Eu %s sou 'VIP' então me chupa!", pname);
			SendClientMessageToAll(roxo, string);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vips", true) == 0)
	{
		new Jogador[24], count = 0, random1, msg[120];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && vip[i])
			{
				GetPlayerName(i, Jogador, 24);
				random1 = random(sizeof(CORESTEXT));
				format(msg, sizeof(msg), "{%s}» %s (ID: %d)\n", CORESTEXT[random1], Jogador, i);
				strcat(string, msg, sizeof(string));
				count++;
			}
		}
		if(count == 0)
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - VIP's Online - ::.", "Nenhum VIP está online no momento.", "OK", "");
		}
		else
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - VIP's Online - ::.", string, "OK", "");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/npcs", true) == 0)
	{
		new Jogador[24], count = 0, random1, msg[120];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsPlayerNPC(i))
			{
				GetPlayerName(i, Jogador, 24);
				random1 = random(sizeof(CORESTEXT));
				format(msg, sizeof(msg), "{%s}» %s (ID: %d)\n", CORESTEXT[random1], Jogador, i);
				strcat(string, msg, sizeof(string));
				count++;
			}
		}
		if(count == 0)
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - NPC's Online - ::.", "Nenhum NPC está conectado no momento.", "OK", "");
		}
		else
		{
			ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - NPC's Online - ::.", string, "OK", "");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/casasdeletadas", true) == 0)
	{
		new count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "=== Casas Deletadas ===");
		for(new c = 0; c < MAX_CASAS; c++)
		{
			format(string, sizeof(string), PASTA_CASAS, c);
			if(dini_Int(string, "TDono") == 3)
			{
				format(msg, sizeof(msg), "» Casa ID: %d - Deletada", c);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Nenhuma casa foi deletada!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/propsdeletadas", true) == 0)
	{
		new count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, "=== Propriedades Deletadas ===");
		for(new p = 0; p < MAX_PROPS; p++)
		{
			format(string, sizeof(string), PASTA_PROPS, p);
			if(dini_Int(string, "TDono") == 3)
			{
				format(msg, sizeof(msg), "» Prop ID: %d - Deletada", p);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Nenhuma propriedade foi deletada!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/trocarnick", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		if(PlayerInfo[playerid][Logged] == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não está logado(a).");
			return 1;
		}
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "MN") == 1)
		{
			trocandonick[playerid] = 1;
			ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "Digite seu novo nick:", "Mudar", "Sair");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Peça para um ADM te liberar a mudar de nick!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/trocarsenha", true) == 0)
	{
		if(PlayerInfo[playerid][Logged] == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não está logado(a).");
			return 1;
		}
		ShowPlayerDialog(playerid, mudarsenha, DIALOG_STYLE_PASSWORD, "Trocando Senha", "Digite sua nova senha:", "Mudar", "Sair");
		return 1;
	}

	if(strcmp(cmdtext, "/mudarsexo", true) == 0)
	{
		if(PlayerInfo[playerid][Logged] == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não está logado(a).");
			return 1;
		}
		ShowPlayerDialog(playerid, skinnovato, DIALOG_STYLE_MSGBOX, "Gênero", "Qual é seu sexo?\n\n", "Masculino", "Feminino");
		return 1;
	}

	if(strcmp(cmdtext, "/playstream", true) == 0)
	{
		#if defined AudioStreamUser
		ShowPlayerDialog(playerid, streamlink, DIALOG_STYLE_LIST, WHOMADETHIS, "Reproduzir para Mim\nFReproduzir para Outro\n{46BEE6}Reproduzir na minha Localização\n{ED954E}Reproduzir para Todos", "OK", "Cancel");
		#else
		SendClientMessage(playerid, GREEN, "Comando desativado temporáriamente.");
		#endif

		return 1;
	}

	if(strcmp(cmdtext, "/stopstream", true) == 0)
	{
		#if defined AudioStreamUser
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, GREEN, "Você parou o streaming de audio.");
		#else
		SendClientMessage(playerid, GREEN, "Comando desativado temporáriamente.");
		#endif

		return 1;
	}

	if(strcmp(cmdtext, "/radio", true) == 0)
	{
		#if defined AudioStreamUser
		PlayerInitDialog(playerid);
		#else
		SendClientMessage(playerid, GREEN, "Comando desativado temporáriamente.");
		#endif

		return 1;
	}

	if(strcmp(cmdtext, "/comandosmp3", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "MP3") == 1)
		{
			SendClientMessage(playerid, Verde, "Digite /playmp3 para começar e /stopmp3 para parar.");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem um mp3 para usar seu manual.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/playmp3", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "MP3") == 1)
		{
			ShowPlayerDialog(playerid, mp3, DIALOG_STYLE_LIST, "Escolher Música", "Música 1\nMúsica 2\nMúsica 3\nMúsica 4\nMúsica 5\nMúsica 6\nMúsica 7\nMúsica 8\nMúsica 9", "OK", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem um mp3 para escutar, você pode comprar um em uma loja de ultilidades.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/stopmp3", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "MP3") == 1)
		{
			#if defined AudioStreamUser
			StopAudioStreamForPlayer(playerid);
			#else
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			PlayerPlaySound(playerid, 1063, X, Y, Z);
			PlayerPlaySound(playerid, 1069, X, Y, Z);
			PlayerPlaySound(playerid, 1077, X, Y, Z);
			PlayerPlaySound(playerid, 1098, X, Y, Z);
			PlayerPlaySound(playerid, 1184, X, Y, Z);
			PlayerPlaySound(playerid, 1186, X, Y, Z);
			PlayerPlaySound(playerid, 1188, X, Y, Z);
			#endif
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem um mp3 para dar stop.");
		}
		return 1;
	}

	if(strcmp(cmd, "/abastecer", true) == 0)
	{
		new tmp[256];
		new quantidade, quantia;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /abastecer [litros]");
			return 1;
		}
		quantidade = strval(tmp);
		if(quantidade <= 0 || GetPlayerGrana(playerid) < quantidade)
		{
			SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente para pagar o frentista.");
			return 1;
		}
		if(AreaPosto[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid) == 1)
			{
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(file, sizeof(file), PASTA_CONCE, carro);
					if(dini_Exists(file))
					{
						if(GetPlayerVehicleID(playerid) == dini_Int(file, "Id"))
						{
							if(quantidade+dini_Int(file, "Combustivel") < MAX_COMB)
							{
								dini_IntSet(file, "Combustivel", dini_Int(file, "Combustivel")+quantidade);

								new engine, lights, alarm, doors, bonnet, boot, objective;
								GetVehicleParamsEx(dini_Int(file, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(dini_Int(file, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

								format(string, sizeof(string), "Você completou seu tanque com %d litro(s) de combustível.", quantidade);
								SendClientMessage(playerid, COLOR_GREEN, string);
								GivePlayerGrana(playerid, -quantidade);
							}
							else if(quantidade+dini_Int(file, "Combustivel"))
							{
								quantia = MAX_COMB-dini_Int(file, "Combustivel");
								dini_IntSet(file, "Combustivel", MAX_COMB);

								new engine, lights, alarm, doors, bonnet, boot, objective;
								GetVehicleParamsEx(dini_Int(file, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(dini_Int(file, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

								format(string, sizeof(string), "Tanque cheio, foram colocados %d litro(s).", quantia);
								SendClientMessage(playerid, COLOR_GREEN, string);
								GivePlayerGrana(playerid, -quantia);
							}
							return 1;
						}
					}
				}
				SendClientMessage(playerid, COLOR_RED, "Você não está em um veículo da Conce.");
			}
			else
			{
				format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(playerid));
				if(quantidade+dini_Int(file2, "Combustivel") < MAX_COMB)
				{
					dini_IntSet(file2, "Combustivel", dini_Int(file2, "Combustivel")+quantidade);
					format(string, sizeof(string), "Você encheu galões com %d litro(s) de combustível.", quantidade);
					SendClientMessage(playerid, COLOR_GREEN, string);
					GivePlayerGrana(playerid, -quantidade);
				}
				else if(quantidade+dini_Int(file2, "Combustivel"))
				{
					quantia = MAX_COMB-dini_Int(file2, "Combustivel");
					dini_IntSet(file2, "Combustivel", MAX_COMB);
					format(string, sizeof(string), "Galões cheio, foram colocados %d litro(s).", quantia);
					SendClientMessage(playerid, COLOR_GREEN, string);
					GivePlayerGrana(playerid, -quantia);
				}
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, "Posto de Combustível", "{FFFF00}Você não está em um veículo.\n{FFFFFF}Enchemos galões de combustível para você.\n{FF33FF}Vá até seu carro e use /enchertanque para colocar este combustível.", "OK", "");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no posto.");
		}
		return 1;
	}

	if(strcmp(cmd, "/enchertanque", true) == 0)
	{
		new quantidade, quantia;
		if(IsPlayerInAnyVehicle(playerid) == 1)
		{
			format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(playerid));
			quantidade = dini_Int(file2, "Combustivel");
			if(quantidade > 0)
			{
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(file, sizeof(file), PASTA_CONCE, carro);
					if(dini_Exists(file))
					{
						if(GetPlayerVehicleID(playerid) == dini_Int(file, "Id"))
						{
							if(quantidade+dini_Int(file, "Combustivel") < MAX_COMB)
							{
								dini_IntSet(file, "Combustivel", dini_Int(file, "Combustivel")+quantidade);

								new engine, lights, alarm, doors, bonnet, boot, objective;
								GetVehicleParamsEx(dini_Int(file, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(dini_Int(file, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

								dini_IntSet(file2, "Combustivel", dini_Int(file2, "Combustivel")-quantidade);
								format(string, sizeof(string), "Você completou seu tanque com %d litro(s) de combustível.", quantidade);
								SendClientMessage(playerid, COLOR_GREEN, string);
								format(string, sizeof(string), "Resta %d litro(s) em seus galões.", dini_Int(file2, "Combustivel"));
								SendClientMessage(playerid, Amarelo, string);
							}
							else if(quantidade+dini_Int(file, "Combustivel"))
							{
								quantia = MAX_COMB-dini_Int(file, "Combustivel");
								dini_IntSet(file, "Combustivel", MAX_COMB);

								new engine, lights, alarm, doors, bonnet, boot, objective;
								GetVehicleParamsEx(dini_Int(file, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(dini_Int(file, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

								dini_IntSet(file2, "Combustivel", dini_Int(file2, "Combustivel")-quantia);
								format(string, sizeof(string), "Tanque cheio, foram colocados %d litro(s).", quantia);
								SendClientMessage(playerid, COLOR_GREEN, string);
								format(string, sizeof(string), "Resta %d litro(s) em seus galões.", dini_Int(file2, "Combustivel"));
								SendClientMessage(playerid, Amarelo, string);
							}
							return 1;
						}
					}
				}
				SendClientMessage(playerid, COLOR_RED, "Você não está em um veículo da Conce.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Você não tem galões cheios.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "Entre em seu carro para abastece-lo.");
		}
		return 1;
	}

	if(strcmp(cmd, "/pegararmas", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /pegararmas [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O(A) policial %s prendeu suas armas, elas foram levadas para delegacia.", aname);
					SendClientMessage(plid, Vermelho, string);
					ResetPlayerWeapons(plid);
					SendClientMessage(playerid, COLOR_GREEN, "Armas apreendidas com sucesso.");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para apreender as armas.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid,Vermelho, "Apenas policiais podem apreender armas.");
		}
		return 1;
	}

	if(strcmp(cmd, "/paradoai", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /paradoai [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode ultilizar este comandos com você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(Procurados[plid] == 1 || infratores[plid] == 1)
				{
					if(GetDistanceBetweenPlayers(plid, playerid) < 10)
					{
						format(string, sizeof(string), "O(A) policial %s te deu voz de prisão, portanto fique parado e escute ele.", aname);
						SendClientMessage(plid, Blue, string);
						SetPlayerSpecialAction(plid, SPECIAL_ACTION_HANDSUP);
						SendClientMessage(playerid, COLOR_GREEN, "Comando efetuado com sucesso.");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Chegue mais perto para dar voz de prisao.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Não pode parar uma pessoa que não tenha cometido crimes.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas policiais podem ultilizar este comando.");
		}
		return 1;
	}

	if(strcmp(cmd, "/algemar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol ||dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /algemar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode algemar você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(Procurados[plid] == 1 || infratores[plid] == 1)
				{
					if(GetDistanceBetweenPlayers(plid, playerid) < 10)
					{
						format(string, sizeof(string), "O(A) policial %s te algemou.", aname);
						SendClientMessage(plid, Blue, string);
						TogglePlayerControllable(plid, 0);
						SendClientMessage(playerid, COLOR_GREEN, "Algemado com sucesso.");
						algemado[plid] = 1;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Chegue mais perto para algemar.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Não pode algemar uma pessoa que não tenha cometido crimes.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas policiais podem usar este comando.");
		}
		return 1;
	}

	if(strcmp(cmd, "/desalgemar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /desalgemar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode tirar algemas de você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(algemado[plid] == 1)
				{
					if(GetDistanceBetweenPlayers(plid, playerid) < 10)
					{
						format(string, sizeof(string), "O(A) policial %s te desalgemou.", aname);
						SendClientMessage(plid, Blue, string);
						TogglePlayerControllable(plid, 1);
						SendClientMessage(playerid, COLOR_GREEN, "Desalgemado com sucesso.");
						algemado[plid] = 0;
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Chegue mais perto para desalgemar.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Essa pessoa não está algemada.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas policiais podem usar este comando.");
		}
		return 1;
	}

	if(strcmp(cmd, "/prender", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use: /prender [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					if(Procurados[plid] == 1)
					{
						new pname[MAX_PLAYER_NAME];
						GetPlayerName(plid, pname, MAX_PLAYER_NAME);
						format(file2, sizeof(file2), PASTA_CONTAS, pname);
						Procurados[plid] = 0;
						preso[plid] = 1;
						infratores[plid] = 0;
						dini_IntSet(file2, "Procurado", 0);
						dini_IntSet(file2, "Preso", 1);
						ResetPlayerWeapons(plid);
						SetPlayerHealth(plid, 999999);
						SetPlayerWantedLevel(plid, 0);
						SetPlayerInterior(plid, 6);
						SetPlayerPos(plid, 263.8820, 77.4002, 1001.0391);
						TogglePlayerControllable(plid, 1);
						GivePlayerGrana(playerid, 5000);
						format(string, sizeof(string), "%s te prendeu. Você estava sendo procurado(a).", aname);
						SendClientMessage(plid, Blue, string);
						SendClientMessage(playerid, Verde, "Você prendeu um(a) jogador(a) procurado(a) e ganhou 5 mil!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não pode prender alguem que não esteja sendo procurado!");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para prender!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas policiais podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/venderak", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Traficante || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "Profissao") == Mafia || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/venderak [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode vender uma arma para você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O traficante %s te vendeu uma AK-47, não faça DM fora da Favela.", aname);
					SendClientMessage(plid, Vermelho, string);
					GivePlayerWeapon(plid, 30, 150);
					SendClientMessage(playerid, COLOR_GREEN, "Ak 47 Vendida!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para Vender!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas traficantes podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/vendersniper", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Traficante || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "Profissao") == Mafia || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/vendersniper [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode vender uma arma para você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O traficante %s te vendeu uma Sniper, não faça DM fora da Favela.", aname);
					SendClientMessage(plid, Vermelho, string);
					GivePlayerWeapon(plid, 34, 25);
					SendClientMessage(playerid, COLOR_GREEN, "Sniper Vendida!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para vender uma Sniper!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas traficantes podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/venderm4", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Traficante || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "Profissao") == Mafia || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/venderm4 [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode vender uma arma para você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O traficante %s te vendeu uma M4, não faça DM fora da Favela.", aname);
					SendClientMessage(plid, Vermelho, string);
					GivePlayerWeapon(plid, 31, 150);
					SendClientMessage(playerid, COLOR_GREEN, "M4 Vendida!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para vender um M4!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas traficantes podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/venderswanoff", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Traficante || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "Profissao") == Mafia || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/venderswanoff [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode vender uma arma para você mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O traficante %s te vendeu uma Swan Off, não faça DM fora da Favela.", aname);
					SendClientMessage(plid, Vermelho, string);
					GivePlayerWeapon(plid, 26, 35);
					SendClientMessage(playerid, COLOR_GREEN, "Swan Off Vendida!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para vender uma Swan Off!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas traficantes podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/vendertec", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Traficante || dini_Int(file, "Profissao") == YKZ || dini_Int(file, "Profissao") == Mafia || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/vendertec [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O traficante %s te vendeu uma Tec, não faça DM fora da Favela.", aname);
					SendClientMessage(plid, Vermelho, string);
					GivePlayerWeapon(plid, 32, 150);
					SendClientMessage(playerid, COLOR_GREEN, "Tec Vendida!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para vender uma Tec!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas traficantes podem usar este comando!");
		}
		return 1;
	}

	if(strcmp(cmd, "/transferir", true) == 0)
	{
		new tmp[256], giveplayerid, moneys, playermoney2;
		new giveplayer[MAX_PLAYER_NAME];
		new sendername[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /transferir [id] [quantidade]");
			return 1;
		}
		giveplayerid = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Use: /transferir [id] [quantidade]");
			return 1;
		}
		moneys = strval(tmp);
		if(IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney2 = GetPlayerGrana(playerid);
			if(moneys > 0 && playermoney2 >= moneys)
			{
				GivePlayerGrana(playerid, (0-moneys));
				GivePlayerGrana(giveplayerid, moneys);
				format(string, sizeof(string), "Você transferiu para %s (ID: %d) a importância de $%d.", giveplayer, giveplayerid, moneys);
				SendClientMessage(playerid, Amarelo, string);
				format(string, sizeof(string), "Você recebeu $%d de %s (ID: %d).", moneys, sendername, playerid);
				SendClientMessage(giveplayerid, Amarelo, string);
			}
			else
			{
				SendClientMessage(playerid, Amarelo, "Valor inválido.");
			}
		}
		else
		{
			format(string, sizeof(string), "%d não está online.", giveplayerid);
			SendClientMessage(playerid, Amarelo, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/avisar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Sequestrador || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 7, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/avisar [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O sequestrador %s avisa: %s", aname, tmp);
				SendClientMessageToAll(C_Sequestrador, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/esmola", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Mendigo)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 7, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /esmola");
			}
			else
			{
				format(msg, sizeof(msg), "Eu %s sou morador de rua, o senhor pode me dar um dinheirinho pra comprar pão?", aname);
				SendClientMessageToAll(C_Sequestrador, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/vigiar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Flanelinha)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 7, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /vigiar");
			}
			else
			{
				format(msg, sizeof(msg), "Eu %s flanelinha, vigio carros por apenas $50.", aname);
				SendClientMessageToAll(C_Sequestrador, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/rimar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Rapper  || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 6, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/rimar [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O rapper %s faz uma rima: %s", aname, tmp);
				SendClientMessageToAll(C_Rapper, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/cantar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Cantor)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 7, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/cantar [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O(A) cantor(a) %s canta: %s", aname, tmp);
				SendClientMessageToAll(C_Cantor, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/poema", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Poeta)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 6, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/poeta [poema]");
			}
			else
			{
				format(msg, sizeof(msg), "O poeta %s recita o poema: %s", aname, tmp);
				SendClientMessageToAll(C_Rapper, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/corrida", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Corredor  || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 8, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/corrida [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O corredor %s marca um racha: %s", aname, tmp);
				SendClientMessageToAll(C_Corredor, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/dk", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Drifter  || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 3, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/dk [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "Drifter King: %s anuncia: %s", aname, tmp);
				SendClientMessageToAll(C_Rapper, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/na", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Ninja  || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 3, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/na [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "Ninja: %s anuncia: %s", aname, tmp);
				SendClientMessageToAll(C_Ninja, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/noticiar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Jornalista || dini_Int(file, "Profissao") == Reporter || dini_Int(file, "Profissao") == Ancora || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 9, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/noticiar [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "Jornal: %s publica uma notícia: %s", aname, tmp);
				SendClientMessageToAll(C_Reporter, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/publicar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Correio)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 9, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/publicar [texto]");
			}
			else
			{
				format(msg,sizeof(msg), "Correios: %s publica uma carta: %s", aname, tmp);
				SendClientMessageToAll(C_Reporter, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/discurso", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Prefeito || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 9, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/discurso [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O prefeito %s discursa: %s", aname, tmp);
				SendClientMessageToAll(C_Prefeito, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/discursar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Presidente || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 10, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/discursar [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O presidente %s discursa: %s", aname, tmp);
				SendClientMessageToAll(C_Presidente, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/terror", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Terrorista || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 7, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/terror [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O terrorista %s ameaça: %s", aname, tmp);
				SendClientMessageToAll(C_Terrorista, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
	}

	if(strcmp(cmd, "/festa", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Promoter || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 6, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/festa [texto]");
			}
			else
			{
				format(msg, sizeof(msg), "O festeiro %s anuncia uma festa: %s", aname, tmp);
				SendClientMessageToAll(C_Promoter, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/reparar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Mecanico || dini_Int(file, "aAdmin") == 1 || dini_Int(file, "Profissao") == Caminhoneiro || PlayerInfo[playerid][SCON] == true)
		{
			if(IsPlayerInAnyVehicle(playerid) == 1)
			{
				format(string, sizeof(string), "Mecânico(a) %s (ID: %d) você consertou um carro, cobre pelo serviço.", aname, playerid);
				SendClientMessage(playerid, Blue, string);
				new VehicleID = GetPlayerVehicleID(playerid);
				RepairVehicle(VehicleID);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não está em um carro para reparar.");
			}
		}
		return 1;
	}

	if(strcmp(cmdtext, "/limparcasa", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Empregada)
		{
			format(string, sizeof(string), "Empregada Domestica %s (ID: %d) você limpou a casa, cobre pelo serviço.", aname, playerid);
			SendClientMessage(playerid, Blue, string);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/catarlixo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Lixeiro || dini_Int(file, "Profissao") == Gari)
		{
			format(string, sizeof(string), "Lixeiro/Gari %s (ID: %d) você limpou a rua, você receberá o extra no salário.", aname, playerid);
			SendClientMessage(playerid, Blue, string);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/reformar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Pedreiro)
		{
			format(string, sizeof(string), "Pedreiro %s (ID: %d) você reformou o objeto, cobre pelo serviço.", aname, playerid);
			SendClientMessage(playerid, Blue, string);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/vcontrole", true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Mecanico || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			#if defined VControleUser
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, 0xCC0000FF, "Você precisa estar em um veículo para usar este comando.");
			}
			else
			{
				ShowPlayerDialog(playerid, vcontrole, DIALOG_STYLE_LIST, "Controle", "{FF0000}Luzes\n{0800FF}Abrir/Fechar Capo\n{00FF08}Abrir/Fechar Boot\n{FFFF00}Motor\n{AE00FF}Alarme", "Confirmar", "Cancelar");
			}
			#else
			SendClientMessage(playerid, LARANJA, "Comando desativado temporáriamente.");
			#endif
		}
		return 1;
	}

	if(strcmp("/tunar", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(vip[playerid] == 1 || dini_Int(file, "Profissao") == Mecanico || dini_Int(file, "aAdmin") == 1 || dini_Int(file, "Profissao") == Caminhoneiro || PlayerInfo[playerid][SCON] == true)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, 0xCC0000FF, "Você precisa estar em um veículo para usar este comando.");
			}
			else
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/pintar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Mecanico || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], cor1, cor2, veiculo;
			tmp = strtok(cmdtext, idx);
			cor1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/pintar [cor1] [cor2]");
				return 1;
			}
			cor2 = strval(tmp);
			veiculo = GetPlayerVehicleID(playerid);
			if(IsPlayerInVehicle(playerid, veiculo))
			{
				ChangeVehicleColor(veiculo, cor1, cor2);
				format(string, sizeof(string), "Mecânico(a) %s (ID: %d) você trocou a cor do carro para %d e %d, cobre pelo serviço.", aname, playerid, cor1, cor2);
				SendClientMessage(playerid, Blue, string);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darterrestre", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darterrestre [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				dini_IntSet(file2, "HabTerrestre", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu uma carteira terrestre ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) te deu uma carteira terrestre.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}
	
    if(strcmp(cmd, "/dartodas", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || dini_Int(file, "Profissao") == Caminhoneiro)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /dartodas [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				dini_IntSet(file2, "HabTerrestre", 1);
				dini_IntSet(file2, "HabAerea", 1);
				dini_IntSet(file2, "HabNautica", 1);
                dini_IntSet(file2, "Porte", 1);
                dini_IntSet(file2, "Carteira", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu Todas carteira  ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM  %s (%d)De deu Todas as Carteira.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/daraerea", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /daraerea [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				dini_IntSet(file2, "HabAerea", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu uma carteira aérea ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) te deu uma carteira aérea.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darnautica", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darnautica [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				dini_IntSet(file2, "HabNautica", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu uma carteira náutica ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) te deu uma carteira náutica.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darcarteira", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darcarteira [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				dini_IntSet(file2, "Carteira", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu uma carteira de trabalho ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) te deu uma carteira de trabalho.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darporte", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darporte [id]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
                dini_IntSet(file2, "Porte", 1);
				format(string, sizeof(string), "%s (ID: %d) você deu porte de armas ao %s.", aname, playerid, pname);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) te deu porte de armas.", aname, playerid);
				SendClientMessage(plid, tcadm, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/venderskin", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == VendedorSkin || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, skin;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /venderskin [id] [skin]");
				return 1;
			}
			plid = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /venderskin [id] [skin]");
				return 1;
			}
			skin = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				if(skin >= 0 && skin < 299)
				{
					if(skin == 292 || skin == 271 || skin == 272 || skin == 273 || skin == 270 || skin == 269 || skin == 274 || skin == 289)
					{
						SendClientMessage(playerid, Vermelho, "Skin proibido, tente outro! | ID's = 0-298");
						return 1;
					}
					SetPlayerSkin(plid, skin);
					dini_IntSet(file2, "Skin", skin);
					format(string, sizeof(string), "O(A) vendedor(a) ambulante %s (ID: %d) te vendeu uma nova roupa ID: %d", aname, playerid, skin);
					SendClientMessage(plid, Blue, string);
					format(string, sizeof(string), "Você vendeu ao %s (ID: %d) a roupa de ID: %d", pname, plid, skin);
					SendClientMessage(playerid, Blue, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente! | ID's = 0-298");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dargrana", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new aname[MAX_PLAYER_NAME];
		if(pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
		{
			new tmp[256], plid, grana;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /dargrana [id] [grana]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /dargrana [id] [grana]");
				return 1;
			}
			grana = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "%s (ID: %d) você deu para %s $%d de grana.", aname, playerid, pname, grana);
				SendClientMessage(playerid, Blue, string);
				format(string, sizeof(string), "O(A) ADM %s (%d) deu para você $%d de dinheiro, não gaste com doces.", aname, playerid, grana);
				SendClientMessage(plid, tcadm, string);
				GivePlayerGrana(plid, grana);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/lembrete", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Bloco") == 1)
		{
			new tmp[256];
			strmid(tmp, cmdtext, 9, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "Use /lembrete [texto]");
				return 1;
			}
			if(IsPlayerConnected(playerid))
			{
				dini_Set(file, "Lembrete", tmp);
				SendClientMessage(playerid, 0xFF0000AA, "Lembrete anotado!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem um bloco de lembretes.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darcomb", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new tmp[256], msg[256], petroleo, plid, comb;
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Frentista || PlayerInfo[playerid][SCON] == true || pAdmin[playerid] > 3)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/darcomb [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/darcomb [id] [quantidade]");
				return 1;
			}
			comb = strval(tmp);
			if(comb > MAX_COMB || comb <= 0)
			{
				SendClientMessage(playerid, Vermelho, "Quantidade inválida. Os valores devem ser de 1 à "#MAX_COMB".");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				if(IsPlayerInAnyVehicle(plid) == 1)
				{
					for(new carro = 0; carro < MAX_CONCES; carro++)
					{
						format(file2, sizeof(file2), PASTA_CONCE, carro);
						if(dini_Exists(file2))
						{
							if(GetPlayerVehicleID(plid) == dini_Int(file2, "Id"))
							{
								if((dini_Int(file2, "Combustivel")+comb) < MAX_COMB)
								{
									petroleo = dini_Int(file2, "Combustivel")+comb;
									dini_IntSet(file2, "Combustivel", petroleo);

									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(dini_Int(file2, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(dini_Int(file2, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

									format(msg, sizeof(msg), "Um frentista colocou %d L de combustível em seu tanque. Total: %d L", comb, petroleo);
									SendClientMessage(plid, COLOR_GREEN, msg);
									SendClientMessage(playerid, COLOR_GREEN, "Combustível fornecido com sucesso!");
								}
								else if((dini_Int(file2, "Combustivel")+comb) >= MAX_COMB)
								{
									petroleo = MAX_COMB-dini_Int(file2, "Combustivel");
									dini_IntSet(file2, "Combustivel", MAX_COMB);

									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(dini_Int(file2, "Id"), engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(dini_Int(file2, "Id"), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

									format(msg, sizeof(msg), "Um frentista completou seu tanque colocando %d L.", petroleo);
									SendClientMessage(plid, COLOR_GREEN, msg);
									SendClientMessage(playerid, COLOR_GREEN, "Combustível fornecido com sucesso!");
								}
								return 1;
							}
						}
					}
					format(string, sizeof(string), "%s não está em um veículo da Conce.", PlayerName(plid));
					SendClientMessage(playerid, COLOR_RED, string);
				}
				else
				{
					format(file, sizeof(file), PASTA_CONTAS, PlayerName(plid));
					if((dini_Int(file, "Combustivel")+comb) < MAX_COMB)
					{
						petroleo = dini_Int(file, "Combustivel")+comb;
						dini_IntSet(file, "Combustivel", petroleo);
						format(msg, sizeof(msg), "Um frentista colocou %d L de combustível em seus galões. Total: %d L", comb, petroleo);
						SendClientMessage(plid, COLOR_GREEN, msg);
						SendClientMessage(playerid, COLOR_GREEN, "Combustível fornecido com sucesso!");
					}
					else if((dini_Int(file, "Combustivel")+comb) >= MAX_COMB)
					{
						petroleo = MAX_COMB-dini_Int(file, "Combustivel");
						dini_IntSet(file, "Combustivel", MAX_COMB);
						format(msg, sizeof(msg), "Um frentista completou seus galões colocando %d L.", petroleo);
						SendClientMessage(plid, COLOR_GREEN, msg);
						SendClientMessage(playerid, COLOR_GREEN, "Combustível fornecido com sucesso!");
					}
					ShowPlayerDialog(plid, playersimp, DIALOG_STYLE_MSGBOX, "Frentistas", "{FFFF00}Você não está em um veículo.\n{FFFFFF}Enchemos galões de combustível para você.\n{FF33FF}Vá até seu carro e use /enchertanque para colocar este combustível.", "OK", "");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado/logado.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/darlevel", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não e um admin!");
			return 1;
		}
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, skin;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darlevel [id] [level]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darlevel [id] [level]");
				return 1;
			}
			skin = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				if(skin < MAX_PLAYER_LEVEL-1)
				{
					if(dini_Int(file2, "Level") < MAX_PLAYER_LEVEL-1)
					{
						format(string, sizeof(string), "O(A) ADM %s (%d) deu a você %d de level(s).", aname, playerid, skin);
						SendClientMessage(plid, tcadm, string);
						format(string, sizeof(string), "Você deu a %s (ID: %d) %d de level(s).", pname, plid, skin);
						SendClientMessage(playerid, Blue, string);
						dini_IntSet(file2, "Level", dini_Int(file2, "Level") +skin);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Este jogador já alcançou o limite de level(s).");
					}
				}
				else
				{
					format(string, sizeof(string), "Não é permitido dar mais de %d level(s).", MAX_PLAYER_LEVEL);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/setlevel", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não permissão!");
			return 1;
		}
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, skin;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setlevel [id] [level]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setlevel [id] [level]");
				return 1;
			}
			skin = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				if(skin < MAX_PLAYER_LEVEL-1)
				{
					if(dini_Int(file2, "Level") < MAX_PLAYER_LEVEL-1)
					{
						format(string, sizeof(string), "O(A) ADM %s (%d) setou a você %d de level(s).", aname, playerid, skin);
						SendClientMessage(plid, tcadm, string);
						format(string, sizeof(string), "Você setou a %s (ID: %d) %d de level(s).", pname, plid, skin);
						SendClientMessage(playerid, Blue, string);
						dini_IntSet(file2, "Level", skin);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Este jogador já alcançou o limite de level(s).");
					}
				}
				else
				{
					format(string, sizeof(string), "Não é permitido setar mais de %d level(s).", MAX_PLAYER_LEVEL);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/darestudo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Professor || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, estudo;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darestudo [id] [estudo]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /darestudo [id] [estudo]");
				return 1;
			}
			estudo = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				if(estudo < MAX_PLAYER_ESTUDO-1)
				{
					if(dini_Int(file2, "Faculdade") < MAX_PLAYER_ESTUDO-1)
					{
						if(dini_Int(file, "Profissao") == Professor)
						{
							if(estudo > 5)
							{
								SendClientMessage(playerid, Blue, "Você não pode dar mais de 5 estudos de uma vez.");
								return 1;
							}
						}
						format(string, sizeof(string), "O(A) professor(a) %s (%d) te deu %d de estudo(s).", aname, playerid, estudo);
						SendClientMessage(plid, tcadm, string);
						format(string, sizeof(string), "Você deu a %s (ID: %d) %d de estudo(s).", pname, plid, estudo);
						SendClientMessage(playerid, Blue, string);
						dini_IntSet(file2, "Faculdade", dini_Int(file2, "Faculdade") +estudo);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Este jogador já alcançou o limite de estudo(s).");
					}
				}
				else
				{
					format(string, sizeof(string), "Não é permitido dar mais de %d estudo(s).", MAX_PLAYER_ESTUDO);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não é um professor!");
		}
		return 1;
	}

	if(strcmp(cmd, "/setestudo", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "aAdmin") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Você não é um admin!");
			return 1;
		}
		if(dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, estudo;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setestudo [id] [level]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setestudo [id] [level]");
				return 1;
			}
			estudo = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				if(estudo < MAX_PLAYER_ESTUDO-1)
				{
					if(dini_Int(file2, "Faculdade") < MAX_PLAYER_ESTUDO-1)
					{
						format(string, sizeof(string), "O(A) ADM %s (%d) te setou %d level de estudo(s).", aname, playerid, estudo);
						SendClientMessage(plid, tcadm, string);
						format(string, sizeof(string), "Você setou a %s (ID: %d) %d de estudo(s).", pname, plid, estudo);
						SendClientMessage(playerid, Blue, string);
						dini_IntSet(file2, "Faculdade", estudo);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Este jogador já alcançou o limite de estudo(s).");
					}
				}
				else
				{
					format(string, sizeof(string), "Não é permitido setar mais de %d estudo(s).", MAX_PLAYER_ESTUDO);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/setprof", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		new pname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Empregador || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, skin;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setprof [id] [prof]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Digite: /setprof [id] [prof]");
				return 1;
			}
			skin = strval(tmp);
			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(IsPlayerConnected(plid))
			{
				format(string, sizeof(string), "O(A) empregador(a) %s (%d) te deu a prof de ID %d.", aname, playerid, skin);
				SendClientMessage(plid, tcadm, string);
				format(string, sizeof(string), "Você deu a %s (ID: %d) a prof de número: %d.", pname, plid, skin);
				SendClientMessage(playerid, Blue, string);
				dini_IntSet(file2, "Profissao", skin);
				SpawnPlayer(plid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não é um empregador!");
		}
		return 1;
	}

	if(strcmp("/verlevel", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME],
			strcmd[1000];

		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);

		format(string, sizeof(string), "{00FF00}» Tempo EXP: %d/%d     {CCFF00}» Seu Level: %d\n", dini_Int(file, "Tempo"), TEMPO_EXP, PlayerInfo[playerid][_Level]);
		strcat(strcmd, string, sizeof(strcmd));
		format(string, sizeof(string), "{00FF00}» Sua Experiência: %d  {CCFF00}» Seu Estudo: %d\n", PlayerInfo[playerid][_EXP], PlayerInfo[playerid][_Faculdade]);
		strcat(strcmd, string, sizeof(strcmd));
		ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, ".:: - Level(s) - ::.", strcmd, "OK", "");
		return 1;
	}

	if(strcmp("/rg", cmdtext, true, 10) == 0)
	{
		new aname[MAX_PLAYER_NAME],
			string222[256];

		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);

		format(string222, sizeof(string222), "......:::::: - %s: [ID: %d] - ::::::.....", aname, playerid);
		SendClientMessage(playerid, -1, string222);
		format(string, sizeof(string), "{CCFF00}» EXP: %d/%d        {00FF00}» Grana na Mão: $%d", PlayerInfo[playerid][_EXP], MAX_PLAYER_EXP, GetPlayerGrana(playerid));
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "{CCFF00}» Level: %d/%d      {00FF00}» Saldo Bancário: $%d", PlayerInfo[playerid][_Level], MAX_PLAYER_LEVEL, PlayerInfo[playerid][_SaldoBancario]);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "{CCFF00}» Estudo: %d/%d     {00FF00}» Casou Com: %s", PlayerInfo[playerid][_Faculdade], MAX_PLAYER_ESTUDO, PlayerInfo[playerid][_CasouCom]);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "{CCFF00}» Profissão ID: %d  {00FF00}» Skin ID: %d", PlayerInfo[playerid][_Profissao], PlayerInfo[playerid][_Skin]);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "{CCFF00}» Matou: %d         {00FF00}» Morreu: %d", matou[playerid], morreu[playerid]);
		SendClientMessage(playerid, -1, string);
		SendClientMessage(playerid, -1, string222);
		return 1;
	}

	if(strcmp(cmd, "/fakexat", true) == 0)
	{
		new plid, tmp[256], fakestr[256];
		new fakedname[MAX_PLAYER_NAME];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "Digite: /fakexat [id] [texto]");
			return 1;
		}
		plid = strval(tmp);
		new length = strlen(cmdtext);
		while((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Vermelho, "Digite: /fakexat [id] [texto]");
			return 1;
		}
		GetPlayerName(plid, fakedname, sizeof(fakedname));
		format(fakestr, sizeof(fakestr), "%s: [ID: %d] %s", fakedname, plid, result);
		SendClientMessageToAll(GetPlayerColor(plid), fakestr);
		return 1;
	}

	if(strcmp(cmdtext, "/saldocell", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Celular") == 1)
		{
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				format(string, sizeof(string), "[TORPEDO]: Você tem depositado no banco $%d.", dini_Int(file, "SaldoBancario"));
				SendClientMessage(playerid, Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem uma conta bancária.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem celular.");
		}
		return 1;
	}

	if(strcmp(cmd, "/velocimetro", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, Vermelho, "Saia do veículo para mudar o velocimetro.");
			return 1;
		}
		if(statuscp[playerid] == 0)
		{
			statuscp[playerid] = 1;
			#if defined gText2User
			TextDrawHideForPlayer(playerid, gText2[playerid]);
			#endif
			SendClientMessage(playerid, COLOR_GREEN, "Você mudou o sistema de velocimetro.");
		}
		else
		{
			statuscp[playerid] = 0;
			#if defined gText2User
			TextDrawShowForPlayer(playerid, gText2[playerid]);
			#endif
			SendClientMessage(playerid, COLOR_GREEN, "Você mudou o sistema de velocimetro.");
		}
		return 1;
	}

	if(strcmp(cmd, "/sendcmd", true) == 0)
	{
		if(pAdmin[playerid] > 4)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "Use /sendcmd [id] [comando]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new length = strlen(cmdtext);
				while((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, Vermelho, "Use /sendcmd [id] [comando]");
					return 1;
				}
				else
				{
					format(string, sizeof(string), "%s", result);
					OnPlayerCommandText(plid, string);
					SendClientMessage(playerid, COLOR_GREEN, "Comando enviado!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Jogador não conectado!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/status", true) == 0)
	{
		new tmp[256], plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GREEN, "Use /status [id]");
			return 1;
		}
		plid = strval(tmp);
		if(IsPlayerConnected(plid))
		{
			new pname[MAX_PLAYER_NAME],
				aname[MAX_PLAYER_NAME],
				string222[256];

			GetPlayerName(plid, pname, MAX_PLAYER_NAME);
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);

			format(string222, sizeof(string222), "......:::::: - %s: [ID: %d] - ::::::.....", pname, plid);
			SendClientMessage(playerid, -1, string222);
			format(string, sizeof(string), "{CCFF00}» EXP: %d/%d        {00FF00}» Grana na Mão: $%d", PlayerInfo[plid][_EXP], MAX_PLAYER_EXP, GetPlayerGrana(plid));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "{CCFF00}» Level: %d/%d      {00FF00}» Saldo Bancário: $%d", PlayerInfo[plid][_Level], MAX_PLAYER_LEVEL, PlayerInfo[plid][_SaldoBancario]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "{CCFF00}» Estudo: %d/%d     {00FF00}» Casou Com: %s", PlayerInfo[plid][_Faculdade], MAX_PLAYER_ESTUDO, PlayerInfo[plid][_CasouCom]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "{CCFF00}» Profissão ID: %d  {00FF00}» Skin ID: %d", PlayerInfo[plid][_Profissao], PlayerInfo[plid][_Skin]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "{CCFF00}» Matou: %d         {00FF00}» Morreu: %d", matou[plid], morreu[plid]);
			SendClientMessage(playerid, -1, string);
			SendClientMessage(playerid, -1, string222);

			format(string, sizeof(string), "%s está vendo seu status. ( /status )", aname);
			SendClientMessage(plid, COLOR_GREEN, string);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		return 1;
	}

	if(strcmp(cmd, "/ttaxi", true) == 0 && IsPlayerConnected(playerid))
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Taxista || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/ttaxi [id]");
				return 1;
			}
			plid = strval(tmp);
			if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(plid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				SendClientMessage(plid, COLOR_GREEN, "O taxista ligou o taximêtro, 3$ cada metro.");
				GivePlayerGrana(playerid, 000);
				GivePlayerGrana(plid, 000);
				Taximetro[plid][0] = 1;
				Taximetro[plid][1] = playerid;
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "O passageiro não está dentro do seu taxi ou você está fora.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/setcar", true) == 0)
	{
		if(pAdmin[playerid] == 5)
		{
			new tmp[256], carid[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, tcadm, "Use: /setcar [id]");
				return 1;
			}
			set(carid, tmp);
			if(strval(carid) >= 400 && strval(carid) <= 611)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(strval(carid) == 425 || strval(carid) == 469 || strval(carid) == 538 || strval(carid) == 537 || strval(carid) == 520 || strval(carid) == 449 || strval(carid) == 447 || strval(carid) == 569 || strval(carid) == 570 || strval(carid) == 432)
					{
						SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
						return 1;
					}
					if(VBIsNumeric(carid))
					{
						new playerip[64], gString[256], File:temp,
							Float:X, Float:Y, Float:Z,
							Float:ang;

						GetPlayerIp(playerid, playerip, sizeof(playerip));
						GetPlayerPos(playerid, X, Y, Z);
						GetVehicleZAngle(GetPlayerVehicleID(playerid), ang);

						format(gString, sizeof(gString), "%d,%f,%f,%f,%f,-1,-1 ; // Setado por %s (IP: %s)\r\n", strval(carid), X, Y, Z, ang, PlayerName(playerid), playerip);
						temp = fopen("Conce/setados.txt", io_append);
						fwrite(temp, gString);
						fclose(temp);

						SendClientMessage(playerid, COLOR_GREEN, "Veículo setado com sucesso!");
						SendClientMessage(playerid, Amarelo, "O veículo aparecerá em instantes!");
						printf("%s (%d) - Setou um carro!", PlayerName(playerid), playerid);
						SetTimerEx("CriarVeiculo", 5000, false, "dffffdd", strval(carid), X, Y, Z, ang, -1, -1);
					}
					else
					{
						SendClientMessage(playerid, tcadm, "Valor inválido, tente novamente!");
					}
				}
				else
				{
					SendClientMessage(playerid, tcadm, "Você não está em um veículo e assim não pode setar outro.");
				}
			}
			else
			{
				SendClientMessage(playerid, tcadm, "ID fora do normal! | ID's = 400-611");
			}
		}
		else
		{
			SendClientMessage(playerid, tcadm, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/ad", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1541.9384765625, -1627.7314453125, 15.156204223633))
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
			{
				MoveDynamicObject(ObjectsFix[19], 1541.9780273438, -1639.4814453125, 15.156204223633, 3.0);
				SendClientMessage(playerid, 0xFFFFFFAA, "[PORTEIRO] O portão principal da DP foi aberto!");
			}
			else
			{
				SendClientMessage(playerid, Azul, "Você não é um militar!");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você está muito longe do portão!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/ad2", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1588.0791015625, -1638.140625, 15.172611236572))
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1 )
			{
				MoveDynamicObject(ObjectsFix[20], 1598.3291015625, -1638.1206054688, 15.172611236572, 3.0);
				SendClientMessage(playerid, 0xFFFFFFAA, "[PORTEIRO] O segundo portão da DP foi aberto!");
			}
			else
			{
				SendClientMessage(playerid, Azul, "Você não é um militar!");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você está muito longe do portão!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/fd", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1541.9780273438, -1639.4814453125, 15.156204223633))
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
			{
				MoveDynamicObject(ObjectsFix[19], 1541.9384765625, -1627.7314453125, 15.156204223633, 3.0);
				SendClientMessage(playerid, 0xFFFFFFAA, "[PORTEIRO] O portão principal da DP foi fechado!");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você está muito longe do portão!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/fd2", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1598.3291015625, -1638.1206054688, 15.172611236572))
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
			{
				MoveDynamicObject(ObjectsFix[20], 1588.0791015625, -1638.140625, 15.172611236572, 3.0);
				SendClientMessage(playerid, 0xFFFFFFAA, "[PORTEIRO] O segundo portão da DP foi fechado!");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você está muito longe do portão!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/abrirbi", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Bibliotecario || dini_Int(file, "Profissao") == Professor || pAdmin[playerid] > 3)
		{
			MoveDynamicObject(ObjectsFix[21], 1214.0789794922, -1842.5186767578, 20.415674209595, 4.0);
			MoveDynamicObject(ObjectsFix[22], 1269.8895263672, -1842.5379638672, 20.511180877686, 4.0);
			SendClientMessage(playerid, 0x607840AA, "Você abriu a faculdade e a biblioteca!");
			format(string, sizeof(string), "O(A) bibliotecário(a) %s abriu a faculdade e a biblioteca.", aname);
			SendClientMessageToAll(0xCFCFCFAA, string);
			Faculdade2 = 1;
			GameTextForAll("~w~Faculdade ~g~Aberta!", 6000, 1);
		}
		return 1;
	}

	if(strcmp(cmdtext, "/fecharbi", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Bibliotecario || dini_Int(file, "Profissao") == Professor || pAdmin[playerid] > 3)
		{
			MoveDynamicObject(ObjectsFix[21], 1213.7843017578, -1842.4782714844, 15.156204223633, 4.0);
			MoveDynamicObject(ObjectsFix[22], 1270.2001953125, -1842.5798339844, 15.156204223633, 4.0);
			SendClientMessage(playerid, 0x607840AA, "Você fechou a faculdade e a biblioteca!");
			format(string, sizeof(string), "O(A) bibliotecário(a) %s fechou a faculdade e a biblioteca.", aname);
			SendClientMessageToAll(0xCFCFCFAA, string);
			Faculdade2 = 0;
			GameTextForAll("~w~Faculdade ~r~Fechada!", 6000, 1);
		}
		return 1;
	}

	if(strcmp(cmd, "/previsao", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Meteorologista || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], msg[256];
			strmid(tmp, cmdtext, 9, strlen(cmdtext));
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/previsao [previsão]");
			}
			else
			{
				format(msg, sizeof(msg), "O(A) meteorologista %s preve o clima: %s", aname, tmp);
				SendClientMessageToAll(Verde, msg);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	if(strcmp(cmd, "/pescar", true) == 0)
	{
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[19]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[20]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[21]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[22]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[23]))
		{
			if(PescaInProgress[playerid] == 1)
			{
				SendClientMessage(playerid, Vermelho, "Você já lançou a vara aguarde até pegar um peixe.");
				return 1;
			}
			if(PescaInProgress[playerid] == 0)
			{
				SendClientMessage(playerid, 0x0080FFAA, "Você arremessou a vara. Espere até que o peixe morda a isca.");
				SendClientMessage(playerid, 0x0080FFAA, "Enquanto o peixe não morde, fique apreciando o ponto de pesca.");
				PescaInProgress[playerid] = 1;
				SetTimer("Pesca", 36000, false);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no ponto de pesca.");
		}
		return 1;
	}

	if(strcmp(cmd, "/venderpeixe", true) == 0)
	{
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[24]))
		{
			new msg[256], quantia;
			if(QtPescas[playerid] == 0)
			{
				SendClientMessage(playerid, Vermelho, "Você não pescou nada hoje, como quer vender?");
			}
			else
			{
				quantia = QtPescas[playerid]*50;
				GivePlayerGrana(playerid, quantia);
				format(msg, sizeof(msg), "Você vendeu %d peixe(s) por $50 cada um e recebeu $%d com a venda.", QtPescas[playerid], quantia);
				SendClientMessage(playerid, 0xFF0000AA, msg);
				QtPescas[playerid] = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no local de vender peixes.");
		}
		return 1;
	}

	if(strcmp(cmd, "/cortar", true) == 0)
	{
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[26]))
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(string, sizeof(string), "%s está cortando madeiras ilegais, e está sendo procurado(a)!", aname);
			SendClientMessageToAll(msgdm, string);
			SetPlayerWantedLevel(playerid, 6);
			dini_IntSet(file, "Procurado", 1);
			Procurados[playerid] = 1;
			if(cacando[playerid] == 1)
			{
				SendClientMessage(playerid, Vermelho, "Espere um pouco, você está cortando uma arvore com uma moto-serra nhennrnnnrnnnrnn.");
				return 1;
			}
			if(cacando[playerid] == 0)
			{
				SendClientMessage(playerid, 0x4E9C9CAA, "Você cortou uma grande arvore espere ela cair.");
				SendClientMessage(playerid, 0x4E9C9CAA, "Madeiiiiiiiiiiiiiiiraaaaa! aguarde alguns minutos até ela cair totalmente.");
				cacando[playerid] = 1;
				SetTimer("cacas", 36000, false);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no check de cortar madeira.");
		}
		return 1;
	}

	if(strcmp(cmd, "/vendermadeira", true) == 0)
	{
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[27]))
		{
			new msg[256], quantia;
			if(Qtcacas[playerid] == 0)
			{
				SendClientMessage(playerid, Vermelho, "Você não cortou nenhuma madeira, como poderá vender?");
			}
			else
			{
				quantia = Qtcacas[playerid]*80;
				GivePlayerGrana(playerid, quantia);
				format(msg, sizeof(msg), "Você vendeu %d madeira(s) ilegalmente por $80 cada uma e faturou $%d com a venda.", Qtcacas[playerid], quantia);
				SendClientMessage(playerid, COLOR_GREEN, msg);
				Qtcacas[playerid] = 0;
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no check de vender a madeira ilegal.");
		}
		return 1;
	}

	if(strcmp(cmd, "/entregarpizza", true) == 0)
	{
		if(IsPlayerInDynamicCP(playerid, CheckpointsFix[18]))
		{
			if(Carregamento[playerid] == 0)
			{
				SendClientMessage(playerid, Vermelho, "Seu veículo não está carregado com uma pizza!");
			}
			else
			{
				Carregamento[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREEN, "Seu veículo foi descarregado e você ganhou $500.");
				GivePlayerGrana(playerid, 500);
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está no ponto de entregar pizza.");
		}
		return 1;
	}

	if(strcmp(cmd, "/pegarpizza", true) == 0)
	{
		new VehicleID = GetPlayerVehicleID(playerid);
		new modelo = GetVehicleModel(VehicleID);
		if(modelo == 448)
		{
			if(IsPlayerInDynamicCP(playerid, CheckpointsFix[12]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[13]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[14]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[15]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[16]) || IsPlayerInDynamicCP(playerid, CheckpointsFix[17]))
			{
				if(Carregamento[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Pizza pega!");
					SendClientMessage(playerid, COLOR_GREEN, "Para descarregá-la, vá até a entrada de LS no icone de um ''GARFO E FACA'' no mapa.");
					Carregamento[playerid] = 1;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Sua moto já está carregada!");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não está no check de pegar pizza!");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em uma moto de entregar pizza.");
		}
		return 1;
	}

	if(strcmp(cmd, "/multar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid, quant;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/multar [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/multar [id] [quantidade]");
				return 1;
			}
			quant = strval(tmp);
			if(quant > 1000 || quant <= 0)
			{
				SendClientMessage(playerid, Vermelho, "Você não está multando de forma justa.");
				return 1;
			}
			if(IsPlayerConnected(plid))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				if(infratores[plid] == 1)
				{
					infratores[plid] = 0;
					format(file2, sizeof(file2), PASTA_CONTAS, pname);
					format(string, sizeof(string), "Você recebeu uma multa de $%d pelo policial %s. O dinheiro foi retirado do banco.", quant, aname);
					SendClientMessage(plid, COLOR_GREEN, string);
					SendClientMessage(playerid, COLOR_GREEN, "Multa efetuada com sucesso!");
					dini_IntSet(file2, "SaldoBancario", dini_Int(file2, "SaldoBancario")-quant);
				}
				else
				{
					format(string, sizeof(string), "%s não é um(a) infrator(a) e não pode ser multado(a).", pname);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/convidarent", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Empregador || dini_Int(file, "Profissao") == Jornalista || dini_Int(file, "Profissao") == Reporter || dini_Int(file, "Profissao") == Ancora || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "Use /convidarent [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid))
			{
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(plid, pname, MAX_PLAYER_NAME);
				format(file2, sizeof(file2), PASTA_CONTAS, pname);
				dini_IntSet(file2, "convitent", 1);
				format(string, sizeof(string), "%s (ID: %d) convidou você para participar de uma entrevista.", aname, playerid);
				SendClientMessage(plid, Blue, string);
				SendClientMessage(plid, Amarelo, "Para aceitar a entrevista digite /aceitar e para recusar a entrevista digite /recusar.");
				SendClientMessage(playerid, Verde, "Convite enviado!");
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/sequestrar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(jasequestro[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você já sequestrou alguem, aguarde você upar!");
		if(PlayerInfo[playerid][SCON] == true, dini_Int(file, "Profissao") == Sequestrador, dini_Int(file, "Profissao") == Mafia)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(sequestro[playerid] == 1)
			{
				SendClientMessage(playerid, Vermelho, "Você so pode sequestrar 1 por vez!");
				return 1;
			}
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/sequestrar [id]");
				return 1;
			}
			if(IsPlayerInAnyVehicle(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) que você quer sequestrar está em um veículo!");
				return 1 ;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado");
			}
			else
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(GetDistanceBetweenPlayers(plid, playerid) < 10)
					{
						new pname[MAX_PLAYER_NAME];
						GetPlayerName(plid, pname, MAX_PLAYER_NAME);
						format(string, sizeof(string), "%s (ID: %d) sequestrou o player %s (ID: %d) e está sendo procurado(a).", aname, playerid, pname, plid);
						SendClientMessageToAll(Amarelo, string);
						format(string, sizeof(string), "Tente pagar uma recompensa para salva-lo(a).");
						SendClientMessageToAll(Amarelo, string);
						SetPlayerWantedLevel(playerid, 6);
						dini_IntSet(file, "Procurado", 1);
						Procurados[playerid] = 1;
						sequestro[playerid] = 1;
						new VehicleID = GetPlayerVehicleID(playerid);
						PutPlayerInVehicle(plid, VehicleID, 1);
						format(string, sizeof(string), "O(A) gangster %s te sequestrou.", aname);
						SendClientMessage(plid, Blue, string);
						TogglePlayerControllable(plid, 0);
						SendClientMessage(playerid, COLOR_GREEN, "Player sequestrado!");
						jasequestro[playerid] = 1;
						SetTimerEx("liberar", 300000, 1, "d", playerid);
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Chegue mais perto para sequestrar!");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você precisa estar em um veículo para sequestrar!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas gangster pode fazer isso!");
		}
		return 1;
	}

	if(strcmp(cmd, "/liberar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(PlayerInfo[playerid][SCON] == true, dini_Int(file, "Profissao") == Sequestrador, dini_Int(file, "Profissao") == Mafia)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(sequestro[playerid] == 0)
			{
				SendClientMessage(playerid, Vermelho, "Você não sequestro ninguem para liberar!");
				return 1;
			}
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/liberar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O(A) gangster %s te liberou.", aname);
					SendClientMessage(plid, Blue, string);
					TogglePlayerControllable(plid, 1);
					SendClientMessage(playerid, COLOR_GREEN, "Player liberado!");
					sequestro[playerid] = 0;
					RemovePlayerFromVehicle(plid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para liberar!");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas gangster pode fazer isso!");
		}
		return 1;
	}

	if(strcmp(cmd, "/amarrar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Assaltante|| dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, " /amarrar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "Você foi amarrado por %s.", aname);
					SendClientMessage(plid, Blue, string);
					TogglePlayerControllable(plid, 0);
					SendClientMessage(playerid, COLOR_GREEN, "Amarrado com sucesso.");
					algemado[plid] = 1;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para amarrar.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas gangster pode fazer isso.");
		}
		return 1;
	}

	if(strcmp(cmd, "/desamarrar", true) == 0)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Assaltante|| dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			new tmp[256], plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Vermelho, "/desamarrar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerInAnyVehicle(plid) == 1 || IsPlayerInAnyVehicle(playerid) == 1)
			{
				SendClientMessage(playerid, Vermelho, "Alguem está dentro de um carro.");
				return 1 ;
			}
			if(plid == playerid)
			{
				SendClientMessage(playerid, Vermelho, "Você não pode fazer isto com si mesmo.");
				return 1 ;
			}
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, Vermelho, "O(A) jogador(a) não está conectado.");
			}
			else
			{
				if(GetDistanceBetweenPlayers(plid, playerid) < 10)
				{
					format(string, sizeof(string), "O(A) jogador(a) %s te desamarrou.", aname);
					SendClientMessage(plid, Blue, string);
					TogglePlayerControllable(plid, 1);
					SendClientMessage(playerid, COLOR_GREEN, "Desamarrado com sucesso.");
					algemado[plid] = 0;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Chegue mais perto para desamarrar.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Apenas gangster pode fazer isso.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/trancar", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new State, Float:X, Float:Y, Float:Z;
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		State = GetPlayerState(playerid);
		if(State != PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid, Vermelho, "Você só pode trancar o carro se estiver dirigindo.");
			return 1;
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(i != playerid)
				{
					SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 1);
				}
			}
		}
		GetPlayerPos(playerid, X, Y, Z);
		PlayerPlaySound(playerid, 1056, X, Y, Z);
		GameTextForPlayer(playerid, "~y~Veiculo ~r~Trancado", 5000, 6);
		return 1;
	}

	// =================================================================================
	if(strcmp(cmdtext, "/destrancar", true) == 0)
	{
		new pname[MAX_PLAYER_NAME];
		new State, Float:X, Float:Y, Float:Z;
		GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
		if(IsPlayerInAnyVehicle(playerid))
		{
			State = GetPlayerState(playerid);
			if(State != PLAYER_STATE_DRIVER)
			{
				SendClientMessage(playerid, Vermelho, "Você só pode destrancar o carro se estiver dirigindo.");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 0);
				}
			}
			GameTextForPlayer(playerid, "~y~Veiculo ~g~Destrancado", 5000, 6);
			GetPlayerPos(playerid, X, Y, Z);
			PlayerPlaySound(playerid, 1057, X, Y, Z);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em nenhum veículo!");
		}
		return 1;
	}

	if(strcmp(cmd, "/p", true) == 0)
	{
		new tmp[256];
		strmid(tmp, cmdtext, 2, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Vermelho, "/p [texto]");
			return 1;
		}
		ChatProximo(playerid, tmp);
		return 1;
	}

	if(strcmp(cmdtext, "/infratores", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, ".:: Infratores ::.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && infratores[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg, sizeof(msg), "%s (ID: %d)", Jogador, i);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém online cometeu infração!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/procurados", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, ".:: Procurados ::.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && Procurados[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg, sizeof(msg), "%s (ID: %d)", Jogador, i);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém online está sendo procurado!");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/presos", true) == 0)
	{
		new Jogador[24], count = 0, msg[120];
		SendClientMessage(playerid, 0x008000AA, ".:: Presos ::.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && preso[i])
			{
				GetPlayerName(i, Jogador, 24);
				format(msg,sizeof(msg), "%s (ID: %d)", Jogador, i);
				SendClientMessage(playerid, 0x0088CAAA, msg);
				count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, 0xFF0000AA, "Ninguém online está preso!");
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/minhacasa", true))
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Casa") == 1)
		{
			format(STRX, sizeof(STRX), "{0000FF}Ir/Entrar\n{00FF00}Trancar/Destrancar\n{FFFF00}Convidar Morador\n{FF00DD}Expulsar Morador\n{FF0000}Vender Casa");
			ShowPlayerDialog(playerid, casaopt, DIALOG_STYLE_LIST, "Minha Casa", STRX, "OK", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você não tem uma casa!");
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/minhaprop", true))
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Prop") == 1)
		{
			format(STRX, sizeof(STRX), "{0000FF}Ir/Entrar\n{00FF00}Sacar Renda\n{FFFF00}Mudar Nome\n{FF0000}Vender Prop");
			ShowPlayerDialog(playerid, propopt, DIALOG_STYLE_LIST, "Minha Propriedade", STRX, "OK", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, 0xFF0000AA, "Você não tem uma propriedade!");
		}
		return 1;
	}

	if(!strcmp("/irpos", cmdtext, true, 6))
	{
		if(pAdmin[playerid] == 5 || vip[playerid] == 1)
		{
			new string2[256];
			new Float:CorX, Float:CorY, Float:CorZ, xInterior;
			if(sscanf(cmdtext, "s[7]p<,>fffd", cmd, CorX, CorY, CorZ, xInterior))
			{
				SendClientMessage(playerid, Vermelho, "Use /irpos [x,y,z,i]");
				ShowPlayerDialog(playerid, playersimp, DIALOG_STYLE_MSGBOX, "Ajuda /irpos", "{00FFFF}Veja o exemplo de como proceder com uso deste comando:\n\n{FFFFFF}/irpos {FF0000}271.884979{FFFFFF},{0000FF}306.631988{FFFFFF},{00FF00}999.148437{FFFFFF},{FFFF00}2\n\n{00FFFF}Legenda:\n\n{FFFFFF}x = {FF0000}Posição X\n{FFFFFF}y = {0000FF}Posição Y\n{FFFFFF}z = {00FF00}Posição Z\n{FFFFFF}i = {FFFF00}Universo ID", "OK", "");
				return 1;
			}
			SetPlayerInterior(playerid, xInterior);
			SetPlayerPos(playerid, CorX, CorY, CorZ);
			SendClientMessage(playerid, -1, "Você foi até a posição:");
			format(string2, sizeof(string2), "{FF0000}%f{FFFFFF},{0000FF}%f{FFFFFF},{00FF00}%f{FFFFFF},{FFFF00}%d", CorX, CorY, CorZ, xInterior);
			SendClientMessage(playerid, -1, string2);
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem permissão.");
		}
		return 1;
	}

	new string2[256];
	format(string2, sizeof(string2), "Você digitou: %s - Comando inválido.", cmdtext);
	SendClientMessage(playerid, Vermelho, string2);
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new string[256], vid, grana;
	format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));

	if(checkpointid == CheckpointsFix[44] || checkpointid == CheckpointsFix[45] || checkpointid == CheckpointsFix[46] || checkpointid == CheckpointsFix[47] || checkpointid == CheckpointsFix[48] || checkpointid == CheckpointsFix[49] || checkpointid == CheckpointsFix[50] || checkpointid == CheckpointsFix[51])
	{
		GameTextForPlayer(playerid, "~r~Lan House", 5000, 6);
		ShowPlayerDialog(playerid, Menugame, DIALOG_STYLE_LIST, "Lan House", "{FF0000}Counter-Striker SA\n{00FF0C}Bomber-Man SA\n{FFFF00}Bate-Bate SA\n{33AAFF}Basquete-Car SA\n{9E3EFF}Monster-Down SA\n{FFFF00}Snake SA", "OK", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[65] || checkpointid == CheckpointsFix[81])
	{
		GameTextForPlayer(playerid, "~r~Hotel", 5000, 6);
		ShowPlayerDialog(playerid, Hotel, DIALOG_STYLE_LIST, "Hotel", "{00FFFF}Alugar Quarto\n{00D700}Desalugar Quarto", "OK", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[30] || checkpointid == CheckpointsFix[78])
	{
		GameTextForPlayer(playerid, "~r~Biblioteca", 5000, 6);
		format(string, sizeof(string), "{33AAFF}Olá senhor {FF0000}%s {33AAFF}aqui você terá "#TEMPO_ESTUDO" minutos de estudo.\n{FF6600}A mensalidade para estudar é $500!\n{00D700}Bons Estudos!", PlayerName(playerid));
		ShowPlayerDialog(playerid, Faculdade, DIALOG_STYLE_MSGBOX, "Estudo", string, "Estudar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[28] || checkpointid == CheckpointsFix[31])
	{
		GameTextForPlayer(playerid, "~r~Menu de Armas", 5000, 6);
		ShowPlayerDialog(playerid, Armas, DIALOG_STYLE_LIST, "Ammu Nation", "{FFFF00}9mm $149,00\n{9955DE}9mm Silenciada $169,00\n{FF0000}Deagle $349,00\n{99FFFF}Mac-10 $399,00\n{FFFFFF}MP5 $389,00\n{16EB43}AK-47 $699,00\n{C0C0C0}M4 $749,00\n{ff0000}Sniper $999,00\n{33AAFF}Shotgun $489,00", "OK", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[29])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Mudanças ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, "Escolha uma cidade para você fazer a mudança!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Mudanças ~~~~~~~~~~~~~~~");
		if(dini_Int(file, "Casa") == 0)
		{
			ShowPlayerDialog(playerid, cidades, DIALOG_STYLE_LIST, "Escolha a Cidade", "{FF0000}Los Santos\n{33FF00}San Fierro\n{00FFDD}Las Venturas\n{0000FF}Fort Carson", "Morar", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Antes de mudar venda sua atual casa.");
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[63])
	{
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		GameTextForPlayer(playerid, "~p~Delegacia", 5000, 6);
		SendClientMessage(playerid, COLOR_WHITE, "Escolha o serviço e clique em comprar.");
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		ShowPlayerDialog(playerid, DP, DIALOG_STYLE_LIST, "Delegacia", "{33AA33}Carteira Terrestre $500\n{FFFF00}Carteira Aérea $550\n{FF6600}Carteira Náutica $550\n{FF0000}Carteira de Trabalho $150\n{FFFFFF}Porte de Armas $5000\n{FF33FF}Pagar Multas $1000\n{0000FF}Limpar Ficha $1000", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[61])
	{
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		GameTextForPlayer(playerid, "~p~Delegacia", 5000, 6);
		SendClientMessage(playerid, COLOR_WHITE, "Escolha o serviço e clique em comprar.");
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		ShowPlayerDialog(playerid, DP, DIALOG_STYLE_LIST, "Delegacia", "{33AA33}Carteira Terrestre $500\n{FFFF00}Carteira Aérea $550\n{FF6600}Carteira Náutica $550\n{FF0000}Carteira de Trabalho $150\n{FFFFFF}Porte de Armas $5000\n{FF33FF}Pagar Multas $1000\n{0000FF}Limpar Ficha $1000", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[62])
	{
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		GameTextForPlayer(playerid, "~p~Delegacia", 5000, 6);
		SendClientMessage(playerid, COLOR_WHITE, "Escolha o serviço e clique em comprar.");
		SendClientMessage(playerid, Verde, "=============== Delegacia ==================");
		ShowPlayerDialog(playerid, DP, DIALOG_STYLE_LIST, "Delegacia", "{33AA33}Carteira Terrestre $500\n{FFFF00}Carteira Aérea $550\n{FF6600}Carteira Náutica $550\n{FF0000}Carteira de Trabalho $150\n{FFFFFF}Porte de Armas $5000\n{FF33FF}Pagar Multas $1000\n{0000FF}Limpar Ficha $1000", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[64] || checkpointid == CheckpointsFix[77])
	{
		SendClientMessage(playerid, Verde, "=============== Banco ==================");
		GameTextForPlayer(playerid, "~p~Caixa", 5000, 6);
		SendClientMessage(playerid, COLOR_WHITE, "Escolha a opção que te atenda.");
		SendClientMessage(playerid, Verde, "=============== Banco ==================");
		ShowPlayerDialog(playerid, banco, DIALOG_STYLE_LIST, "Caixa", "{FF2F2F}Abrir Conta\n{BBBB00}Depositar\n{33AAFF}Sacar\n{BBDDFF}Saldo\n{9ACD32}Assaltar", "OK", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[66] || checkpointid == CheckpointsFix[67])
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, Verde, "=============== Oficina ===============");
			SendClientMessage(playerid, COLOR_WHITE, "Selecione o serviço e clique em OK.");
			SendClientMessage(playerid, Verde, "=============== Oficina ===============");
			ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um carro!");
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[57] || checkpointid == CheckpointsFix[58] || checkpointid == CheckpointsFix[59] || checkpointid == CheckpointsFix[60])
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			grana = GetPlayerGrana(playerid);
			vid = GetPlayerVehicleID(playerid);
			if(grana > 50)
			{
				SendClientMessage(playerid, Verde, "=============== Lava jato ===============");
				SendClientMessage(playerid, COLOR_WHITE, "Lavando o seu veículo - $50");
				SendClientMessage(playerid, Verde, "=============== Lava jato ===============");
				GivePlayerGrana(playerid, -50);
				RepairVehicle(vid);
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "Você não tem $50.");
			}
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não está em um carro!");
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[36] || checkpointid == CheckpointsFix[37] || checkpointid == CheckpointsFix[38] || checkpointid == CheckpointsFix[39] || checkpointid == CheckpointsFix[40] || checkpointid == CheckpointsFix[41] || checkpointid == CheckpointsFix[42] || checkpointid == CheckpointsFix[43]
		|| checkpointid == CheckpointsFix[52] || checkpointid == CheckpointsFix[53] || checkpointid == CheckpointsFix[54] || checkpointid == CheckpointsFix[55] || checkpointid == CheckpointsFix[56])
	{
		SendClientMessage(playerid, Verde, "=============== Caixa Eletrônico ===============");
		SendClientMessage(playerid, Vermelho, "Digite: /abrirconta para abrir uma conta.");
		SendClientMessage(playerid, Blue, "Digite: /depositar para depositar.");
		SendClientMessage(playerid, Blue, "Digite: /sacar para sacar.");
		SendClientMessage(playerid, COLOR_WHITE, "Digite: /saldo para ver seu saldo.");
		SendClientMessage(playerid, COLOR_WHITE, "Digite: /saldocell para ver seu saldo por telefone.");
		SendClientMessage(playerid, Verde, "=============== Caixa Eletrônico ===============");
		return 1;
	}
	if(checkpointid == CheckpointsFix[3])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Boca de Fumo ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, "Para pegar drogas digite /pegardrogas");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Boca de Fumo ~~~~~~~~~~~~~~~");
		return 1;
	}
	if(checkpointid == CheckpointsFix[56])
	{
		SendClientMessage(playerid, Verde, "=============== Caixa Eletrônico ===============");
		SendClientMessage(playerid, Vermelho, "Digite: /abrirconta para abrir uma conta.");
		SendClientMessage(playerid, Blue, "Digite: /depositar para depositar.");
		SendClientMessage(playerid, Blue, "Digite: /sacar para sacar.");
		SendClientMessage(playerid, COLOR_WHITE, "Digite: /saldo para ver seu saldo.");
		SendClientMessage(playerid, COLOR_WHITE, "Digite: /saldocell para ver seu saldo por telefone.");
		SendClientMessage(playerid, Verde, "=============== Caixa Eletrônico ===============");
		return 1;
	}
	if(checkpointid == CheckpointsFix[4])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Lanches ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Escolha a comida e clique em comprar!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Lanches ~~~~~~~~~~~~~~~");
		ShowPlayerDialog(playerid, comidas, DIALOG_STYLE_LIST, "Comidas", "Hamburger - Preço 7 - Vida - 100\nDuplo Hambuger - Preço 10 - Vida - 100\nPizza - Preço 21 - Vida - 100\nFrango - Preço 2 - Vida - 100\nCoca-Cola - Preço 2 - Vida - 100\nAgua - Preço 1 - Vida - 100", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[0])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - Los Santos ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Escolha a cidade para viagem e clique em comprar!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - Los Santos ~~~~~~~~~~~~~~~");
		ShowPlayerDialog(playerid, viagens, DIALOG_STYLE_LIST, "Viagens", "Los Santos\nSan Fierro\nLas Venturas\nAero Abandonado\nBayside\nEl quebrados\nLas Payasadas\nArea 51\nLas Barrancas\nFort Carson\nMonte Gomery", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[1])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - San Fierro ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Escolha a cidade para viagem e clique em comprar!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - San Fierro ~~~~~~~~~~~~~~~");
		ShowPlayerDialog(playerid, viagens, DIALOG_STYLE_LIST, "Viagens", "Los Santos\nSan Fierro\nLas Venturas\nAero Abandonado\nBayside\nEl quebrados\nLas Payasadas\nArea 51\nLas Barrancas\nFort Carson\nMonte Gomery", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[2])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - Lav Venturas ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, Branco, "Escolha a cidade para viagem e clique em comprar!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Aeroporto - Lav Venturas ~~~~~~~~~~~~~~~");
		ShowPlayerDialog(playerid, viagens, DIALOG_STYLE_LIST, "Viagens", "Los Santos\nSan Fierro\nLas Venturas\nAero Abandonado\nBayside\nEl quebrados\nLas Payasadas\nArea 51\nLas Barrancas\nFort Carson\nMonte Gomery", "Comprar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[33] || checkpointid == CheckpointsFix[34] || checkpointid == CheckpointsFix[32] || checkpointid == CheckpointsFix[35])
	{
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Academia ~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, COLOR_WHITE, "Para todas lutas o preço é $50 mensais, escolha sua luta!");
		SendClientMessage(playerid, Verde, "~~~~~~~~~~~~~~~ Academia ~~~~~~~~~~~~~~~");
		ShowPlayerDialog(playerid, Mudouluta, DIALOG_STYLE_LIST, "Estilos de Lutas", "Luta com as Mãos\nKing-Boxe\nAgarrar e Chutar\nBriga de Rua\nKung-Fu\nNormal", "Selecionar", "Cancelar");
		return 1;
	}
	if(checkpointid == CheckpointsFix[25])
	{
		if(autoescola[playerid] == 0)
		{
			SendClientMessage(playerid, Amarelo, "Você não está em um teste de Auto-Escola!");
		}
		else
		{
			vid = GetPlayerVehicleID(playerid);
			DestroyVehicle(vid);
			vid = INVALID_VEHICLE_ID;
			autoescola[playerid] = 0;
			infratores[playerid] = 0;
			dini_IntSet(file, "HabTerrestre", 1);
			SetPlayerInterior(playerid, autoI);
			SetPlayerPos(playerid, autoX, autoY, autoZ);
			SendClientMessage(playerid, Verde, "|___| Auto-Escola |___|");
			SendClientMessage(playerid, Blue, "Você concluiu o teste de transito!");
 			SendClientMessage(playerid, Blue, "Agora você é um motorista legal!");
 		}
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[18])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Entrega da PIZZA $$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Entregue a pizza digitando /entregarpizza");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Entrega da PIZZA $$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[12] || checkpointid == CheckpointsFix[13] || checkpointid == CheckpointsFix[14] || checkpointid == CheckpointsFix[15] || checkpointid == CheckpointsFix[16] || checkpointid == CheckpointsFix[17])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Pizza-Boy Serviços $$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Carregue sua moto usando /pegarpizza");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Pizza-Boy Serviços $$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[27])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Venda ilegal de Madeira $$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Venda sua madeira /vendermadeira");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Venda ilegal de Madeira $$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[26])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$$$$ Área de Caça $$$$$$$$$$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Para cortar madeiras ilegalmente digite: /cortar");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$$$$ Área de Caça $$$$$$$$$$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[24])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Venda de Peixes $$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Venda seus peixes usando /venderpeixe");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Venda de Peixes $$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[19] || checkpointid == CheckpointsFix[20] || checkpointid == CheckpointsFix[21] || checkpointid == CheckpointsFix[22] || checkpointid == CheckpointsFix[23])
	{
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Ponto de Pesca $$$$$$$$$$$$$$$$");
		SendClientMessage(playerid, COLOR_WHITE, "Para lançar a vara digite: /pescar");
		SendClientMessage(playerid, Verde, "$$$$$$$$$$$$$$$$ Ponto de Pesca $$$$$$$$$$$$$$$$");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[10])
	{
		SendClientMessage(playerid, Verde, "======================== Empregos ========================");
		SendClientMessage(playerid, COLOR_WHITE, "Escolha uma profissão que você deseja execer e clique em 'OK'.");
		SendClientMessage(playerid, Verde, "======================== Empregos ========================");
		ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[11])
	{
		SendClientMessage(playerid, Verde, "================ Delegacia ==================");
		SendClientMessage(playerid, COLOR_WHITE, "Escolha a habilitação e clique em Comprar.");
		SendClientMessage(playerid, Verde, "================ Delegacia ==================");
		ShowPlayerDialog(playerid, DP, DIALOG_STYLE_LIST, "Delegacia", "{33AA33}Carteira Terrestre $500\n{FFFF00}Carteira Aérea $550\n{FF6600}Carteira Náutica $550\n{FF0000}Carteira de Trabalho $150\n{FFFFFF}Porte de Armas $5000\n{FF33FF}Pagar Multas $1000\n{0000FF}Limpar Ficha $1000", "Comprar", "Cancelar");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[8] || checkpointid == CheckpointsFix[9])
	{
		SendClientMessage(playerid, Verde, "=============== Loja de Utilidades ================");
		SendClientMessage(playerid, COLOR_WHITE, "Escolha o produto que deseja comprar e clique em 'COMPRAR'.");
		SendClientMessage(playerid, Verde, "=============== Loja de Utilidades ================");
		ShowPlayerDialog(playerid, lojautilidades, DIALOG_STYLE_LIST, "Loja", "{FF6600}Celular ($350)\n{FF0000}Cartão Telefônico ($10)\n{00FFFF}MP3 Player ($150)\n{FFFF00}Bloco de Lembretes ($5)\n{00FF00}Mira Laser ($500)\n{FF00FF}Capacete ($300)\n{888E8F}Anti H.S ($15000)", "Comprar", "Cancelar");
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[5] || checkpointid == CheckpointsFix[6] || checkpointid == CheckpointsFix[7])
	{
		SendClientMessage(playerid, Verde, "================ Loja de Roupas ================");
		SendClientMessage(playerid, COLOR_WHITE, "Digite a skin e clique em comprar, cada skin custa $50.");
		SendClientMessage(playerid, VERMELHO, "ATENÇÃO COM O ID DA SKIN, USE ID's DE: 1 a 298.");
		SendClientMessage(playerid, Verde, "================ Loja de roupas ================");
		ShowPlayerDialog(playerid, skins, DIALOG_STYLE_INPUT, "Skin's", "{33AAFF}Bem-vindo(a)!\n\n{33AA33}Digite o ID do skin escolhido:", "Comprar", "Voltar");
		return 1;
	}
	// LS ==============================================================================
	if(checkpointid == CheckpointsFix[68])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, 446.9583, -6.4315, 1000.7344);
			SetPlayerInterior(playerid, 1);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[69])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, 1568.2196, -1889.4548, 13.5588);
			SetPlayerInterior(playerid, 0);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[70])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Armas Vip", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
		}
		return 1;
	}
	// SF ==============================================================================
	if(checkpointid == CheckpointsFix[71])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, 1212.0748, -34.0853, 1000.9531);
			SetPlayerInterior(playerid, 3);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[72])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, -2150.0608, 645.9727, 52.2656);
			SetPlayerInterior(playerid, 0);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[73])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Armas Vip", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
		}
		return 1;
	}
	// LV ==============================================================================
	if(checkpointid == CheckpointsFix[74])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, 959.0858, -51.0710, 1001.1172);
			SetPlayerInterior(playerid, 3);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[75])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			SetPlayerPos(playerid, 2490.6018, 2058.0061, 10.6719);
			SetPlayerInterior(playerid, 0);
		}
		return 1;
	}
	if(checkpointid == CheckpointsFix[76])
	{
		if(vip[playerid] == 0)
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Você não é vip!");
		}
		else if(vip[playerid] == 1)
		{
			ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Armas Vip", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
		}
		return 1;
	}
	// =================================================================================
	if(checkpointid == CheckpointsFix[79])
	{
		#if defined SAMsitesUser
		SendClientMessage(playerid, Verde, "================ Controle de Míssil ================");
		SendClientMessage(playerid, COLOR_WHITE, "Você está no controle de Míssil do Pier 69.");
		SendClientMessage(playerid, Verde, "================ Controle de Míssil ================");
		ShowPlayerDialog(playerid, samcontroleg, DIALOG_STYLE_MSGBOX, "Controle de Míssil", "{33AAFF}Centro de controle de Míssil do Pier 69.", "Ligar", "Desligar");
		#else
		SendClientMessage(playerid, roxo, "Controle indisponível no momento!");
		#endif

		return 1;
	}
	if(checkpointid == CheckpointsFix[80])
	{
		#if defined SAMsitesUser
		SendClientMessage(playerid, Verde, "================ Controle de Míssil ================");
		SendClientMessage(playerid, COLOR_WHITE, "Você está no controle de Míssil da Área 51.");
		SendClientMessage(playerid, Verde, "================ Controle de Míssil ================");
		ShowPlayerDialog(playerid, samcontrolea, DIALOG_STYLE_MSGBOX, "Controle de Míssil", "{33AAFF}Centro de controle de Míssil da Área 51.", "Ligar", "Desligar");
		#else
		SendClientMessage(playerid, roxo, "Controle indisponível no momento!");
		#endif

		return 1;
	}

	// Casamento
	if(checkpointid == CheckpointsFix[82])
	{
		if(casar[playerid] == 1)
		{
			if(dini_Int(file, "Sexo") == Masculino)
			{
				format(string, sizeof(string), "{FF00EE}%s, {FFFFFF}você aceita {FF00EE}%s {FFFFFF}como sua legitima esposa?\n{FFFF00}Deverá protege-la na saude e na doença até que suas conexões os separem.", PlayerName(playerid), PlayerName(pedidode[playerid]));
				ShowPlayerDialog(playerid, cerimonia, DIALOG_STYLE_MSGBOX, "Cerimônia de Casamento", string, "Aceito", "Não");
			}
			if(dini_Int(file, "Sexo") == Feminino)
			{
				format(string, sizeof(string), "{FF00EE}%s, {FFFFFF}você aceita {FF00EE}%s {FFFFFF}como seu legitimo esposo?\n{FFFF00}Deverá protege-lo na saude e na doença até que suas conexões os separem.", PlayerName(playerid), PlayerName(pedidode[playerid]));
				ShowPlayerDialog(playerid, cerimonia, DIALOG_STYLE_MSGBOX, "Cerimônia de Casamento", string, "Aceito", "Não");
			}
		}
		else
		{
			SendClientMessage(playerid, roxo, "Você ainda não pediu ninguem em casamento. Use /pedircasamento");
		}
	}
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new string[256];

	// Corrida Pista 1
	if(checkpointid == RaceChecksPista1[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][10], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][11], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][11])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][11], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][12], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][12])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][12], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][13], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][13])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][13], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][14], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][14])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][14], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][15], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][15])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][15], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][16], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][16])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][16], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][17], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][17])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][17], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][18], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][18])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][18], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][19], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista1[playerid][19])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][19], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista1[i] == 1)
					{
						InRacePista1[i] = 0;
						DeletePlayerPistaRace1(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Corrida Pista 2
	if(checkpointid == RaceChecksPista2[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][10], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][11], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][11])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][11], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][12], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][12])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][12], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][13], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][13])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][13], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][14], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][14])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][14], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][15], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista2[playerid][15])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][15], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista2[i] == 1)
					{
						InRacePista2[i] = 0;
						DeletePlayerPistaRace2(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Corrida Pista 3
	if(checkpointid == RaceChecksPista3[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][10], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][11], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][11])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][11], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][12], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][12])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][12], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][13], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][13])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][13], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][14], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][14])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][14], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][15], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][15])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][15], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][16], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][16])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][16], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][17], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][17])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][17], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][18], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][18])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][18], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][19], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][19])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][19], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][20], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][20])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][20], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][21], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][21])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][21], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][22], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][22])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][22], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][23], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][23])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][23], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][24], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][24])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][24], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][25], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][25])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][25], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][26], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][26])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][26], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][27], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][27])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][27], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][28], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][28])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][28], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][29], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][29])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][29], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][30], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][30])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][30], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][31], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][31])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][31], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][32], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][32])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][32], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][33], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][33])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][33], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][34], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][34])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][34], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][35], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][35])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][35], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][36], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][36])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][36], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][37], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][37])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][37], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][38], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][38])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][38], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][39], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][39])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][39], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][40], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][40])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][40], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][41], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][41])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][41], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][42], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][42])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][42], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][43], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][43])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][43], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][44], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista3[playerid][44])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][44], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista3[i] == 1)
					{
						InRacePista3[i] = 0;
						DeletePlayerPistaRace3(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Fliping Pista 4
	if(checkpointid == RaceChecksPista4[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][10], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][11], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][11])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][11], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][12], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][12])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][12], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][13], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][13])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][13], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][14], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][14])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][14], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][15], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][15])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][15], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][16], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][16])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][16], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][17], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][17])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][17], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][18], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][18])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][18], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][19], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][19])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][19], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][20], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][20])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][20], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][21], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][21])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][21], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][22], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][22])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][22], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][23], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista4[playerid][23])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][23], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista4[i] == 1)
					{
						InRacePista4[i] = 0;
						DeletePlayerPistaRace4(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Fliping Pista 5
	if(checkpointid == RaceChecksPista5[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][10], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][11], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][11])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][11], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][12], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][12])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][12], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][13], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][13])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][13], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][14], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][14])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][14], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][15], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][15])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][15], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][16], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][16])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][16], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][17], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][17])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][17], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][18], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][18])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][18], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][19], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][19])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][19], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][20], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][20])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][20], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][21], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][21])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][21], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][22], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][22])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][22], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][23], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][23])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][23], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][24], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][24])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][24], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][25], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][25])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][25], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][26], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][26])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][26], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][27], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][27])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][27], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][28], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][28])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][28], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][29], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][29])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][29], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][30], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][30])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][30], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][31], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][31])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][31], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][32], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][32])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][32], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][33], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][33])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][33], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][34], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][34])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][34], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][35], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista5[playerid][35])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][35], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista5[i] == 1)
					{
						InRacePista5[i] = 0;
						DeletePlayerPistaRace5(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Campeonato de Bike
	if(checkpointid == RaceChecksPista6[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][6], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][6])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][6], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][7], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][7])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][7], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][8], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][8])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][8], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][9], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][9])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][9], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][10], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPista6[playerid][10])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][10], false);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(noevento[i] == 1)
				{
					if(InRacePista6[i] == 1)
					{
						InRacePista6[i] = 0;
						DeletePlayerPistaRace6(i);
					}
				}
			}
		}

		format(string, sizeof(string), "~g~]] ~w~%s Venceu! ~g~]]", PlayerName(playerid));
		GameTextForAll(string, 5000, 3);
	}

	// Maquinista
	if(checkpointid == RaceChecksPistaTrain[playerid][0])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][0], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][1], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPistaTrain[playerid][1])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][1], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][2], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPistaTrain[playerid][2])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][2], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][3], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPistaTrain[playerid][3])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][3], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][4], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPistaTrain[playerid][4])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][4], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][5], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	if(checkpointid == RaceChecksPistaTrain[playerid][5])
	{
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][5], false);
		TogglePlayerDynamicRaceCP(playerid, RaceChecksPistaTrain[playerid][0], true);
		PlayerPlaySound(playerid, 1057, 0, 0, 0);
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[256];
	new car = GetPlayerVehicleID(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	if(dialogid == skinnovato)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			SetPlayerSkin(playerid, 123);
			dini_IntSet(file, "Skin", 123);		  // Masculino
			dini_IntSet(file, "novato", 2);
			dini_IntSet(file, "Sexo", Masculino);
		}
		else
		{
			SetPlayerSkin(playerid, 226);
			dini_IntSet(file, "Skin", 226);		  // Feminino
			dini_IntSet(file, "novato", 2);
			dini_IntSet(file, "Sexo", Feminino);
		}
		return 1;
	}

	if(dialogid == Hotel)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		new grana = GetPlayerGrana(playerid);
		if(response == 1)
		{
			if(listitem == 0)					  // Alugar
			{
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[65]))
				{
					if(grana > 499)
					{
						dini_FloatSet(file, "CasaX", Float:1107.7233);
						dini_FloatSet(file, "CasaY", Float:-1796.2867);
						dini_FloatSet(file, "CasaZ", Float:16.5937);
						dini_IntSet(file, "Hotel", 1);
						GivePlayerGrana(playerid, -500);
						SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 354.1657, 0, 0, 0, 0, 0, 0);
						SendClientMessage(playerid, Amarelo, "Você alugou um quarto em um hotel de Los Santos!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente $500.");
					}
				}
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[81]))
				{
					if(grana > 499)
					{
						dini_FloatSet(file, "CasaX", Float:2232.4436);
						dini_FloatSet(file, "CasaY", Float:-1149.1878);
						dini_FloatSet(file, "CasaZ", Float:25.8552);
						dini_IntSet(file, "Hotel", 1);
						GivePlayerGrana(playerid, -500);
						SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 354.1657, 0, 0, 0, 0, 0, 0);
						SendClientMessage(playerid, Amarelo, "Você alugou um quarto em um hotel de Los Santos!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente $500.");
					}
				}
			}
			if(listitem == 1)					  // Desalugar
			{
				dini_FloatSet(file, "CasaX", Float:1413.7603);
				dini_FloatSet(file, "CasaY", Float:-1756.9359);
				dini_FloatSet(file, "CasaZ", Float:13.5468);
				dini_IntSet(file, "Hotel", 0);
				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 354.1657, 0, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, Amarelo, "Você desalugou o quarto do hotel de Los Santos!");
			}
		}
		return 1;
	}

	if(dialogid == Armas)
	{
		if(response == 1)
		{
			new grana = GetPlayerGrana(playerid);
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(listitem == 0)					  // 9mm
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 148)
					{
						GivePlayerGrana(playerid, -149);
						GivePlayerWeapon(playerid, 22, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 1)					  // 9mm Sileciada
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 168)
					{
						GivePlayerGrana(playerid, -169);
						GivePlayerWeapon(playerid, 23, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 2)					  // Deagle
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 348)
					{
						GivePlayerGrana(playerid, -349);
						GivePlayerWeapon(playerid, 24, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 3)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 398)				  // Mac 10
					{
						GivePlayerGrana(playerid, -399);
						GivePlayerWeapon(playerid, 28, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 4)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 388)				  // MP5
					{
						GivePlayerGrana(playerid, -389);
						GivePlayerWeapon(playerid, 29, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 5)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 698)				  // AK-47
					{
						GivePlayerGrana(playerid, -699);
						GivePlayerWeapon(playerid, 30, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 6)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 748)				  // M4
					{
						GivePlayerGrana(playerid, -749);
						GivePlayerWeapon(playerid, 31, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 7)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 998)				  // Sniper
					{
						GivePlayerGrana(playerid, -999);
						GivePlayerWeapon(playerid, 34, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
			if(listitem == 8)
			{
				if(dini_Int(file, "Porte") == 1)
				{
					if(grana > 488)				  // Shotgun
					{
						GivePlayerGrana(playerid, -489);
						GivePlayerWeapon(playerid, 25, 99999);
						SendClientMessage(playerid, Verde, "Você comprou uma arma, não faça DM fora da favela!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem porte de armas.");
				}
			}
		}
		return 1;
	}

	if(dialogid == Faculdade)
	{
		if(response == 1)
		{
			new grana = GetPlayerGrana(playerid);
			if(Faculdade2 == 1)
			{
				if(grana > 99)
				{
					minutos[playerid] = 0;
					NaFaculdade[playerid] = 1;
					Conversa[playerid] = 0;
					ResetPlayerWeapons(playerid);
					SetPlayerHealth(playerid, 999999);
					GivePlayerGrana(playerid, -100);
					SetPlayerInterior(playerid, 3);
					SetPlayerPos(playerid, -2029.798339, -106.675910, 1035.171875);
					TogglePlayerControllable(playerid, 1);
					SendClientMessage(playerid, Verde, "[SECRETARIA] Nos próximos "#TEMPO_ESTUDO" minutos você ficará estudando.");
					SendClientMessage(playerid, Verde, "Não faça barulho pois você está em uma biblioteca.");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem $100 para pagar a mensalidade.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "A faculdade está fechada no momento.");
				SendClientMessage(playerid, Vermelho, "Veja os horários de funcionamento /horarios");
			}
		}
		return 1;
	}

	if(dialogid == cidades)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "novato") == 1)
		{
			format(STRX, sizeof(STRX), "{00FF00}-| {FFFFFF}%s\n\n{00FF00}Logue-se, digite sua senha:", aname);
		}
		if(response == 1)
		{
			if(listitem == 0)					  // Los Santos
			{
				dini_FloatSet(file, "CasaX", Float:1413.7603);
				dini_FloatSet(file, "CasaY", Float:-1756.9359);
				dini_FloatSet(file, "CasaZ", Float:13.5468);
				if(dini_Int(file, "novato") == 1)
				{
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[29]))
				{
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 1413.7603, -1756.9359, 13.5468);
				}
				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 357.9491, 0, 0, 0, 0, 0, 0);
			}
			if(listitem == 1)					  // San Fierro
			{
				dini_FloatSet(file, "CasaX", Float:-2706.2280);
				dini_FloatSet(file, "CasaY", Float:387.5801);
				dini_FloatSet(file, "CasaZ", Float:4.3749);
				if(dini_Int(file, "novato") == 1)
				{
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[29]))
				{
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, -2706.2280, 387.5801, 4.3749);
				}
				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 270.6406, 0, 0, 0, 0, 0, 0);
			}
			if(listitem == 2)					  // Las Venturas
			{
				dini_FloatSet(file, "CasaX", Float:2330.1411);
				dini_FloatSet(file, "CasaY", Float:2352.7380);
				dini_FloatSet(file, "CasaZ", Float:10.8203);
				if(dini_Int(file, "novato") == 1)
				{
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[29]))
				{
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 2330.1411, 2352.7380, 10.8203);
				}
				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 270.6406, 0, 0, 0, 0, 0, 0);
			}
			if(listitem == 3)					  // Forte Carson
			{
				dini_FloatSet(file, "CasaX", Float:-89.4515);
				dini_FloatSet(file, "CasaY", Float:1223.6799);
				dini_FloatSet(file, "CasaZ", Float:19.7422);
				if(dini_Int(file, "novato") == 1)
				{
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
				if(IsPlayerInDynamicCP(playerid, CheckpointsFix[29]))
				{
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, -89.4515, 1223.6799, 19.7422);
				}
				SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 181.3490, 0, 0, 0, 0, 0, 0);
			}
		}
		return 1;
	}

	if(dialogid == viagens)
	{
		new grana = GetPlayerGrana(playerid);
		if(response == 1)
		{
			if(listitem == 0)					  // Los Santos
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Los Santos!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					Aerols[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)					  // San Fierro
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para San Fierro!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					Aerosf[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Las Venturas!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					Aerolv[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Aero Abandonado!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid,1);
					Aeroabd[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 4)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou Passagens Para Bayside!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					bayside[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 5)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para El Quebrados!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					EQ[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 6)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Las Payasadas!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					LP[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 7)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Area 51!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					a51[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 8)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Las Barrancas!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					LB[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 9)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Fort Carson!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					FC[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 10)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Monte Gomery!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					MG[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 11)
			{
				ShowPlayerDialog(playerid, viagens2, DIALOG_STYLE_LIST, "Viagens", "Palominio Creek\nDillimore\nMonte Chiliad\nAngel Pine", "Comprar", "Cancelar");
			}
		}
		return 1;
	}

	if(dialogid == viagens2)
	{
		if(response == 1)
		{
			new grana = GetPlayerGrana(playerid);
			if(listitem == 0)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Palomino Creek!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					PC[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Dillimore!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					DME[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Monte Chiliad!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					MC[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, 0xFF0000AA, "Você comprou passagens para Angel Pine!");
					SetPlayerPos(playerid, 1.5409, 28.4508, 1199.5938);
					SetPlayerInterior(playerid, 1);
					AP[playerid] = 1;
					SetTimerEx("destinoviagen", 60000, 0, "e", playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
		}
		return 1;
	}

	if(dialogid == comidas)
	{
		if(response == 1)
		{
			new grana = GetPlayerGrana(playerid);
			if(listitem == 0)
			{
				if(grana > 6)
				{
					GivePlayerGrana(playerid, -7);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está comendo Hamburger.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $7,00 com o Hambuger.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)
			{
				if(grana > 9)
				{
					GivePlayerGrana(playerid, -9);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está comendo Hamburger Duplo.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $10,00 com o Hamburger Duplo.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)
			{
				if(grana > 20)
				{
					GivePlayerGrana(playerid, -20);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está comendo Pizza.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $21,00 com a Pizza.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)
			{
				if(grana > 2)
				{
					GivePlayerGrana(playerid, -2);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está comendo Frango.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $3,00 com o Frango.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 4)
			{
				if(grana > 1)
				{
					GivePlayerGrana(playerid, -1);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está tomando Coca-Cola.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $2,00 com a Coca-Cola.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 5)
			{
				if(grana > 0)
				{
					GivePlayerGrana(playerid, -1);

					#if defined AnimLoopsUser
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#else
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					#endif

					SendClientMessage(playerid, 0xff5555ff, "Você está tomando Agua.");
					SendClientMessage(playerid, 0xff5555ff, "Gastou $1,00 com a Agua.");
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
		}
		return 1;
	}

	if(dialogid == Mudouluta)
	{
		if(response == 1)
		{
			new grana = GetPlayerGrana(playerid);
			new pname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(listitem == 0)
			{
				if(grana > 49)
				{
					GivePlayerGrana(playerid, -50);
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta com as mãos.");
					dini_IntSet(file2, "Luta", 1);
					dini_IntSet(file2, "Lutas", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)
			{
				if(grana > 49)
				{
					GivePlayerGrana(playerid, -50);
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta boxing.");
					dini_IntSet(file2, "Luta", 1);
					dini_IntSet(file2, "Lutas", 2);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)
			{
				if(grana > 49)
				{
					GivePlayerGrana(playerid, -50);
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
					SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta agarrar e chutar.");
					dini_IntSet(file2, "Luta", 1);
					dini_IntSet(file2, "Lutas", 3);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)
			{
				if(grana > 49)
				{
					GivePlayerGrana(playerid, -50);
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
					SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta briga de rua.");
					dini_IntSet(file2, "Luta", 1);
					dini_IntSet(file2, "Lutas", 4);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 4)
			{
				if(grana > 49)
				{
					GivePlayerGrana(playerid, -50);
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta para kung-fu.");
					dini_IntSet(file2, "Luta", 1);
					dini_IntSet(file2, "Lutas", 5);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 5)
			{
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				SendClientMessage(playerid, Vermelho, "Você aprendeu o estilo de luta para normal.");
				dini_IntSet(file2, "Luta", 0);
				dini_IntSet(file2, "Lutas", 6);
			}
		}
		return 1;
	}

	if(dialogid == Regras)
	{
		if(response == 1)
		{
			SendClientMessageToAll(Amarelo, "Veja as regras para não cometer burrisse /regras");
		}
		else
		{
			new pname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Não aceitou as Regras", pname);
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
		}
		return 1;
	}

	if(dialogid == pergunta1)
	{
		if(response == 1)
		{
			ShowPlayerDialog(playerid, erro, DIALOG_STYLE_MSGBOX, "Resposta Errada", "{FF0000}Você errou a resposta e infelizmente terá que refazer o teste.", "OK", "");
		}
		else
		{
			ShowPlayerDialog(playerid, pergunta2, DIALOG_STYLE_MSGBOX, "Pergunta 2", "{00D700}A faixa de pedestre é para?", "Pedestres", "Bicicletas");
		}
		return 1;
	}

	if(dialogid == pergunta2)
	{
		if(response == 1)
		{
			ShowPlayerDialog(playerid, acertouperguntas, DIALOG_STYLE_MSGBOX, "Pergunta 3", "{00D700}Para que serve o sinal {FF003F}Vermelho{00D700}?", "Ir em frente", "Parar");
		}
		else
		{
			ShowPlayerDialog(playerid, erro, DIALOG_STYLE_MSGBOX, "Resposta Errada", "{FF0000}Você errou a resposta, e infelizmente terá que refazer o teste.", "OK", "");
		}
		return 1;
	}

	if(dialogid == acertouperguntas)
	{
		if(response == 1)
		{
			ShowPlayerDialog(playerid, erro, DIALOG_STYLE_MSGBOX, "Resposta Errada", "{FF0000}Você errou a resposta, e infelizmente terá que refazer o teste.", "OK", "");
		}
		else
		{
			SendClientMessage(playerid, 0xFFFF00AA, "Pronto, agora vamos ver como você se sai no transito.");
			SendClientMessage(playerid, 0xFFFF00AA, "Complete o circuito até a bandeira vermelha no mapa.");
			autoI = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, autoX, autoY, autoZ);
			new carauto = AddStaticVehicle(560, 369.7051, -2043.5458, 7.3771, 0.8071, 6, 6);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, carauto, 0);
			autoescola[playerid] = 1;
		}
		return 1;
	}

	if(dialogid == AVISO)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(PlayerInfo[playerid][Logged] == 0)
			{
				if(!dini_Exists(file))
				{
					format(STRX, sizeof(STRX),"{A020F0}Bem Vindo (a)\n\nConta: {FF0000}Não Registrada\n\n{EE82EE}Use: {FFFFFF}Nome\n\n{FFFFFF} www.{00FF00}submundo{0000FF}rpg.{FFFFFF}tk\n\n\nDigite Sua Senha Para Registrar ! ", aname);
					ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Registrar", "Sair");
				}
				if(dini_Exists(file))
				{
					format(STRX, sizeof(STRX),"{A020F0}Bem Vindo (a)\n\nConta: {00FF00}Registrada\n\n{FFFFFF} www.{00FF00}submundo{0000FF}rpg.{FFFFFF}tk\n\n\nDigite Sua Senha Para Logar ! ", aname);
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
			}
		}
		else
		{
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Não se Registrou/Logou", aname);
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
		}
	}

	if(dialogid == REGISTRO)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA)
			{
				format(STRX, sizeof(STRX), "{FFFFFF}A senha deve ter entre {00FF00}%d {FFFFFF}e {00FF00}%d {FFFFFF}caracteres!", MIN_SENHA, MAX_SENHA);
				SendClientMessage(playerid, -1, STRX);
				format(STRX, sizeof(STRX), "{FFFFFF}Senha muito grande ou pequena.\n\n{00FF00}%s {FFFFFF}digite outra senha:", aname);
				ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD, "Registrando Conta", STRX, "Registrar", "Sair");
				return 1;
			}
			if(Confirma[playerid] == 0)
			{
				Confirma[playerid] = 1;
				format(PlayerInfo[playerid][cSenha], MAX_SENHA, "%s", inputtext);
				format(STRX, sizeof(STRX), "{00FF00}-| {FFFFFF}%s\n\n{00FF00}Agora confirme sua senha:", aname);
				ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD, "Confirmando Senha", STRX, "Confirmar", "Sair");
			}
			else
			{
				if(strcmp(inputtext, PlayerInfo[playerid][cSenha], true) == 0)
				{
					Confirma[playerid] = 0;
					WP_Hash(bufpass, sizeof(bufpass), inputtext);
					CreateFileAccount(file, bufpass);
					PlayerPlaySound(playerid, 1057, 0, 0, 0);
					ShowPlayerDialog(playerid, cidades, DIALOG_STYLE_LIST, "Cidades", "{FF0000}Los Santos\n{33FF00}San Fierro\n{00FFDD}Las Venturas\n{0000FF}Fort Carson", "Morar", "Cancelar");
				}
				else
				{
					Confirma[playerid] = 0;
					format(STRX, sizeof(STRX), "{00FF00}-| {FFFFFF}%s\n\n{00FF00}A senha digitada não corresponde, tente novamente.\n{FF33FF}Digite sua senha:", aname);
					ShowPlayerDialog(playerid, REGISTRO, DIALOG_STYLE_PASSWORD, "Registrando uma Conta", STRX, "Registrar", "Sair");
				}
			}
		}
		else
		{
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Não se Registrou/Logou", aname);
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
		}
	}

	if(dialogid == LOGIN)
	{
		new ip[128], aname[MAX_PLAYER_NAME];
		GetPlayerIp(playerid, ip, sizeof(ip));
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			new senhaacc[256];
			senhaacc = dini_Get(file, "Senha");
			WP_Hash(bufpass, sizeof(bufpass), inputtext);
			if(strcmp(bufpass, senhaacc, true) == 0)
			{
				PlayerInfo[playerid][Logged] = 1;
				StopAudioStreamForPlayer(playerid);
				pAdmin[playerid] = dini_Int(file, "Admin");
				if(dini_Int(file, "Continuar") == 1)
				{
					SendClientMessage(playerid, -1, "Você pode ir a sua posição salva, use /continuar");
				}
				if(dini_Int(file, "novato") == 2)
				{
					format(string, sizeof(string), "Seu Nick: %s » Seu ID: %d » Seu IP: %s", aname, playerid, ip);
					SendClientMessage(playerid, 0xFFFF00AA, string);
					SendClientMessage(playerid, -1, "Veja sua identidade, digite /rg");
				}
				jasequestro[playerid] = 0;
				NaFaculdade[playerid] = 0;
				Mute[playerid] = 0;
				nautlls[playerid] = 0;
				nautllv[playerid] = 0;
				nobarlv[playerid] = 0;
				nobarls[playerid] = 0;
				nobarsf[playerid] = 0;
				nobarfc[playerid] = 0;
				preso[playerid] = 0;
				algemado[playerid] = 0;
				sequestro[playerid] = 0;
				aviso[playerid] = 0;
				gmod[playerid] = 0;
				amod[playerid] = 0;
				autoescola[playerid] = 0;
				Carregamento[playerid] = 0;
				cacando[playerid] = 0;
				nogame[playerid] = 0;
				nobomber[playerid] = 0;
				admin[playerid] = 0;
				prefsf[playerid] = 0;
				preflv[playerid] = 0;
				xprefls[playerid] = 0;
				nobanco[playerid] = 0;
				vercmds[playerid] = 0;
				statuscp[playerid] = 0;
				votou[playerid] = false;
				InCall[playerid] = 0;
				GetCall[playerid] = 0;
				UpdatePlayerInfo(playerid);

				if(trocandonick[playerid] == 1)
				{
					ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Você está sendo forçado(a) a trocar de nick!\n{00FF00}Agora são permitidos apenas nicks no formato \"Nome_Sobrenome\".\n{33AA33}Digite seu novo nick:", "Mudar", "Sair");
				}
				else
				{
					SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"), 357.9491, 0, 0, 0, 0, 0, 0);
					SpawnPlayer(playerid);
				}
				if(PlayerInfo[playerid][Logged] == 1)
				{
					ProfLabel[playerid] = CreateDynamic3DTextLabel(" ", -1, 0.0, 0.0, 0.4, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);

					TextDrawShowForPlayer(playerid, gps[playerid]);

					#if defined gText2User
                    TextDrawShowForPlayer(playerid, gText2[playerid]);
					#endif

					#if defined gText3User
					TextDrawShowForPlayer(playerid, gText3);
					#endif

					#if defined gText4User
					TextDrawShowForPlayer(playerid, gText4[playerid]);
					#endif

					TextDrawShowForPlayer(playerid, Relogio);

					GangZoneShowForPlayer(playerid, GangZonesFix[1], Vermelho);
					GangZoneShowForPlayer(playerid, GangZonesFix[2], Vermelho);
					GangZoneShowForPlayer(playerid, GangZonesFix[3], Vermelho);
					GangZoneShowForPlayer(playerid, GangZonesFix[4], Vermelho);
					GangZoneShowForPlayer(playerid, GangZonesFix[5], Vermelho);
					GangZoneShowForPlayer(playerid, GangZonesFix[6], Verde);
					GangZoneShowForPlayer(playerid, GangZonesFix[7], Branco);
					GangZoneShowForPlayer(playerid, GangZonesFix[8], Branco);
					GangZoneShowForPlayer(playerid, GangZonesFix[9], Branco);
				}
				PlayerPlaySound(playerid, 1057, 0, 0, 0);
			}
			else
			{
				PlayerInfo[playerid][LoginsFalsos]++;
				if(PlayerInfo[playerid][LoginsFalsos] >= 10)
				{
					format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: %d Tentativas de Login", aname, 10);
					SendClientMessageToAll(Amarelo, STRX);
					KickLog(STRX);
					Kick(playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Senha incorreta!");
                    format(STRX, sizeof(STRX),"{A020F0}Bem Vindo (a)\n\nConta: {00FF00}Registrada\n\n{FFFFFF} www.{00FF00}submundo{0000FF}rpg.{FFFFFF}tk\n\n\nDigite Sua Senha Para Logar ! ", aname);
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
			}
		}
		else
		{
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Não se Registrou/Logou", aname);
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
		}
	}

	if(dialogid == menuprof)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, Baixa, DIALOG_STYLE_LIST, "{FFFFFF}Profissões Classe Baixa {00FF00}( level / estudo )", "Mendigo - 0/0\nEmpregada Doméstica - 1/0\nPedreiro - 1/0\nGari - 2/0\nLixeiro - 3/0\nTemac - 450/0\nCorreios - 5/0\nEstudante - 0/0\nFlanelinha - 0/0\nCantor - 8/0\nPoeta - 6/0\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, Honestas, DIALOG_STYLE_LIST, "{FFFFFF}Profissões Classe Média {00FF00}( level / estudo )", "Motorista Particular - 0/0\nJornalista - 20/4\nFotógrafo - 21/8\nReporter - 21/10\nAncora - 24/14\nMeteorologista - 29/24\nMecânico - 5/5\nRapper - 99/10\nVendedor de Skins - 40/2\nVendedor de Carros - Admin\nFrentista - 35/3\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, Honestas2, DIALOG_STYLE_LIST, "{FFFFFF}Profissões Classe Alta {00FF00}( level / estudo )", "Taxista - 2/4\nParamédico - 10/10\nAposentado - 500/0\nAdvogado - 30/30\nGuarda Costas - 0/0\nCorredor de Rua - 50/0\nPromoter - 20/15\nBibliotecário - 60/100\nvice/presidente - 9999/40\nPrefeito - 4999/99\nPresidente - 9990/99\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, Desonestas, DIALOG_STYLE_LIST, "{FFFFFF}Profissões Criminosas {00FF00}( level / estudo )", "Traficante de Armas - 40/0\nAssasino - 15/0\nTerrorista - 60/0\nSequestrador - 90/0\nAssasino Profissional - 25/0\nProstituta - 5/0\nAssaltante - 50/0\nTraficante - 10/0\nMáfia - 1000/40\nYakuza - 3000/30\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, Governo, DIALOG_STYLE_LIST, "{FFFFFF}Funcionários Públicos {00FF00}( level / estudo )", "Guarda - 60/28\nPolícia Rodoviária - 120/32\nPolícia Militar - 180/38\nPolícia Civil - 180/40\nPolícia Federal - 200/48\nDelegado - 400/52\nBope - 220/28\nSWAT - 220/28\nEspião - 3000/28\nFBI - 180/28\nInterpol - 350/28\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 5)
			{
				ShowPlayerDialog(playerid, industriais, DIALOG_STYLE_LIST, "{FFFFFF}Funcionários Industriais {00FF00}( level / estudo )", "Maquinista - 200/30\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 6)
			{
				ShowPlayerDialog(playerid, organizadores, DIALOG_STYLE_LIST, "{FFFFFF}Organizadores {00FF00}( level / estudo )", "Professor - 5000/500\nEmpregador - 5000/500\nMarines - 3000/40\nDrifter King - 4000/40\nAtirador Elite - 1000/40\nNinja - 2000/40\nVoltar", "OK", "Cancelar");
			}
		}
	}

	if(dialogid == Baixa)						  // Classe Baixa
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)
			{
				if(dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) mendigo(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 50);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 200);
						dini_IntSet(file, "Skin", 200);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 157);
						dini_IntSet(file, "Skin", 157);
					}
					Logarprof(playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem carteira de trabalho, vá até a delegacia e assine.");
				}
			}
			if(listitem == 1)					  // Empregada Doméstica
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 0)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) empregado(a) doméstico(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 51);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 144);
						dini_IntSet(file, "Skin", 144);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 245);
						dini_IntSet(file, "Skin", 245);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/1 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Pedreiro
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 0)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) pedreiro(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 52);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 260);
						dini_IntSet(file, "Skin", 260);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 88);
						dini_IntSet(file, "Skin", 88);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/1 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Gari
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) gari.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 53);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 213);
						dini_IntSet(file, "Skin", 213);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 215);
						dini_IntSet(file, "Skin", 215);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/2 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Lixeiro
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 2)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) lixeiro(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 54);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 135);
						dini_IntSet(file, "Skin", 135);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 157);
						dini_IntSet(file, "Skin", 157);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/3 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 5)					  // Temac
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 449)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um membro da Temac.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 55);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 59);
						dini_IntSet(file, "Skin", 59);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 65);
						dini_IntSet(file, "Skin", 65);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/450 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // Correios
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 4)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um membro dos Correios.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 56);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 24);
						dini_IntSet(file, "Skin", 24);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 13);
						dini_IntSet(file, "Skin", 13);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/5 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 7)					  // Estudante
			{
				if(dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) estudante.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 57);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 23);
						dini_IntSet(file, "Skin", 23);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 152);
						dini_IntSet(file, "Skin", 152);
					}
					Logarprof(playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem carteira de trabalho, vá até a delegacia e assine.");
				}
			}
			if(listitem == 8)					  // Flanelinha
			{
				if(dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) flanelinha.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 58);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 78);
						dini_IntSet(file, "Skin", 78);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 77);
						dini_IntSet(file, "Skin", 77);
					}
					Logarprof(playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem carteira de trabalho, vá até o delegacia e assine.");
				}
			}
			if(listitem == 9)					  // Cantor(a)
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 7)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) cantor(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 59);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 296);
						dini_IntSet(file, "Skin", 296);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 263);
						dini_IntSet(file, "Skin", 263);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/8 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 10)					  // Poeta
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 5)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) poeta.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 60);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 1);
						dini_IntSet(file, "Skin", 1);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 9);
						dini_IntSet(file, "Skin", 9);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/6 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 11)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == Honestas)					  // Classe Média
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Motorista Particular
			{
				if(dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) motorista particular.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 1);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 255);
						dini_IntSet(file, "Skin", 255);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 215);
						dini_IntSet(file, "Skin", 215);
					}
					Logarprof(playerid);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem carteira de trabalho, vá até a delegacia e assine.");
				}
			}
			if(listitem == 1)					  // Jornalista
			{
				if(dini_Int(file, "Level") > 19 && dini_Int(file, "Faculdade") > 3 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) jornalista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 16);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 217);
						dini_IntSet(file, "Skin", 217);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 216);
						dini_IntSet(file, "Skin", 216);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/20 de level, %d/4 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Fotógrafo
			{
				if(dini_Int(file, "Level") > 20 && dini_Int(file, "Faculdade") > 7 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) fotógrafo(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 17);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 223);
						dini_IntSet(file, "Skin", 223);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 219);
						dini_IntSet(file, "Skin", 219);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/21 de level, %d/8 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Reporter
			{
				if(dini_Int(file, "Level") > 21 && dini_Int(file, "Faculdade") > 9 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) reporter.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 18);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 217);
						dini_IntSet(file, "Skin", 217);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 219);
						dini_IntSet(file, "Skin", 219);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/22 de level, %d/10 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Ancora
			{
				if(dini_Int(file, "Level") > 24 && dini_Int(file, "Faculdade") > 13 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é ancora do jornal.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 19);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 187);
						dini_IntSet(file, "Skin", 187);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 194);
						dini_IntSet(file, "Skin", 194);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/25 de level, %d/14 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 5)					  // Meteorologista
			{
				if(dini_Int(file, "Level") > 29 && dini_Int(file, "Faculdade") > 23 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) meteorologista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 20);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 70);
						dini_IntSet(file, "Skin", 70);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 224);
						dini_IntSet(file, "Skin", 224);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/30 de level, %d/24 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // Mecânico(a)
			{
				if(dini_Int(file, "Level") > 4 && dini_Int(file, "Faculdade") > 4 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) mecânico(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 21);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 50);
						dini_IntSet(file, "Skin", 50);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 238);
						dini_IntSet(file, "Skin", 238);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/5 de level, %d/5 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 7)					  // Rappaer
			{
				if(dini_Int(file, "Level") > 99 && dini_Int(file, "Faculdade") > 9 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um rapper.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 22);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 241);
						dini_IntSet(file, "Skin", 241);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 195);
						dini_IntSet(file, "Skin", 195);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/100 de level, %d/10 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 8)					  // Vendedor de Skins
			{
				if(dini_Int(file, "Level") > 39 && dini_Int(file, "Faculdade") > 1 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) vendedor(a) de skins.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 23);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 249);
						dini_IntSet(file, "Skin", 249);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 256);
						dini_IntSet(file, "Skin", 256);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/40 de level, %d/2 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 9)					  // Vendedor de Carros
			{
				if(dini_Int(file, "Level") > 19 && dini_Int(file, "Faculdade") > 4 && pAdmin[playerid] > 1 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) vendedor(a) de carro.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 24);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 18);
						dini_IntSet(file, "Skin", 18);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 191);
						dini_IntSet(file, "Skin", 191);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/20 de level, %d/5 de estudo, %d/4 de admin. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"), pAdmin[playerid]);
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 10)					  // Frentista
			{
				if(dini_Int(file, "Level") > 34 && dini_Int(file, "Faculdade") > 2 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) frentista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 25);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 133);
						dini_IntSet(file, "Skin", 133);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 138);
						dini_IntSet(file, "Skin", 138);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/35 de level, %d/3 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 11)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == Governo)						  // Pública
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Guarda
			{
				if(dini_Int(file, "Level") > 59 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) guarda.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 2);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 164);
						dini_IntSet(file, "Skin", 164);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 308.7138, -1859.3555, 3.0668); // Praia St. M.
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/40 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 1)					  // Polícia Rodoviária
			{
				if(dini_Int(file, "Level") > 119 && dini_Int(file, "Faculdade") > 31 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) policial rodoviário(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 3);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 284);
						dini_IntSet(file, "Skin", 284);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 298);
						dini_IntSet(file, "Skin", 298);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/60 de level, %d/32 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Polícia Militar
			{
				if(dini_Int(file, "Level") > 179 && dini_Int(file, "Faculdade") > 37 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) policial militar.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 4);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 281);
						dini_IntSet(file, "Skin", 281);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/40 de level, %d/38 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Polícia Civil
			{
				if(dini_Int(file, "Level") > 179 && dini_Int(file, "Faculdade") > 39 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) policial civil.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 5);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 280);
						dini_IntSet(file, "Skin", 280);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/75 de level, %d/40 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Polícia Federal
			{
				if(dini_Int(file, "Level") > 199 && dini_Int(file, "Faculdade") > 47 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) policial federal.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 6);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 282);
						dini_IntSet(file, "Skin", 282);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/80 de level, %d/48 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 5)					  // Delegado
			{
				if(dini_Int(file, "Level") > 399 && dini_Int(file, "Faculdade") > 51 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) delegado(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 7);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 266);
						dini_IntSet(file, "Skin", 266);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/85 de level, %d/52 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // BOPE
			{
				if(dini_Int(file, "Level") > 219 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é do BOPE.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 8);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 265);
						dini_IntSet(file, "Skin", 265);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/90 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 7)					  // SWAT
			{
				if(dini_Int(file, "Level") > 219 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é da SWAT.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 9);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 285);
						dini_IntSet(file, "Skin", 285);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					Logarprof(playerid);
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 1182.0980, -2036.8110, 69.0078); // SWAT BASE LS
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/115 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 8)					  // Espião
			{
				if(dini_Int(file, "Level") > 2999 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é da Espião.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 10);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 267);
						dini_IntSet(file, "Skin", 267);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 246);
						dini_IntSet(file, "Skin", 246);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/110 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 9)					  // FBI
			{
				if(dini_Int(file, "Level") > 179 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é do FBI.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 28);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 286);
						dini_IntSet(file, "Skin", 286);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 150);
						dini_IntSet(file, "Skin", 150);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/150 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 10)					  // Interpol
			{
				if(dini_Int(file, "Level") > 349 && dini_Int(file, "Faculdade") > 27 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é da Interpol.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 31);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 288);
						dini_IntSet(file, "Skin", 288);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 141);
						dini_IntSet(file, "Skin", 141);
					}
					if(xprefls[playerid] == 1)
					{
						xprefls[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 1528.0056, -1677.9119, 5.8906); // DPExLS
					}
					if(prefsf[playerid] == 1)
					{
						prefsf[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, -1606.2260, 675.1903, -5.2421); // DPExSF
					}
					if(preflv[playerid] == 1)
					{
						preflv[playerid] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerPos(playerid, 2293.6933, 2451.4687, 10.8203); // DPExLV
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/350 de level, %d/28 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 11)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == Honestas2)					  // Classe Alta
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Taxista
			{
				if(dini_Int(file, "Level") > 1 && dini_Int(file, "Faculdade") > 3 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) taxista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 26);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 262);
						dini_IntSet(file, "Skin", 262);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 298);
						dini_IntSet(file, "Skin", 298);
					}
					Logarprof(playerid);
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 1758.1934, -1860.5705, 13.5785);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/2 de level, %d/4 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 1)					  // Paramédico
			{
				if(dini_Int(file, "Level") > 9 && dini_Int(file, "Faculdade") > 9 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) paramédico.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 27);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 274);
						dini_IntSet(file, "Skin", 274);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 216);
						dini_IntSet(file, "Skin", 216);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/10 de level, %d/10 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Aposentado
			{
				if(dini_Int(file, "Level") > 499 && dini_Int(file, "Faculdade") > 0 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) aposentado(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 33);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 182);
						dini_IntSet(file, "Skin", 182);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 199);
						dini_IntSet(file, "Skin", 199);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/500 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Advogado
			{
				if(dini_Int(file, "Level") > 29 && dini_Int(file, "Faculdade") > 29 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) advogado(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 34);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 186);
						dini_IntSet(file, "Skin", 186);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 192);
						dini_IntSet(file, "Skin", 192);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/30 de level, %d/30 de estudo. E uma carteira de trabalho", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Guarda Costas
			{
				SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) guarda costas.");
				SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
				dini_IntSet(file, "Profissao", 35);
				if(dini_Int(file, "Sexo") == Masculino)
				{
					SetPlayerSkin(playerid, 163);
					dini_IntSet(file, "Skin", 163);
				}
				if(dini_Int(file, "Sexo") == Feminino)
				{
					SetPlayerSkin(playerid, 191);
					dini_IntSet(file, "Skin", 191);
				}
				Logarprof(playerid);
			}
			if(listitem == 5)					  // Corredor de Rua
			{
				if(dini_Int(file, "Level") > 49 && dini_Int(file, "Faculdade") > 0 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) corredor(a) de rua.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 36);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 19);
						dini_IntSet(file, "Skin", 19);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 63);
						dini_IntSet(file, "Skin", 63);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/50 de level, %d/0 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // Promoter
			{
				if(dini_Int(file, "Level") > 19 && dini_Int(file, "Faculdade") > 14 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) promoter.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 38);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 264);
						dini_IntSet(file, "Skin", 264);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 263);
						dini_IntSet(file, "Skin", 263);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/20 de level, %d/15 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 7)					  // Bibliotecário
			{
				if(dini_Int(file, "Level") > 59 && dini_Int(file, "Faculdade") > 99 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) bibliotecário(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 43);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 57);
						dini_IntSet(file, "Skin", 57);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 55);
						dini_IntSet(file, "Skin", 55);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/60 de level, %d/100 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 8)					  // vice/presidente
			{
				if(dini_Int(file, "Level") > 9999 && dini_Int(file, "Faculdade") > 40 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) vice/presidente(madre).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 49);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 68);
						dini_IntSet(file, "Skin", 68);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 148);
						dini_IntSet(file, "Skin", 148);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/9999 de level, %d/40 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 9)					  // Prefeito
			{
				if(dini_Int(file, "Level") > 4999 && dini_Int(file, "Faculdade") > 99 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) prefeito(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 46);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 113);
						dini_IntSet(file, "Skin", 113);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 148);
						dini_IntSet(file, "Skin", 148);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/4999 de level, %d/99 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 10)					  // Presidente
			{
				if(dini_Int(file, "Level") > 9990 && dini_Int(file, "Faculdade") > 99 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) presidente(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 47);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 120);
						dini_IntSet(file, "Skin", 120);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 141);
						dini_IntSet(file, "Skin", 141);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/9900 de level, %d/99 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 11)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == Desonestas)					  // Criminosa
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Traficante de Armas
			{
				if(dini_Int(file, "Level") > 40)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um traficante de armas.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 11);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 116);
						dini_IntSet(file, "Skin", 116);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 190);
						dini_IntSet(file, "Skin", 190);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/40.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 1)					  // Assasino
			{
				if(dini_Int(file, "Level") > 15)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um assasino.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 12);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 121);
						dini_IntSet(file, "Skin", 121);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 198);
						dini_IntSet(file, "Skin", 198);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/15.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Terrorista
			{
				if(dini_Int(file, "Level") > 60)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um terrorista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 13);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 102);
						dini_IntSet(file, "Skin", 102);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 245);
						dini_IntSet(file, "Skin", 245);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/60.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Sequestrador
			{
				if(dini_Int(file, "Level") > 90)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um sequestrador.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 14);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 162);
						dini_IntSet(file, "Skin", 162);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 243);
						dini_IntSet(file, "Skin", 243);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/90.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Assasino Profissional
			{
				if(dini_Int(file, "Level") > 25)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um assasino profissional.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 15);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 168);
						dini_IntSet(file, "Skin", 168);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 201);
						dini_IntSet(file, "Skin", 201);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/25.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 5)					  // Prostituta
			{
				if(dini_Int(file, "Level") > 4)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é uma prostituta.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 37);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 97);
						dini_IntSet(file, "Skin", 97);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 178);
						dini_IntSet(file, "Skin", 178);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/5.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // Assaltante
			{
				if(dini_Int(file, "Level") > 49)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um assaltante.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 41);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 105);
						dini_IntSet(file, "Skin", 105);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 65);
						dini_IntSet(file, "Skin", 65);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/50.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 7)					  // Traficante
			{
				if(dini_Int(file, "Level") > 9)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um traficante.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 44);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 104);
						dini_IntSet(file, "Skin", 104);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 85);
						dini_IntSet(file, "Skin", 85);
					}
					Logarprof(playerid);
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 2154.8842, -1071.1025, 39.2741);
				}
				else
				{
					format(string, sizeof(string), "Você não tem level suficiente, level necessário %d/10.", dini_Int(file, "Level"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 8)					  // Máfia
			{
				if(dini_Int(file, "Level") > 999 && dini_Int(file, "Faculdade") > 39)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é da Máfia.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 64);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 111);
						dini_IntSet(file, "Skin", 111);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 91);
						dini_IntSet(file, "Skin", 91);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/400 de level, %d/40 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 9)					  // Yakuza
			{
				if(dini_Int(file, "Level") > 2999 && dini_Int(file, "Faculdade") > 29)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é da Yakuza.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 62);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 294);
						dini_IntSet(file, "Skin", 294);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 298);
						dini_IntSet(file, "Skin", 298);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/300 de level, %d/30 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 10)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == industriais)					  // Industriais
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Maquinista
			{
				if(dini_Int(file, "Carteira") == 1 && dini_Int(file, "Level") > 199 && dini_Int(file, "Faculdade") > 29)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) maquinista.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 70);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 16);
						dini_IntSet(file, "Skin", 16);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 192);
						dini_IntSet(file, "Skin", 192);
					}
					Logarprof(playerid);
					SetPlayerInterior(playerid, 0);
					SetPlayerPos(playerid, 1697.3809, -1949.3073, 14.1171);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/200 de level, %d/30 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 1)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	if(dialogid == organizadores)				  // Organizadores
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, sizeof(aname));
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(response == 1)
		{
			if(listitem == 0)					  // Professor
			{
				if(dini_Int(file, "Level") > 4999 && dini_Int(file, "Faculdade") > 499 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) professor(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 66);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 70);
						dini_IntSet(file, "Skin", 70);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 150);
						dini_IntSet(file, "Skin", 150);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/700 de level, %d/100 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 1)					  // Empregador
			{
				if(dini_Int(file, "Level") > 4999 && dini_Int(file, "Faculdade") > 499 && dini_Int(file, "Carteira") == 1)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) empregador(a).");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 67);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 153);
						dini_IntSet(file, "Skin", 153);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 172);
						dini_IntSet(file, "Skin", 172);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/800 de level, %d/80 de estudo. E uma carteira de trabalho.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 2)					  // Marines
			{
				if(dini_Int(file, "Level") > 2999 && dini_Int(file, "Faculdade") > 39)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é membro da Marines.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 63);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 203);
						dini_IntSet(file, "Skin", 203);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 214);
						dini_IntSet(file, "Skin", 214);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/1000 de level, %d/40 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 3)					  // Drifter King
			{
				if(dini_Int(file, "Level") > 3999 && dini_Int(file, "Faculdade") > 39)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) Drifter King.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 65);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 299);
						dini_IntSet(file, "Skin", 299);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 152);
						dini_IntSet(file, "Skin", 152);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/1000 de level, %d/40 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 4)					  // Atirador Elite
			{
				if(dini_Int(file, "Level") > 999 && dini_Int(file, "Faculdade") > 39)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) Atirador Elite.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 68);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 271);
						dini_IntSet(file, "Skin", 271);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 141);
						dini_IntSet(file, "Skin", 141);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/500 de level, %d/40 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 5)					  // Ninja
			{
				if(dini_Int(file, "Level") > 1999 && dini_Int(file, "Faculdade") > 39)
				{
					SendClientMessage(playerid, 0x80FF00AA, "Profissão alterada com sucesso, agora você é um(a) Ninja.");
					SendClientMessage(playerid, 0x80FF00AA, "Veja os comandos de sua profissão, digite: /profissao");
					dini_IntSet(file, "Profissao", 69);
					if(dini_Int(file, "Sexo") == Masculino)
					{
						SetPlayerSkin(playerid, 165);
						dini_IntSet(file, "Skin", 165);
					}
					if(dini_Int(file, "Sexo") == Feminino)
					{
						SetPlayerSkin(playerid, 192);
						dini_IntSet(file, "Skin", 192);
					}
					Logarprof(playerid);
				}
				else
				{
					format(string, sizeof(string), "Requer: %d/700 de level, %d/40 de estudo.", dini_Int(file, "Level"), dini_Int(file, "Faculdade"));
					SendClientMessage(playerid, Vermelho, string);
				}
			}
			if(listitem == 6)					  // Voltar
			{
				ShowPlayerDialog(playerid, menuprof, DIALOG_STYLE_LIST, "{FFFFFF}Agência de Empregos", "{33AAFF}Profissões Classe Baixa\n{9ACD32}Profissões Classe Média\n{33AA33}Profissões Classe Alta\n{FFFF00}Profissões Criminosas\n{FFFFFF}Funcionários Públicos\n{BDBD33}Funcionários Industriais\n{2200FF}Organizadores", "OK", "Voltar");
			}
		}
	}

	// ================================== Games ========================================
	if(dialogid == Menugame)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, timecs, DIALOG_STYLE_LIST, "Counter-Striker SA", "{FF0000}Terrorista\n{33AA33}Contra-Terrorista", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, bomberman, DIALOG_STYLE_LIST, "Bomber-Man SA", "{00FFFF}Time 1\n{00D700}Time 2\n{FFFF00}Time 3\n{9955DE}Time 4", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				nogame[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new carbatebate = AddStaticVehicle(539, -2044.9911, -178.0457, 35.3274, 177.6316, 0, 1);
				PutPlayerInVehicle(playerid, carbatebate, 0);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Bate-Bate. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no game Bate-Bate.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é abater outros carros.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 3)
			{
				nogame[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new basquetecar = AddStaticVehicle(411, -2047.7369, -224.9686, 35.3203, 357.4633, 0, 1);
				PutPlayerInVehicle(playerid, basquetecar, 0);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Basquet CAR. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no game Basquet CAR.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é abater outros carros.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, monsterdown, DIALOG_STYLE_LIST, "Monster-Down SA", "{FFFF00}Time 1\n{FF6600}Time 2\n{FF0000}Time 3\n{16EB43}Time 4", "OK", "Cancelar");
			}
			if(listitem == 5)					  // SNAKE
			{
				#if defined SnakeUser
				if(SnakeActive[playerid] == 0)
				{
					new pname[MAX_PLAYER_NAME];
					GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
					ShowPlayerDialog(playerid, SNAKE_DIALOG, DIALOG_STYLE_LIST, "{0000ff}Minigame \"Snake\"", "{ff00ff}Start Game\n{ff00ff}Regras", "OK", "Cancel");
					format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Snake. ( /games )", pname);
					SendClientMessageToAll(-1, string);
					ClearChatbox(playerid, 10);
					SendClientMessage(playerid, Vermelho, "  Você entrou no game Snake.");
					SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é passar os obstáculos.");
					SendClientMessage(playerid, 0xFF0000AA, "  Consiga a pontuação máxima para vencer.");
					SendClientMessage(playerid, roxo, "|_______________________________________|");
				}
				else
				{
					SendClientMessage(playerid, -1, "{0000ff}O jogo já foi ativado!");
				}
				#else
				SendClientMessage(playerid, roxo, "Game desativado temporáriamente!");
				#endif
			}
		}
	}

	if(dialogid == timecs)
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Terrorista
			{
				nogame[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 2217.5080, 1085.0297, 476.7466);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				SetPlayerSkin(playerid, 294);
				SetPlayerColor(playerid, 0xFF0000AA);
				GivePlayerWeapon(playerid, 30, 99999);
				GivePlayerWeapon(playerid, 24, 99999);
				GivePlayerWeapon(playerid, 28, 99999);
				GivePlayerWeapon(playerid, 34, 99999);
				GivePlayerWeapon(playerid, 16, 99999);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Counter-Striker. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time dos terroristas.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é matar os militares.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma contagem.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 1)					  // Contra Terrorista
			{
				nogame[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 2202.1479, 958.3578, 475.7077);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				SetPlayerSkin(playerid, 287);
				SetPlayerColor(playerid, 0x0000FFAA);
				GivePlayerWeapon(playerid, 31, 99999);
				GivePlayerWeapon(playerid, 24, 99999);
				GivePlayerWeapon(playerid, 29, 99999);
				GivePlayerWeapon(playerid, 34, 99999);
				GivePlayerWeapon(playerid, 16, 99999);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Counter-Striker. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time dos contra-terroristas.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é matar os terroristas.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma contagem.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
		}
	}

	if(dialogid == bomberman)
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Time 1
			{
				nogame[playerid] = 1;
				nobomber[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 4094.8359, -2157.9768, 2.0000);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Bomber-Man. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 1 do Bomber-Man.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é explodir outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Aperte ALT para implantar uma bomba.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 1)					  // Time 2
			{
				nogame[playerid] = 1;
				nobomber[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 4123.3745, -2121.5937, 2.0000);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Bomber-Man. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 2 do Bomber-Man.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é explodir outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Aperte ALT para implantar uma bomba.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 2)					  // Time 3
			{
				nogame[playerid] = 1;
				nobomber[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 4095.9814, -2088.6452, 2.0078);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Bomber-Man. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 3 do Bomber-Man.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é explodir outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Aperte ALT para implantar uma bomba.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 3)					  // Time 4
			{
				nogame[playerid] = 1;
				nobomber[playerid] = 1;
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 4061.0732, -2122.8430, 2.0078);

				TogglePlayerControllable(playerid, false);
				SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Bomber-Man. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 4 do Bomber-Man.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é explodir outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Aperte ALT para implantar uma bomba.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
		}
	}

	if(dialogid == monsterdown)
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Time 1
			{
				nogame[playerid] = 1;
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new carmonsterdown = AddStaticVehicle(557, 1499.7893, -1098.3278, 181.5781, 315.4822, -1, -1);
				PutPlayerInVehicle(playerid, carmonsterdown, 0);
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Monster-Down. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 1 do Monster-Down.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é derrubar outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma partida.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 1)					  // Time 2
			{
				nogame[playerid] = 1;
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new carmonsterdown = AddStaticVehicle(557, 1544.6176, -1099.1356, 181.5781, 47.7362, -1, -1);
				PutPlayerInVehicle(playerid, carmonsterdown, 0);
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Monster-Down. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 2 do Monster-Down.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é derrubar outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma partida.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 2)					  // Time 3
			{
				nogame[playerid] = 1;
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new carmonsterdown = AddStaticVehicle(557, 1536.3231, -1076.0557, 181.5781, 132.6492, -1, -1);
				PutPlayerInVehicle(playerid, carmonsterdown, 0);
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Monster-Down. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 3 do Monster-Down.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é derrubar outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma partida.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
			if(listitem == 3)					  // Time 4
			{
				nogame[playerid] = 1;
				lanI[playerid] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, lanX[playerid], lanY[playerid], lanZ[playerid]);
				ResetPlayerWeapons(playerid);
				SetPlayerInterior(playerid, 0);
				new carmonsterdown = AddStaticVehicle(557, 1499.4238, -1063.0838, 181.5779, 223.2612, -1, -1);
				PutPlayerInVehicle(playerid, carmonsterdown, 0);
				new pname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				format(string, sizeof(string), "{99FFFF}Lan House: {9955DE}%s {99FFFF}está jogando Monster-Down. ( /games )", pname);
				SendClientMessageToAll(-1, string);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, 0xFF0000AA, "  Você entrou no time 4 do Monster-Down.");
				SendClientMessage(playerid, 0xFF0000AA, "  Seu objetivo é derrubar outros players.");
				SendClientMessage(playerid, 0xFF8000AA, "  Use /contar para iniciar uma partida.");
				SendClientMessage(playerid, 0x008000AA, "  Use /sairgame para sair.");
				SendClientMessage(playerid, roxo, "|_______________________________________|");
			}
		}
	}

	// SNAKE
	#if defined SnakeUser
	if(dialogid == SNAKE_DIALOG)
	{
		if(!response) return 1;
		else if(listitem == 0)
		{
			ShowPlayerDialog(playerid, LEVEL_DIALOG, DIALOG_STYLE_LIST, "{0000ff}Minigame \"Snake\"->Start Game", "{00ff00}Level 1\n{ffff00}Level 2\n{ff0000}Level 3", "OK", "Cancel");
		}
		else if(listitem == 1)
		{
			ShowPlayerDialog(playerid, RULES_DIALOG, DIALOG_STYLE_MSGBOX, "{0000ff}Minigame \"Snake\"->Regras", "{ff00ff}Controles:\n{00ff00}Use as teclas: cima, baixo, esquerda, direita.\n\n{ff00ff}Regras:\n{00ff00}Você deve coletar 20 cubos para ganhar uma rodada.\n\n{ff00ff}Características:\n{00ff00}Cada rodada tem seus obstáculos. Você não deve bater.", "OK", "Cancel");
		}
	}
	if(dialogid == LEVEL_DIALOG)
	{
		if(!response) return 1;
		else if(listitem == 0)
		{
			StartGame(playerid, 0);
		}
		else if(listitem == 1)
		{
			StartGame(playerid, 1);
		}
		else if(listitem == 2)
		{
			StartGame(playerid, 2);
		}
	}
	if(dialogid == RULES_DIALOG)
	{
		if(!response) return SendClientMessage(playerid, roxo, "VCL, impressionando você!");
		else
		{
			ShowPlayerDialog(playerid, SNAKE_DIALOG, DIALOG_STYLE_LIST, "{0000ff}Minigame \"Snake\"", "{ff00ff}Start Game\n{ff00ff}Regras", "OK", "Cancel");
		}
	}
	#endif

	// =================================================================================
	if(dialogid == skins)
	{
		if(response == 1)
		{
			if(!VBIsNumeric(inputtext))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
				return 1;
			}
			if(StrToInt(inputtext) >= 0 && StrToInt(inputtext) < 299)
			{
				if(StrToInt(inputtext) == 292 || StrToInt(inputtext) == 271 || StrToInt(inputtext) == 272 || StrToInt(inputtext) == 273 || StrToInt(inputtext) == 270 || StrToInt(inputtext) == 269 || StrToInt(inputtext) == 274 || StrToInt(inputtext) == 289)
				{
					SendClientMessage(playerid, Vermelho, "Skin proibido, tente outro! | ID's = 0-298");
					return 1;
				}
				new aname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, aname, sizeof(aname));
				format(file, sizeof(file), PASTA_CONTAS, aname);
				new grana = GetPlayerGrana(playerid);
				if(grana > 49)
				{
					dini_Set(file, "Skin", inputtext);
					SetPlayerSkin(playerid, dini_Int(file, "Skin"));
					GivePlayerGrana(playerid, -50);
					SendClientMessage(playerid, Verde, "Você comprou uma nova roupa com sucesso!");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro para comprar uma roupa.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "ID fora do normal! | ID's = 0-298");
			}
		}
	}

	if(dialogid == DP)							  // Menu
	{
		if(response == 1)
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			new grana = GetPlayerGrana(playerid);
			if(listitem == 0)					  // Terrestre
			{
				if(grana > 299)
				{
					GivePlayerGrana(playerid, -300);
					SendClientMessage(playerid, Blue, "[ATENÇÃO] Neste momento você inicia o teste da Auto-Escola.");
					ShowPlayerDialog(playerid, pergunta1, DIALOG_STYLE_MSGBOX, "Pergunta 1", "{00D700}Ao perceber que será ultrapassado, o condutor deve:", "Acelerar", "Reduzir");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)					  // Aérea
			{
				if(grana > 549)
				{
					GivePlayerGrana(playerid, -550);
					SendClientMessage(playerid, Blue, "Você conseguiu habilitação aérea.");
					dini_IntSet(file, "HabAerea", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)					  // Náutica
			{
				if(grana > 549)
				{
					GivePlayerGrana(playerid, -550);
					SendClientMessage(playerid, Blue, "Você conseguiu habilitação náutica.");
					dini_IntSet(file, "HabNautica", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)					  // Carteira de Trabalho
			{
				if(grana > 149)
				{
					GivePlayerGrana(playerid, -150);
					SendClientMessage(playerid, Blue, "Você assinou uma carteira de trabalho, vá até a prefeitura.");
					dini_IntSet(file, "Carteira", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 4)					  // Porte Armas
			{
				if(grana > 4999)
				{
					GivePlayerGrana(playerid, -5000);
					SendClientMessage(playerid, Blue, "Você conseguiu porte de armas.");
					dini_IntSet(file, "Porte", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 5)					  // Pagar Multas
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					SendClientMessage(playerid, Blue, "Você pagou todas suas multas e não é mais infrator.");
					infratores[playerid] = 0;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 6)					  // Limpar Ficha
			{
				if(grana > 999)
				{
					GivePlayerGrana(playerid, -1000);
					Procurados[playerid] = 0;
					SetPlayerWantedLevel(playerid, 0);
					SendClientMessage(playerid, Blue, "Você limpou sua ficha e não será mais procurado.");
					dini_IntSet(file, "Procurado", 0);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
		}
	}

	if(dialogid == lojautilidades)				  // Menu
	{
		if(response == 1)
		{
			new aname[MAX_PLAYER_NAME];
			new grana = GetPlayerGrana(playerid);
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(listitem == 0)					  // Celular $350
			{
				if(grana > 349)
				{
					GivePlayerGrana(playerid, -350);
					SendClientMessage(playerid, Blue, "Você comprou um Celular use /comandoscelular");
					dini_IntSet(file, "Celular", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 1)					  // Cartão telefônico $10
			{
				if(grana > 9)
				{
					GivePlayerGrana(playerid, -10);
					SendClientMessage(playerid, Blue, "Você comprou um Cartão Telefônico.");
					dini_IntSet(file, "CartaoTelefonico", dini_Int(file, "CartaoTelefonico") +20);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 2)					  // MP3 $150
			{
				if(grana > 149)
				{
					GivePlayerGrana(playerid, -150);
					SendClientMessage(playerid, Blue, "Você comprou um MP3 use /comandosmp3");
					dini_IntSet(file, "MP3", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 3)					  // Bloco de Lembretes
			{
				if(grana > 4)
				{
					GivePlayerGrana(playerid, -5);
					SendClientMessage(playerid, Blue, "Você comprou um Bloco de Lembretes use /lembrete [texto]");
					dini_IntSet(file, "Bloco", 1);
					dini_Set(file, "Lembrete", "Nada");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
			}
			if(listitem == 4)					  // Mira Laser $500
			{
				#if defined LaserUser
				if(grana > 499)
				{
					GivePlayerGrana(playerid, -500);
					SendClientMessage(playerid, Blue, "Você comprou uma Mira Laser use /comandoslaser");
					dini_IntSet(file, "LaserP", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
				#else
				SendClientMessage(playerid, Blue, "Temporariamente indisponível!");
				#endif
			}
			if(listitem == 5)					  // Capacete $400
			{
				#if defined CapaceteUser
				if(grana > 399)
				{
					GivePlayerGrana(playerid, -400);
					SendClientMessage(playerid, Blue, "Você comprou um Capacete faça um bom aproveito.");
					dini_IntSet(file, "TCapacete", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
				#else
				SendClientMessage(playerid, Blue, "Temporariamente indisponível!");
				#endif
			}
			if(listitem == 6)					  // Anti H.S $15000
			{
				#if defined HeadShotUser
				if(grana > 14999)
				{
					GivePlayerGrana(playerid, -15000);
					SendClientMessage(playerid, Blue, "Você comprou um Anti H.S e nunca mais levará Head-Shot.");
					dini_IntSet(file, "AntiHS", 1);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente.");
				}
				#else
				SendClientMessage(playerid, Blue, "Temporariamente indisponível!");
				#endif
			}
		}
	}

	if(dialogid == mp3)							  // Menu
	{
		if(response == 1)
		{
			new nomepl[MAX_PLAYER_NAME];
			GetPlayerName(playerid, nomepl, sizeof(nomepl));
			if(listitem == 0)					  // Música 1
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Nightwish-Nemo.mp3");
				#else
				PlayerPlaySound(playerid, 1062, X, Y, Z);
				#endif
			}
			if(listitem == 1)					  // Música 2
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/LinkinPark-Title-InTheEnd.mp3");
				#else
				PlayerPlaySound(playerid, 1068, X, Y, Z);
				#endif
			}
			if(listitem == 2)					  // Música 3
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Basshunter-Remix.mp3");
				#else
				PlayerPlaySound(playerid, 1076, X, Y, Z);
				#endif
			}
			if(listitem == 3)					  // Música 4
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Pimped-Remix.mp3");
				#else
				PlayerPlaySound(playerid, 1097, X, Y, Z);
				#endif
			}
			if(listitem == 4)					  // Música 5
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Techno-Remix.mp3");
				#else
				PlayerPlaySound(playerid, 1183, X, Y, Z);
				#endif
			}
			if(listitem == 5)					  // Música 6
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Trance-Energy.mp3");
				#else
				PlayerPlaySound(playerid, 1085, X, Y, Z);
				#endif
			}
			if(listitem == 6)					  // Música 7
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/Evanescense-CallMeWhenYouAreSober.mp3");
				#else
				PlayerPlaySound(playerid, 1069, X, Y, Z);
				#endif
			}
			if(listitem == 7)					  // Música 8
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/fort-minor-remember-the-name.mp3");
				#else
				PlayerPlaySound(playerid, 1187, X, Y, Z);
				#endif
			}
			if(listitem == 8)					  // Música 9
			{
				#if defined AudioStreamUser
				PlayAudioStreamForPlayer(playerid, "http://sa-mp.dtenhost.com.br/sounds/TribalInk-Refugee.mp3");
				#else
				PlayerPlaySound(playerid, 1197, X, Y, Z);
				#endif
			}
		}
	}

	if(dialogid == mudarsenha)
	{
		if(response == 1)
		{
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
			if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA)
			{
				format(STRX, sizeof(STRX), "A senha deve ter entre %d e %d caracteres!", MIN_SENHA, MAX_SENHA);
				SendClientMessage(playerid, Vermelho, STRX);
				format(STRX, sizeof(STRX), "{FFFFFF}Ops!\n\n{FFFF00}A senha deve ter entre %d e %d caracteres!\n{33AAFF}Digite sua nova senha:", MIN_SENHA, MAX_SENHA);
				ShowPlayerDialog(playerid, mudarsenha, DIALOG_STYLE_PASSWORD, "Senha", STRX, "Mudar", "Sair");
				return 1;
			}
			if(Confirma[playerid] == 0)
			{
				Confirma[playerid] = 1;
				format(PlayerInfo[playerid][cSenha], MAX_SENHA, "%s", inputtext);
				ShowPlayerDialog(playerid, mudarsenha, DIALOG_STYLE_PASSWORD, "Confirmando Senha", "{FF0000}Digite novamente sua senha:", "Confirmar", "Sair");
			}
			else
			{
				if(strcmp(inputtext, PlayerInfo[playerid][cSenha], true) == 0)
				{
					Confirma[playerid] = 0;
					WP_Hash(bufpass, sizeof(bufpass), inputtext);
					dini_Set(file, "Senha", bufpass);
					SendClientMessage(playerid, Verde, "Senha alterada com sucesso!");
					format(STRX, sizeof(STRX), "{00FF00}-| {FFFFFF}%s\n\n{00FF00}Logue-se, digite sua nova senha:", PlayerName(playerid));
					ShowPlayerDialog(playerid, LOGIN, DIALOG_STYLE_PASSWORD, "CONTA", STRX, "Logar", "Sair");
				}
				else
				{
					Confirma[playerid] = 0;
					ShowPlayerDialog(playerid, mudarsenha, DIALOG_STYLE_PASSWORD, "Trocando Senha", "{FF00FF}A senha digitada não corresponde, tente novamente.\n{FF0000}Digite sua nova senha:", "Mudar", "Sair");
				}
			}
		}
	}

	if(dialogid == mudarnick)
	{
		if(response == 1)
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(strlen(inputtext) <= 0)
			{
				SendClientMessage(playerid, Vermelho, "Você tem que digitar um novo nick.");
				ShowPlayerDialog(playerid, mudarnick , DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{33AAFF}Digite seu novo nick:", "Mudar", "Sair");
				return 1;
			}
			if(strlen(inputtext) > MAX_PLAYER_NAME-1)
			{
				SendClientMessage(playerid, Vermelho, "Você digitou um nick muito grande.");
				ShowPlayerDialog(playerid, mudarnick , DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Você digitou um nick muito grande.\n{33AAFF}Digite seu novo nick:", "Mudar", "Sair");
				return 1;
			}
			// Carregar nova conta
			format(file2, sizeof(file2), PASTA_CONTAS, inputtext);
			if(dini_Exists(file2))
			{
				SendClientMessage(playerid, Vermelho, "O nick que você digitou já existe!");
				ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}O nick que você digitou já existe!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
			}
			else
			{
				for(new i=0; i<sizeof(BadNameChars); i++)
				{
					if(strfind(inputtext, BadNameChars[i], true) != -1 || strlen(inputtext) > MAX_PLAYERS)
					{
						SendClientMessage(playerid, Vermelho, "O nick que você digitou não é permitido!");
						ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Use o formato \"Nome_Sobrenome\" em seu novo nick!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
						return 1;
					}
				}
				if(!strcmp(inputtext, "com", true, 3) || !strcmp(inputtext, "lpt", true, 3) || !strcmp(inputtext, "ipt", true, 3))
				{
					if(inputtext[3] >= '0' && inputtext[3] <= '9' && inputtext[4] == '\0')
					{
						SendClientMessage(playerid, Vermelho, "O nick que você digitou não é permitido!");
						ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Use o formato \"Nome_Sobrenome\" em seu novo nick!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
						return 1;
					}
				}
				else if(!strcmp(inputtext, "clock$", true, 6))
				{
					SendClientMessage(playerid, Vermelho, "O nick que você digitou não é permitido!");
					ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Use o formato \"Nome_Sobrenome\" em seu novo nick!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
					return 1;
				}
				else
				{
					#if _CHANGE_NAME_BEFORE_KICK == true
					// Os jogadores não podem colocar o nosso nome temporário...
					// este nome é "________________", por padrão.
					if(!strcmp(inputtext, szTmpKickName, true, MAX_PLAYER_NAME))
					{
						SendClientMessage(playerid, Vermelho, "O nick que você digitou não é permitido!");
						ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Use o formato \"Nome_Sobrenome\" em seu novo nick!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
						return 1;
					}
					#endif
				}
				if(strfind(inputtext, "_", true) == -1)
				{
					SendClientMessage(playerid, Vermelho, "O nick que você digitou não é permitido!");
					ShowPlayerDialog(playerid, mudarnick, DIALOG_STYLE_INPUT, "Trocando Nick", "{FFFFFF}Ops!\n\n{FF0000}Use o formato \"Nome_Sobrenome\" em seu novo nick!\n{33AAFF}Digite outro nick:", "Mudar", "Sair");
					return 1;
				}

				for(new c = 0; c < MAX_CASAS; c++)
				{
					format(string, sizeof(string), PASTA_CASAS, c);
					if(strcmp(dini_Get(string, "Dono"), aname, false) == 0)
					{
						dini_Set(string, "Dono", inputtext);
					}
				}
				for(new p = 0; p < MAX_PROPS; p++)
				{
					format(string, sizeof(string), PASTA_PROPS, p);
					if(strcmp(dini_Get(string, "Dono"), aname, false) == 0)
					{
						dini_Set(string, "Dono", inputtext);
					}
				}
				for(new c = 0; c < MAX_CONCES; c++)
				{
					format(string, sizeof(string), PASTA_CONCE, c);
					if(strcmp(dini_Get(string, "Dono"), aname, false) == 0)
					{
						dini_Set(string, "Dono", inputtext);
					}
				}
				for(new portao = 0; portao < MAX_PORTOES; portao++)
				{
					format(string, sizeof(string), PASTA_PORTOES, portao);
					if(strcmp(dini_Get(string, "Dono"), aname, false) == 0)
					{
						dini_Set(string, "Dono", inputtext);
					}
					if(strcmp(dini_Get(string, "Convidado1"), aname, false) == 0)
					{
						dini_Set(string, "Convidado1", inputtext);
					}
					if(strcmp(dini_Get(string, "Convidado2"), aname, false) == 0)
					{
						dini_Set(string, "Convidado2", inputtext);
					}
					if(strcmp(dini_Get(string, "Convidado3"), aname, false) == 0)
					{
						dini_Set(string, "Convidado3", inputtext);
					}
				}
				RenameFileAccount(file, file2);
				SetPlayerName(playerid, inputtext);
				ShowPlayerDialog(playerid, mudarnick2, DIALOG_STYLE_PASSWORD, "Senha", "{33AA33}Agora coloque a senha para sua nova conta:", "OK", "Sair");
				format(string, sizeof(string), "%s (ID: %d) mudou seu nick para %s!", aname, playerid, inputtext);
				SendClientMessageToAll(Vermelho, string);
			}
		}
	}

	if(dialogid == mudarnick2)
	{
		if(response == 1)
		{
			format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
			if(strlen(inputtext) < MIN_SENHA || strlen(inputtext) > MAX_SENHA)
			{
				format(STRX, sizeof(STRX), "A senha deve ter entre %d e %d caracteres!", MIN_SENHA, MAX_SENHA);
				SendClientMessage(playerid, Vermelho, STRX);
				format(STRX, sizeof(STRX), "{FFFFFF}Ops!\n\n{FFFF00}A senha deve ter entre %d e %d caracteres!\n{33AAFF}Coloque uma senha para sua nova conta:", MIN_SENHA, MAX_SENHA);
				ShowPlayerDialog(playerid, mudarnick2, DIALOG_STYLE_PASSWORD, "Senha", STRX, "OK", "Sair");
				return 1;
			}
			if(Confirma[playerid] == 0)
			{
				Confirma[playerid] = 1;
				format(PlayerInfo[playerid][cSenha], MAX_SENHA, "%s", inputtext);
				ShowPlayerDialog(playerid, mudarnick2, DIALOG_STYLE_PASSWORD, "Confirmando Senha", "{FF0000}Digite novamente sua senha:", "Confirmar", "Sair");
			}
			else
			{
				if(strcmp(inputtext, PlayerInfo[playerid][cSenha], true) == 0)
				{
					Confirma[playerid] = 0;
					WP_Hash(bufpass, sizeof(bufpass), inputtext);
					dini_Set(file, "Senha", bufpass);
					dini_IntSet(file, "MN", 0);
					ClearChatbox(playerid, 5);
					SendClientMessage(playerid, Verde, "Nick alterado com sucesso!");
					SendClientMessage(playerid, Vermelho, "» Agora mude seu nick no início do 'SA-MP'.");
					SendClientMessage(playerid, BLUEWHITE, "» E entre novamente com o novo nick.");
					SendClientMessage(playerid, Blue, "» E divirta-se.");
					Kick(playerid);
				}
				else
				{
					Confirma[playerid] = 0;
					ShowPlayerDialog(playerid, mudarnick2, DIALOG_STYLE_PASSWORD, "Trocando Senha", "{FF00FF}A senha digitada não corresponde, tente novamente.\n{FF0000}Digite sua nova senha:", "Mudar", "Sair");
				}
			}
		}
		else
		{
			ShowPlayerDialog(playerid, mudarnick2, DIALOG_STYLE_PASSWORD, "Senha", "{FFFFFF}Ops!\n\n{FFFF00}Você já começou a mudar seu nick!\n{33AAFF}Agora termine e coloque uma senha para sua nova conta:", "OK", "Sair");
		}
	}

	// =================================== Banco =======================================
	if(dialogid == depositar)
	{
		if(response == 1)
		{
			new aname[MAX_PLAYER_NAME];
			new tmp22[256], idx22, valor, grana;
			tmp22 = strtok(inputtext, idx22);
			if(!strlen(tmp22))
			{
				ShowPlayerDialog(playerid, depositar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia à depositar:", "Depositar", "Cancelar");
				return 1;
			}
			if(strfind(tmp22, "-", true) != -1)
			{
				ShowPlayerDialog(playerid, depositar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia à depositar:", "Depositar", "Cancelar");
				return 1;
			}
			if(strlen(tmp22) > 8)
			{
				ShowPlayerDialog(playerid, depositar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia à depositar:", "Depositar", "Cancelar");
				return 1;
			}
			valor = strval(inputtext);
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				grana = GetPlayerGrana(playerid);
				if(grana > valor-1 && valor > 0)
				{
					format(string, sizeof(string), "[BANCO] Você depositou a quantia de $%d.", valor);
					SendClientMessage(playerid, Verde, string);
					dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+valor);
					GivePlayerGrana(playerid, -valor);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "[BANCO] Você não tem todo este dinheiro.");
				}

			}
			else
			{
				SendClientMessage(playerid, Vermelho, "[BANCO] Você não tem uma conta bancária.");
			}
		}
	}

	if(dialogid == sacar)
	{
		if(response == 1)
		{
			new aname[MAX_PLAYER_NAME];
			new tmp22[256], idx22, valor;
			tmp22 = strtok(inputtext, idx22);
			if(!strlen(tmp22))
			{
				ShowPlayerDialog(playerid, sacar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia a sacar:", "Sacar", "Cancelar");
				return 1;
			}
			if(strfind(tmp22, "-", true) != -1)
			{
				ShowPlayerDialog(playerid, sacar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia a sacar:", "Sacar", "Cancelar");
				return 1;
			}
			if(strlen(tmp22) > 8)
			{
				ShowPlayerDialog(playerid, sacar, DIALOG_STYLE_INPUT, "Menu Banco", "Quantia incorreta!\nQuantia a sacar:", "Sacar", "Cancelar");
				return 1;
			}
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			valor = strval(inputtext);
			if(dini_Int(file, "ContaBancaria") == 1)
			{
				if(dini_Int(file, "SaldoBancario") > valor && valor > 0)
				{
					format(string, sizeof(string), "[BANCO] Você sacou a quantia de $%d.", valor);
					SendClientMessage(playerid, Verde, string);
					dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-valor);
					GivePlayerGrana(playerid, valor);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "[BANCO] Você não tem todo este dinheiro.");
				}
			}
			else
			{
				SendClientMessage(playerid, Vermelho, "[BANCO] Você não tem uma conta bancária.");
			}
		}
	}

	if(dialogid == banco)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				new aname[MAX_PLAYER_NAME], grana;
				GetPlayerName(playerid, aname, sizeof(aname));
				format(file, sizeof(file), PASTA_CONTAS, aname);
				if(dini_Int(file, "ContaBancaria") == 0)
				{
					grana = GetPlayerGrana(playerid);
					if(grana > 299)
					{
						dini_IntSet(file, "ContaBancaria", 1);
						GivePlayerGrana(playerid, -300);
						dini_IntSet(file, "SaldoBancario", 300);
						SendClientMessage(playerid, 0x00954AAA, "Conta Aberta!");
					}
					else
					{
						SendClientMessage(playerid, Vermelho, "[BANCO] Para você ter uma conta no banco será nescessaário $300.");
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "[BANCO] Você já tem uma conta bancária.");
				}
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, depositar, DIALOG_STYLE_INPUT, "Deposito", "{33AA33}Digite o valor do deposito:", "Depositar", "Sair");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, sacar, DIALOG_STYLE_INPUT, "Sacar", "{33AA33}Digite o valor do saque:", "Sacar", "Sair");
			}
			if(listitem == 3)
			{
				new aname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, aname, sizeof(aname));
				format(file, sizeof(file), PASTA_CONTAS, aname);
				if(dini_Int(file, "ContaBancaria") == 1)
				{
					format(string, sizeof(string), "O seu saldo é $%d.", dini_Int(file, "SaldoBancario"));
					SendClientMessage(playerid, Verde, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "[BANCO] Você não tem uma conta bancária.");
				}
			}
		}
		if(listitem == 4)
		{
			new aname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, aname, sizeof(aname));
			format(file, sizeof(file), PASTA_CONTAS, aname);
			if(dini_Int(file, "rouboubanco") == 1) return SendClientMessage(playerid, Vermelho, "Você já assalto o banco aguarde você upar!");
			if(dini_Int(file, "rouboubanco") == 0)
			{
				if(dini_Int(file, "Profissao") == Assaltante || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
				{
					new Float:x, Float:y, Float:z;
					dini_IntSet(file, "Procurado", 1);
					dini_IntSet(file, "rouboubanco", 1);
					Procurados[playerid]= 1;
					SetPlayerWantedLevel(playerid, 6);
					GivePlayerGrana(playerid, 2500);
					GetPlayerPos(playerid, x, y, z);
					SetTimerEx("CriarExplosao", 2500,false, "fffdf", x, y, z, 2, 50.0);
					GameTextForPlayer(playerid, "~r~Assalto Efetuado ~g~+$2500", 1000, 4);
					format(string, sizeof(string), "[BANCO] O(A) bandido(a) %s assaltou o banco e está sendo procurado(a) pela polícia!", aname);
					SendClientMessageToAll(msgdm, string);
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Voce não é assaltante!");
				}
			}
		}
	}

	// =================================================================================
	if(dialogid == menuarmas)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, pistolas, DIALOG_STYLE_LIST, "Menu De Armas - Pistolas", "9MM Pistol\nPMM Silenciada\nDesert\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, microsmg, DIALOG_STYLE_LIST, "Menu De Armas - Micro Smgs", "Uzi\nTec-9\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, shotguns, DIALOG_STYLE_LIST, "Menu De Armas - Shotguns", "Shotgun\nSaw-Off Shotgun\nCombat Shotgun\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, SMGs, DIALOG_STYLE_LIST, "Menu De Armas - Smg", "MP5\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, rifle, DIALOG_STYLE_LIST, "Menu De Armas - Rifles", "Rifle\nSniper Rifle\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 5)
			{
				ShowPlayerDialog(playerid, assalto, DIALOG_STYLE_LIST, "Menu De Armas - Assalto", "AK-47\nM4\nVoltar", "OK", "Cancelar");
			}
			if(listitem == 6)
			{
				ShowPlayerDialog(playerid, outras, DIALOG_STYLE_LIST, "Menu De Armas - Outras", "Explosivos Remoto\nGranadas\nMolotov's\nSpray\nExtintor\nSerra-Eletrica\nFaca\nVoltar", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == pistolas)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // 9MM
				GivePlayerWeapon(playerid, 22, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
												  // PMM Silenciada
				GivePlayerWeapon(playerid, 23, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
												  // Desert
				GivePlayerWeapon(playerid, 24, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == microsmg)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // Uzi
				GivePlayerWeapon(playerid, 28, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
			}
			ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			if(listitem == 1)
			{
												  // TEc-9
				GivePlayerWeapon(playerid, 32, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma Parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == shotguns)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // Shotgun
				GivePlayerWeapon(playerid, 25, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
												  // Saw-off
				GivePlayerWeapon(playerid, 26, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
												  // Combat
				GivePlayerWeapon(playerid,27,99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem ==3 )
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == SMGs)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // MP5
				GivePlayerWeapon(playerid, 29, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == rifle)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // Rifle
				GivePlayerWeapon(playerid, 33, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
												  // Sniper Rifle
				GivePlayerWeapon(playerid, 34, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == assalto)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // AK-47
				GivePlayerWeapon(playerid, 30, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
												  // M4
				GivePlayerWeapon(playerid, 31, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == outras)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
												  // Explosivos Remoto
				GivePlayerWeapon(playerid, 39, 40);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 1)
			{
												  // Granadas
				GivePlayerWeapon(playerid, 16, 40);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 2)
			{
												  // Molotov's
				GivePlayerWeapon(playerid, 18, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 3)
			{
												  // Spray
				GivePlayerWeapon(playerid, 41, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 4)
			{
												  // Extintor
				GivePlayerWeapon(playerid, 42, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 5)
			{
												  // Serra-Eletrica
				GivePlayerWeapon(playerid, 9, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 6)
			{
												  // faca
				GivePlayerWeapon(playerid, 4, 99999);
				SendClientMessage(playerid, 0x008000AA, "Você comprou uma arma parabéns, não faça DM fora da favela.");
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
			if(listitem == 7)
			{
				ShowPlayerDialog(playerid, menuarmas, DIALOG_STYLE_LIST, "Menu De Armas", "Pistolas\nMicro Smg\nShotguns\nSMG\nRifles\nAssalto\nOutras", "OK", "Cancelar");
			}
		}
	}

	// ================================= Menu Tuning ===================================
	if(dialogid == tunar)						  // Menu
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Rodas
			{
				ShowPlayerDialog(playerid, tunarroda, DIALOG_STYLE_LIST, "Rodas", "{33AAFF}Roda 1\n{9ACD32}Roda 2\n{33AA33}Roda 3\n{FFFF00}Roda 4\n{FF6600}Roda 5\n{00FF0C}Roda 6\n{8AD9FF}Voltar", "Instalar", "Cancelar");
			}
			if(listitem == 1)					  // Cores
			{
				ShowPlayerDialog(playerid, tunarcor, DIALOG_STYLE_LIST, "Cores", "{000000}Preto\n{FFFFFF}Branco\n{00FFFF}Azul Escuro\n{33AAFF}Azul Claro\n{00D700}Verde\n{FF0000}Vermelho\n{FFFF00}Amarelo\n{9955DE}Rosa\n{8AD9FF}Voltar", "Pintar", "Cancelar");
			}
			if(listitem == 2)					  // Paintjobs
			{
				ShowPlayerDialog(playerid, tunarpaint, DIALOG_STYLE_LIST, "Paintjobs", "{FF0000}Estilo 1\n{AFAFAF}Estilo 2\n{33AA33}Estilo 3\n{8AD9FF}Voltar", "Pintar", "Cancelar");
			}
			if(listitem == 3)					  // Neons
			{
				#if defined NeonsUser
				ShowPlayerDialog(playerid, NEON, DIALOG_STYLE_LIST, "Neons", "{00FFFF}Azul\n{00D700}Verde\n{FF0000}Vermelho\n{FFFF00}Amarelo\n{FFFFFF}Branco\n{9955DE}Rosa\n{660000}Nenhum\n{93C9FF}Voltar", "Instalar", "Cancelar");
				#else
				SendClientMessage(playerid, Cinza, "Temporariamente indisponível!");
				#endif
			}
			if(listitem == 4)					  // Nitro
			{
				AddVehicleComponent(car, 1010);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TNitro", 1);
							dini_IntSet(string, "Nitro", 1010);
							return 1;
						}
					}
				}
			}
			if(listitem == 5)					  // Suspensão
			{
				AddVehicleComponent(car, 1087);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TSuspensao", 1);
							dini_IntSet(string, "Suspensao", 1087);
							return 1;
						}
					}
				}
			}
			if(listitem == 6)					  // Subwoofer
			{
				#if defined SubwooferUser
				if(IsAElegy(GetPlayerVehicleID(playerid)))
				{
					ShowPlayerDialog(playerid, subwoofer, DIALOG_STYLE_LIST, "Subwoofer Elegy", "{0D00FF}Super Subwoofer\n{00FBFF}Subwoofer Médio\n{00FF00}Subwoofer Normal\n{FFFF00}Subwoofer Fast\n{FF0000}Subwoofer Pequeno\n{C7C7C7}Remover Subwoofer\n{C95555}Abrir/Fechar Boot\n{93C9FF}Voltar", "OK", "Cancelar");
				}
				else
				{
					SendClientMessage(playerid, RED, "Subwoofer só pode ser instalado no Elegy por enquanto!");
				}
				#else
				SendClientMessage(playerid, Cinza, "Temporariamente indisponível!");
				#endif
			}
			if(listitem == 7)					  // Míssil
			{
				#if defined MissilesUser
				ShowPlayerDialog(playerid, missiles, DIALOG_STYLE_LIST, "Míssil", "{FF0000}Instalar\n{00FFFF}Retirar\n{93C9FF}Voltar", "OK", "Cancelar");
				#else
				SendClientMessage(playerid, Amarelo, "Temporariamente indisponível!");
				#endif
			}
			if(listitem == 8)					  // AutoTuning
			{
				new idcarro = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					AddVehicleComponent(idcarro, 1046);
					AddVehicleComponent(idcarro, 1171);
					AddVehicleComponent(idcarro, 1149);
					AddVehicleComponent(idcarro, 1035);
					AddVehicleComponent(idcarro, 1147);
					AddVehicleComponent(idcarro, 1036);
					AddVehicleComponent(idcarro, 1040);
					ChangeVehiclePaintjob(idcarro, 2);
					ChangeVehicleColor(idcarro, 6, 6);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					AddVehicleComponent(idcarro, 1028);
					AddVehicleComponent(idcarro, 1169);
					AddVehicleComponent(idcarro, 1141);
					AddVehicleComponent(idcarro, 1032);
					AddVehicleComponent(idcarro, 1138);
					AddVehicleComponent(idcarro, 1026);
					AddVehicleComponent(idcarro, 1027);
					ChangeVehiclePaintjob(idcarro, 2);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
				{
					AddVehicleComponent(idcarro, 1046);
					AddVehicleComponent(idcarro, 1153);
					AddVehicleComponent(idcarro, 1150);
					AddVehicleComponent(idcarro, 1054);
					AddVehicleComponent(idcarro, 1049);
					AddVehicleComponent(idcarro, 1047);
					AddVehicleComponent(idcarro, 1051);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 2);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					AddVehicleComponent(idcarro, 1065);
					AddVehicleComponent(idcarro, 1160);
					AddVehicleComponent(idcarro, 1159);
					AddVehicleComponent(idcarro, 1067);
					AddVehicleComponent(idcarro, 1162);
					AddVehicleComponent(idcarro, 1069);
					AddVehicleComponent(idcarro, 1071);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 1);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
				{
					AddVehicleComponent(idcarro, 1064);
					AddVehicleComponent(idcarro, 1155);
					AddVehicleComponent(idcarro, 1154);
					AddVehicleComponent(idcarro, 1055);
					AddVehicleComponent(idcarro, 1158);
					AddVehicleComponent(idcarro, 1056);
					AddVehicleComponent(idcarro, 1062);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 2);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					AddVehicleComponent(idcarro, 1089);
					AddVehicleComponent(idcarro, 1166);
					AddVehicleComponent(idcarro, 1168);
					AddVehicleComponent(idcarro, 1088);
					AddVehicleComponent(idcarro, 1164);
					AddVehicleComponent(idcarro, 1090);
					AddVehicleComponent(idcarro, 1094);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 2);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575)
				{
					AddVehicleComponent(idcarro, 1044);
					AddVehicleComponent(idcarro, 1174);
					AddVehicleComponent(idcarro, 1176);
					AddVehicleComponent(idcarro, 1042);
					AddVehicleComponent(idcarro, 1099);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 0);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
				{
					AddVehicleComponent(idcarro, 1126);
					AddVehicleComponent(idcarro, 1179);
					AddVehicleComponent(idcarro, 1180);
					AddVehicleComponent(idcarro, 1122);
					AddVehicleComponent(idcarro, 1101);
					AddVehicleComponent(idcarro, 1125);
					AddVehicleComponent(idcarro, 1123);
					AddVehicleComponent(idcarro, 1100);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 2);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
				{
					AddVehicleComponent(idcarro, 1104);
					AddVehicleComponent(idcarro, 1182);
					AddVehicleComponent(idcarro, 1184);
					AddVehicleComponent(idcarro, 1108);
					AddVehicleComponent(idcarro, 1107);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 1);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
				{
					AddVehicleComponent(idcarro, 1129);
					AddVehicleComponent(idcarro, 1189);
					AddVehicleComponent(idcarro, 1187);
					AddVehicleComponent(idcarro, 1102);
					AddVehicleComponent(idcarro, 1133);
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
					ChangeVehiclePaintjob(idcarro, 2);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420)
				{
					AddVehicleComponent(idcarro, 1010);
					AddVehicleComponent(idcarro, 1087);
					AddVehicleComponent(idcarro, 1081);
					AddVehicleComponent(idcarro, 1139);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400)
				{
					AddVehicleComponent(idcarro, 1010);
					AddVehicleComponent(idcarro, 1087);
					AddVehicleComponent(idcarro, 1018);
					AddVehicleComponent(idcarro, 1013);
					AddVehicleComponent(idcarro, 1081);
					AddVehicleComponent(idcarro, 1086);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 401)
				{
					AddVehicleComponent(idcarro, 1086);
					AddVehicleComponent(idcarro, 1139);
					AddVehicleComponent(idcarro, 1081);
					AddVehicleComponent(idcarro, 1010);
					AddVehicleComponent(idcarro, 1087);
					AddVehicleComponent(idcarro, 1012);
					AddVehicleComponent(idcarro, 1013);
					AddVehicleComponent(idcarro, 1042);
					AddVehicleComponent(idcarro, 1043);
					AddVehicleComponent(idcarro, 1018);
					AddVehicleComponent(idcarro, 1006);
					AddVehicleComponent(idcarro, 1007);
					AddVehicleComponent(idcarro, 1017);
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
				{
					ChangeVehiclePaintjob(idcarro, 2);
					AddVehicleComponent(idcarro, 1191);
					AddVehicleComponent(idcarro, 1193);
					AddVehicleComponent(idcarro, 1010);
					AddVehicleComponent(idcarro, 1018);
					AddVehicleComponent(idcarro, 1081);
					AddVehicleComponent(idcarro, 1087);
					AddVehicleComponent(idcarro, 1134);
					AddVehicleComponent(idcarro, 1137);
				}
				else
				{
					AddVehicleComponent(idcarro, nitro);
					AddVehicleComponent(idcarro, rodawire);
					AddVehicleComponent(idcarro, suspensao);
				}
			}
		}
	}

	// =================================================================================
	if(dialogid == tunarroda)					  // Rodas
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Estilo 1
			{
				AddVehicleComponent(car, 1084);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1084);
							return 1;
						}
					}
				}
			}
			if(listitem == 1)					  // Estilo 2
			{
				AddVehicleComponent(car, 1073);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1073);
							return 1;
						}
					}
				}
			}
			if(listitem == 2)					  // Estilo 3
			{
				AddVehicleComponent(car, 1075);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1075);
							return 1;
						}
					}
				}
			}
			if(listitem == 3)					  // Estilo 4
			{
				AddVehicleComponent(car, 1077);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1077);
							return 1;
						}
					}
				}
			}
			if(listitem == 4)					  // Estilo 5
			{
				AddVehicleComponent(car, 1079);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1079);
							return 1;
						}
					}
				}
			}
			if(listitem == 5)					  // Estilo 6
			{
				AddVehicleComponent(car, 1080);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TRoda", 1);
							dini_IntSet(string, "Roda", 1080);
							return 1;
						}
					}
				}
			}
			if(listitem == 6)					  // Voltar
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == tunarcor)					  // Cores
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Preto
			{
				ChangeVehicleColor(car, 0, 0);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 0);
							dini_IntSet(string, "Cor2", 0);
							return 1;
						}
					}
				}
			}
			if(listitem == 1)					  // Branco
			{
				ChangeVehicleColor(car, 1, 1);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 1);
							dini_IntSet(string, "Cor2", 1);
							return 1;
						}
					}
				}
			}
			if(listitem == 2)					  // Azul Escuro
			{
				ChangeVehicleColor(car, 425, 425);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 425);
							dini_IntSet(string, "Cor2", 425);
							return 1;
						}
					}
				}
			}
			if(listitem == 3)					  // Azul Claro
			{
				ChangeVehicleColor(car, 2, 2);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 2);
							dini_IntSet(string, "Cor2", 2);
							return 1;
						}
					}
				}
			}
			if(listitem == 4)					  // Verde
			{
				ChangeVehicleColor(car, 16, 16);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 16);
							dini_IntSet(string, "Cor2", 16);
							return 1;
						}
					}
				}
			}
			if(listitem == 5)					  // Vermelho
			{
				ChangeVehicleColor(car, 3, 3);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 3);
							dini_IntSet(string, "Cor2", 3);
							return 1;
						}
					}
				}
			}
			if(listitem == 6)					  // Amarelo
			{
				ChangeVehicleColor(car, 6, 6);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 6);
							dini_IntSet(string, "Cor2", 6);
							return 1;
						}
					}
				}
			}
			if(listitem == 7)					  // Rosa
			{
				ChangeVehicleColor(car, 146, 146);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "Cor1", 146);
							dini_IntSet(string, "Cor2", 146);
							return 1;
						}
					}
				}
			}
			if(listitem == 8)					  // Voltar
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
	}

	// =================================================================================
	if(dialogid == tunarpaint)					  // Paintjobs
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Estilo 1
			{
				ChangeVehiclePaintjob(car, 0);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TPaintjob", 1);
							dini_IntSet(string, "Paintjob", 0);
							return 1;
						}
					}
				}
			}
			if(listitem == 1)					  // Estilo 2
			{
				ChangeVehiclePaintjob(car, 1);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TPaintjob", 1);
							dini_IntSet(string, "Paintjob", 1);
							return 1;
						}
					}
				}
			}
			if(listitem == 2)					  // Estilo 3
			{
				ChangeVehiclePaintjob(car, 2);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == car)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							dini_IntSet(string, "TPaintjob", 1);
							dini_IntSet(string, "Paintjob", 2);
							return 1;
						}
					}
				}
			}
			if(listitem == 3)					  // Voltar
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
	}

	// ================================== Neons ========================================
	#if defined NeonsUser
	if(dialogid == NEON)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "blue", CreateObject(18648,0,0,0,0,0,0));
				SetPVarInt(playerid, "blue1", CreateObject(18648,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "blue"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "blue1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~b~Azul ~w~Instalado!", 3500, 5);
			}
			if(listitem == 1)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "green", CreateObject(18649,0,0,0,0,0,0));
				SetPVarInt(playerid, "green1", CreateObject(18649,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "green"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "green1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~g~Verde ~w~Instalado!", 3500, 5);
			}
			if(listitem == 2)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "red", CreateObject(18647,0,0,0,0,0,0));
				SetPVarInt(playerid, "red1", CreateObject(18647,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "red"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "red1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~r~Vermelho ~w~Instalado!", 3500, 5);
			}
			if(listitem == 3)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "yellow", CreateObject(18650,0,0,0,0,0,0));
				SetPVarInt(playerid, "yellow1", CreateObject(18650,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "yellow"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "yellow1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~y~Amarelo ~w~Instalado!", 3500, 5);
			}
			if(listitem == 4)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "white", CreateObject(18652,0,0,0,0,0,0));
				SetPVarInt(playerid, "white1", CreateObject(18652,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "white"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "white1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~w~Branco ~w~Instalado!", 3500, 5);
			}
			if(listitem == 5)
			{
				SetPVarInt(playerid, "neon", 1);
				SetPVarInt(playerid, "pink", CreateObject(18651,0,0,0,0,0,0));
				SetPVarInt(playerid, "pink1", CreateObject(18651,0,0,0,0,0,0));
				AttachObjectToVehicle(GetPVarInt(playerid, "pink"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(GetPVarInt(playerid, "pink1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "Neon ~p~Rosa ~w~Instalado!", 3500, 5);
			}
			if(listitem == 6)
			{
				DestroyObject(GetPVarInt(playerid, "blue"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "blue1"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "green"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "green1"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "red"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "red1"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "yellow"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "yellow1"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "white"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "white1"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "pink"));
				DeletePVar(playerid, "neon");
				DestroyObject(GetPVarInt(playerid, "pink1"));
				DeletePVar(playerid, "neon");
				GameTextForPlayer(playerid, "~g~Neon retirado!", 3500, 5);
			}
			if(listitem == 7)					  // Voltar
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
	}
	#endif

	#if defined SubwooferUser
	if(dialogid == subwoofer)
	{
		if(response == 1)
		{
			new vid = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
				case 0:																			   // Super Subwoofer
				{
					if(ALready[playerid][0] == false)
					{
						DestroyObject(Sub[vid][1]);
						DestroyObject(Sub[vid][2]);
						DestroyObject(Sub[vid][3]);
						DestroyObject(Sub[vid][4]);
						DestroyObject(Sub[vid][5]);
						Sub[vid][0] = CreateObject(2232, 0, 0, 0, 0, 0, 0);
						AttachObjectToVehicle(Sub[vid][0], vid, 0.025002, -1.729998, -0.020000, -74.369995, 87.133476, -3.015000);
						ALready[playerid][0] = true;
						ALready[playerid][1] = false;
						ALready[playerid][2] = false;
						ALready[playerid][3] = false;
						ALready[playerid][4] = false;
						GameTextForPlayer(playerid, "~r~Subwoofer ~g~Instalado", 3500, 5);
					}
					else return SendClientMessage(playerid, RED, "Você já tem esse subwoofer!");
				}
				case 1:																			   // Medium Subwoofer
				{
					if(ALready[playerid][1] == false)
					{
						DestroyObject(Sub[vid][0]);
						DestroyObject(Sub[vid][3]);
						DestroyObject(Sub[vid][4]);
						DestroyObject(Sub[vid][5]);
						Sub[vid][1] = CreateObject(2231, 0, 0, 0, 0, 0, 0);
						Sub[vid][2] = CreateObject(2231, 0, 0, 0, 0, 0, 0);
						AttachObjectToVehicle(Sub[vid][1], vid, -0.039997, -2.190002, -0.229999, -85.424964, 84.419967, -6.030000);
						AttachObjectToVehicle(Sub[vid][2], vid, -0.829996, -2.190002, -0.229999, -85.424964, 84.419967, -6.030000);
						ALready[playerid][0] = false;
						ALready[playerid][1] = true;
						ALready[playerid][2] = false;
						ALready[playerid][3] = false;
						ALready[playerid][4] = false;
						GameTextForPlayer(playerid, "~r~Subwoofer ~g~Instalado", 3500, 5);
					}
					else return SendClientMessage(playerid, RED, "Você já tem esse subwoofer!");
				}
				case 2:																			   // Normal Subwoofer
				{
					if(ALready[playerid][2] == false)
					{
						DestroyObject(Sub[vid][0]);
						DestroyObject(Sub[vid][1]);
						DestroyObject(Sub[vid][2]);
						DestroyObject(Sub[vid][4]);
						DestroyObject(Sub[vid][5]);
						Sub[vid][3] = CreateObject(2230, 0, 0, 0, 0, 0, 0);
						AttachObjectToVehicle(Sub[vid][3], vid, -0.664996, -2.190002, -0.229999, -85.424964, 84.419967, -6.030000);
						ALready[playerid][0] = false;
						ALready[playerid][1] = false;
						ALready[playerid][2] = true;
						ALready[playerid][3] = false;
						ALready[playerid][4] = false;
						GameTextForPlayer(playerid, "~r~Subwoofer ~g~Instalado", 3500, 5);
					}
					else return SendClientMessage(playerid, RED, "Você já tem esse subwoofer!");
				}
				case 3:																			   // Sub 1
				{
					if(ALready[playerid][3] == false)
					{
						DestroyObject(Sub[vid][0]);
						DestroyObject(Sub[vid][1]);
						DestroyObject(Sub[vid][2]);
						DestroyObject(Sub[vid][3]);
						DestroyObject(Sub[vid][5]);
						Sub[vid][4] = CreateObject(2229, 0, 0, 0, 0, 0, 0);
						AttachObjectToVehicle(Sub[vid][4], vid, -0.649996, -2.190002, -0.229999, -85.424964, 84.419967, -6.030000);
						ALready[playerid][0] = false;
						ALready[playerid][1] = false;
						ALready[playerid][2] = false;
						ALready[playerid][3] = true;
						ALready[playerid][4] = false;
						GameTextForPlayer(playerid, "~r~Subwoofer ~g~Instalado", 3500, 5);
					}
					else return SendClientMessage(playerid, RED, "Você já tem esse subwoofer!");
				}
				case 4:																			   // Sub 2
				{
					if(ALready[playerid][4] == false)
					{
						DestroyObject(Sub[vid][0]);
						DestroyObject(Sub[vid][1]);
						DestroyObject(Sub[vid][2]);
						DestroyObject(Sub[vid][3]);
						DestroyObject(Sub[vid][4]);
						Sub[vid][5] = CreateObject(1840, 0, 0, 0, 0, 0, 0);
						AttachObjectToVehicle(Sub[vid][5], vid, -0.264997, -1.639998, 0.105000, 29.144989, 89.444953, 0.000000);
						ALready[playerid][0] = false;
						ALready[playerid][1] = false;
						ALready[playerid][2] = false;
						ALready[playerid][3] = false;
						ALready[playerid][4] = true;
						GameTextForPlayer(playerid, "~r~Subwoofer ~g~Instalado", 3500, 5);
					}
					else return SendClientMessage(playerid, RED, "Você já tem esse subwoofer!");
				}
				case 5:
				{
					DestroyObject(Sub[vid][0]);
					DestroyObject(Sub[vid][1]);
					DestroyObject(Sub[vid][2]);
					DestroyObject(Sub[vid][3]);
					DestroyObject(Sub[vid][4]);
					DestroyObject(Sub[vid][5]);
					GameTextForPlayer(playerid, "~r~Subwoofer ~g~Removido", 3500, 5);
				}
				case 6:
				{
					if(openclose[playerid] == false)
					{
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 1, objective);
						openclose[playerid] = true;
						GameTextForPlayer(playerid, "~y~Boot ~g~Aberta", 3500, 5);
					}
					else if(openclose[playerid] == true)
					{
						new engine, lights, alarm, doors, bonnet, boot, objective;
						GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, 0, objective);
						openclose[playerid] = false;
						GameTextForPlayer(playerid, "~y~Boot ~g~Fechada", 3500, 5);
					}
				}
				case 7:																			   // Voltar
				{
					ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
				}
			}
		}
	}
	#endif

	// ================================= Míssil ======================================
	#if defined MissilesUser
	if(dialogid == missiles)
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Instalar
			{
				AddVehicleMissiles(GetPlayerVehicleID(playerid), 1.1, -0.2);
				GameTextForPlayer(playerid, "~r~Míssil instalado(s)!", 3500, 5);
			}
			if(listitem == 1)					  // Retirar
			{
				RemoveVehicleMissiles(GetPlayerVehicleID(playerid));
				GameTextForPlayer(playerid, "~r~Míssil retirado(s)!", 3500, 5);
			}
			if(listitem == 2)					  // Voltar
			{
				ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
			}
		}
	}
	#endif

    // ================================= Vcontrole =====================================
    #if defined VControleUser
	if(dialogid == vcontrole)
	{
		if(listitem == 0)
		{
			if(Lights[playerid] == 0)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
				Lights[playerid] = 1;
			}
			else if(Lights[playerid] == 1)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm,doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
				Lights[playerid] = 0;
			}
		}
		if(listitem == 1)
		{
			if(Bonnet[playerid] == 0)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
				Bonnet[playerid] = 1;
			}
			else if(Bonnet[playerid] == 1)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
				Bonnet[playerid] = 0;
			}
		}
		if(listitem == 2)
		{
			if(Boot[playerid] == 0)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
				Boot[playerid] = 1;
			}
			else if(Boot[playerid] == 1)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
				Boot[playerid] = 0;
			}
		}
		if(listitem == 3)
		{
			if(Engine[playerid] == 0)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
				Engine[playerid] = 1;
			}
			else if(Engine[playerid] == 1)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
				Engine[playerid] = 0;
			}
		}
		if(listitem == 4)
		{
			if(Alarm[playerid] == 0)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
				Alarm[playerid] = 1;
			}
			else if(Alarm[playerid] == 1)
			{
				new veh = GetPlayerVehicleID(playerid);
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(veh, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
				Alarm[playerid] = 0;
			}
		}
	}
	#endif

	#if defined SAMsitesUser
	if(dialogid == samcontroleg)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		if(response == 1)
		{
			if(gTeam[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					gTeam[i] = 0;
				}
				format(string, sizeof(string), "%s ligou o sistema de Míssil do Pier 69.", aname);
				SendClientMessageToAll(Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Verde, "O sistema de Míssil já está ligado.");
			}
		}
		else
		{
			if(gTeam[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					gTeam[i] = 1;
				}
				format(string, sizeof(string), "%s desligou o sistema de Míssil do Pier 69.", aname);
				SendClientMessageToAll(Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Verde, "O sistema de Míssil já está desligado.");
			}
		}
	}

	if(dialogid == samcontrolea)
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		if(response == 1)
		{
			if(aTeam[playerid] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					aTeam[i] = 0;
				}
				format(string, sizeof(string), "%s ligou o sistema de Míssil da Área 51.", aname);
				SendClientMessageToAll(Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Verde, "O sistema de Míssil já está ligado.");
			}
		}
		else
		{
			if(aTeam[playerid] == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					aTeam[i] = 1;
				}
				format(string, sizeof(string), "%s desligou o sistema de Míssil da Área 51.", aname);
				SendClientMessageToAll(Verde, string);
			}
			else
			{
				SendClientMessage(playerid, Verde, "O sistema de Míssil já está desligado.");
			}
		}
	}
	#endif

	if(dialogid == escolherid)
	{
		if(response == 1)
		{
			new Float:Xp, Float:Yp, Float:Zp, Float:anGp;

			if(!VBIsNumeric(inputtext))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
			else
			{
				if(StrToInt(inputtext) == 425 || StrToInt(inputtext) == 469 || StrToInt(inputtext) == 538 || StrToInt(inputtext) == 537 || StrToInt(inputtext) == 520 || StrToInt(inputtext) == 449 || StrToInt(inputtext) == 447 || StrToInt(inputtext) == 569 || StrToInt(inputtext) == 570 || StrToInt(inputtext) == 432)
				{
					SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
				}
				else
				{
					if(StrToInt(inputtext) >= 400 && StrToInt(inputtext) <= 611)
					{
						GetPlayerPos(playerid, Xp, Yp, Zp);
						GetPlayerFacingAngle(playerid, anGp);
						format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
						if(dini_Int(file, "VIP") == 0)
						{
							dini_IntSet(file, "UsouConce", 1);
							PlayerAddConceVehicleForPlayer(playerid, StrToInt(inputtext), 100000, Xp, Yp, Zp, anGp, -1, -1);
						}
						else
						{
							dini_IntSet(file, "UsouConce", 0);
							PlayerAddConceVehicleForPlayer(playerid, StrToInt(inputtext), 100000, Xp, Yp, Zp, anGp, -1, -1);
						}
					}
					else
					{
						SendClientMessage(playerid, tcadm, "ID fora do normal! | ID's = 400-611");
					}
				}
			}
		}
	}

	if(dialogid == modeloveiculo)
	{
		new vid,
			Float:carroX, Float:carroY, Float:carroZ,
			Float:carroA;

		if(!VBIsNumeric(inputtext))
		{
			SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
		}
		else
		{
			if(StrToInt(inputtext) == 425 || StrToInt(inputtext) == 469 || StrToInt(inputtext) == 538 || StrToInt(inputtext) == 537 || StrToInt(inputtext) == 520 || StrToInt(inputtext) == 449 || StrToInt(inputtext) == 447 || StrToInt(inputtext) == 569 || StrToInt(inputtext) == 570 || StrToInt(inputtext) == 432)
			{
				SendClientMessage(playerid, tcadm, "Veículo proibido, tente outro! | ID's = 400-611");
			}
			else
			{
				if(StrToInt(inputtext) >= 400 && StrToInt(inputtext) <= 611)
				{
					GetVehiclePos(GetPlayerVehicleID(playerid), carroX, carroY, carroZ);
					GetVehicleZAngle(GetPlayerVehicleID(playerid), carroA);
					for(new c = 0; c < MAX_CONCES; c++)
					{
						format(string, sizeof(string), PASTA_CONCE, c);
						if(dini_Exists(string))
						{
							if(GetPlayerVehicleID(playerid) == dini_Int(string, "Id"))
							{
								if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0 && vip[playerid] == 1)
								{
									dini_IntSet(string, "Modelo", StrToInt(inputtext));
									DestroyVehicle(dini_Int(string, "Id"));
									vid = AddStaticVehicle(StrToInt(inputtext), carroX, carroY, carroZ, carroA, dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
									dini_IntSet(string, "Id", vid);
									SendClientMessage(playerid, Verde, "Modelo alterado com sucesso!");
									return 1;
								}
								else
								{
									SendClientMessage(playerid, Vermelho, "Este carro não é seu!");
									return 1;
								}
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid, tcadm, "ID fora do normal! | ID's = 400-611");
				}
			}
		}
	}

	#if defined AudioStreamUser
	if(dialogid == streamlink && response)
	{
		switch(listitem)
		{
			case 0:
			{
				PlayerStream[playerid] = 1;
				ShowPlayerDialog(playerid, streamlink2, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite o link do Streaming no qual quer reproduzir para si mesmo:\n\n{FF0000}Ex.: http://127.0.0.1:8000", "Play", "Cancelar");
			}
			case 1:
			{
				PlayerStream[playerid] = 2;
				ShowPlayerDialog(playerid, streamlink2, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite o link do Streaming no qual quer reproduzir para outro:\n\n{FF0000}Ex.: http://127.0.0.1:8000", "Play", "Cancelar");
			}
			case 2:
			{
				PlayerStream[playerid] = 3;
				ShowPlayerDialog(playerid, streamlink2, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite o link do Streaming no qual quer reproduzir na sua localização:\n\n{FF0000}Ex.: http://127.0.0.1:8000", "Play", "Cancelar");
			}
			case 3:
			{
				PlayerStream[playerid] = 4;
				ShowPlayerDialog(playerid, streamlink2, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite o link do Streaming no qual quer reproduzir para todos:\n\n{FF0000}Ex.: http://127.0.0.1:8000", "Play", "Cancelar");
			}
		}
	}

	if(dialogid == streamlink2 && response)
	{
		if(strlen(inputtext))
		{
			new linkstr[256];
			format(linkstr, sizeof(linkstr), "%s", inputtext);
			strmid(PlayerStreamLink[playerid], linkstr, 0, 256);
			if (PlayerStream[playerid] == 1)
			{
				PlayerStream[playerid] = 11;
				StreamInfo(playerid);
			}
			else if (PlayerStream[playerid] == 2)
			{
				PlayerStream[playerid] = 22;
				ShowPlayerDialog(playerid, streamlink3, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite o ID do(a) jogador(a) no qual o som será reproduzido:", "Play", "Cancelar");
			}
			else if (PlayerStream[playerid] == 3)
			{
				PlayerStream[playerid] = 33;
				ShowPlayerDialog(playerid, streamlink4, DIALOG_STYLE_INPUT, WHOMADETHIS, "{FFFFFF}Digite a distância em raio no qual o som será ouvido:", "Play", "Cancelar");
			}
			else if (PlayerStream[playerid] == 4)
			{
				PlayerStream[playerid] = 44;
				StreamInfo(playerid);
			}
		}
	}

	if(dialogid == streamlink3 && response)
	{
		new linkstr[256];
		new gpid = strval(inputtext);
		format(linkstr, sizeof(linkstr), "%s", PlayerStreamLink[playerid]);
		StreamInfo(gpid);
	}

	if(dialogid == streamlink4 && response)
	{
		new linkstr[256];
		PlayerStream[playerid] = 333;
		strmid(StreamRadius[playerid], inputtext, 0, 32);
		format(linkstr, sizeof(linkstr), "%s", PlayerStreamLink[playerid]);
		StreamInfo(playerid);
	}
	#endif

	if(dialogid == portaoeditor)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				SetPVarInt(playerid, "EditingXMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a posição X do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 1)
			{
				SetPVarInt(playerid, "EditingYMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a posição Y do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 2)
			{
				SetPVarInt(playerid, "EditingZMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a posição Z do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 3)
			{
				SetPVarInt(playerid, "EditingRXMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a rotação X do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 4)
			{
				SetPVarInt(playerid, "EditingRYMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a rotação Y do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 5)
			{
				SetPVarInt(playerid, "EditingRZMode", 1);
				SendClientMessage(playerid, 0x33AA33FF, "Use a seta esquerda e seta para a direita para ajustar a rotação Z do objeto (Setas do Num Lock).");
				SendClientMessage(playerid, 0x33AA33FF, "Assim que estiver pronto, pressione Enter.");
			}
			if(listitem == 6)
			{
				ShowPlayerDialog(playerid, portaodelet, DIALOG_STYLE_MSGBOX, "Deletando Edição", "{FF0000}Você está prestes a deletar esta edição de portão.\n{00FF00}Caso tenha salvo esta edição o portão irá para /portoesdeletados\n{FFFFFF}Tem certeza de que quer deletar?", "Sim", "Não");
			}
			if(listitem == 7)
			{
				ShowPlayerDialog(playerid, portaosalve, DIALOG_STYLE_LIST, "Salvando Edição", "Salvar Fechado\nSalvar Aberto", "OK", "Voltar");
			}
		}
	}

	if(dialogid == portaosalve)
	{
		if(response == 1)
		{
			new Float:pX, Float:pY, Float:pZ,
				Float:pRX, Float:pRY, Float:pRZ,
				id, portaoid;

			portaoid = GetPVarInt(playerid, "objToEdit");
			id = GetPVarInt(playerid, "pidToEdit");
			format(string, sizeof(string), PASTA_PORTOES, id);
			if(listitem == 0)
			{
				GetDynamicObjectPos(portaoid, pX, pY, pZ);
				GetDynamicObjectRot(portaoid, pRX, pRY, pRZ);
				dini_FloatSet(string, "fCordX", pX);
				dini_FloatSet(string, "fCordY", pY);
				dini_FloatSet(string, "fCordZ", pZ);
				dini_FloatSet(string, "fCordRX", pRX);
				dini_FloatSet(string, "fCordRY", pRY);
				dini_FloatSet(string, "fCordRZ", pRZ);
				if(GetPVarInt(playerid, "pidSalvo") == 0)
				{
					SetPVarInt(playerid, "pidSalvo", 1);
				}
				else
				{
					DestroyDynamic3DTextLabel(potextoid[id]);
					potextoid[id] = Text3D:INVALID_3DTEXT_ID;
				}
				format(STRX, sizeof(STRX), "{00FF00}/ap %d {FF0000}para abrir\n{00FF00}/fp %d {FF0000}para fechar", id, id);
				potextoid[id] = CreateDynamic3DTextLabel(STRX, -1, pX, pY, pZ, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
				SendClientMessage(playerid, Verde, "Portão fechado salvo com sucesso!");
				SendClientMessage(playerid, Verde, "Certifique-se de salvar o portão aberto.");
			}
			if(listitem == 1)
			{
				GetDynamicObjectPos(portaoid, pX, pY, pZ);
				GetDynamicObjectRot(portaoid, pRX, pRY, pRZ);
				dini_FloatSet(string, "aCordX", pX);
				dini_FloatSet(string, "aCordY", pY);
				dini_FloatSet(string, "aCordZ", pZ);
				dini_FloatSet(string, "aCordRX", pRX);
				dini_FloatSet(string, "aCordRY", pRY);
				dini_FloatSet(string, "aCordRZ", pRZ);
				if(GetPVarInt(playerid, "pidSalvo") == 0)
				{
					SetPVarInt(playerid, "pidSalvo", 1);
				}
				else
				{
					DestroyDynamic3DTextLabel(potextoid[id]);
					potextoid[id] = Text3D:INVALID_3DTEXT_ID;
				}
				format(STRX, sizeof(STRX), "{00FF00}/ap %d {FF0000}para abrir\n{00FF00}/fp %d {FF0000}para fechar", id, id);
				potextoid[id] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(string, "fCordX"), dini_Float(string, "fCordY"), dini_Float(string, "fCordZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
				SendClientMessage(playerid, Verde, "Portão aberto salvo com sucesso!");
				SendClientMessage(playerid, Verde, "Certifique-se de salvar o portão fechado.");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
		}
	}

	if(dialogid == deletcarconce)
	{
		if(response == 1)
		{
			new vid = GetPlayerVehicleID(playerid);
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(string, sizeof(string), PASTA_CONCE, carro);
				if(vid == dini_Int(string, "Id"))
				{
					dini_IntSet(string, "TDono", 3);
					dini_Set(string, "Dono", "Ninguem");
					dini_IntSet(string, "CarVIP", 0);
					dini_IntSet(string, "Id", INVALID_VEHICLE_ID);
					DestroyVehicle(vid);
					vid = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}
	}

	if(dialogid == portaodelet)
	{
		if(response == 1)
		{
			new id, portaoid;
			portaoid = GetPVarInt(playerid, "objToEdit");
			id = GetPVarInt(playerid, "pidToEdit");
			format(string, sizeof(string), PASTA_PORTOES, id);
			if(dini_Exists(string))
			{
				if(GetPVarInt(playerid, "pidSalvo") == 1)
				{
					DestroyDynamic3DTextLabel(potextoid[id]);
					potextoid[id] = Text3D:INVALID_3DTEXT_ID;

					dini_IntSet(string, "TDono", 3);
					dini_Set(string, "Dono", "Ninguem");
					dini_IntSet(string, "Id", INVALID_OBJECT_ID);
				}
				else
				{
					dini_Remove(string);
					proximoportao--;
				}
			}
			DestroyDynamicObject(portaoid);
			SendClientMessage(playerid, roxo, "Portão deletado com sucesso!");
		}
		else
		{
			ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
		}
	}

	if(dialogid == vehicleorder)
	{
		if(response == 1)
		{
			incar[playerid] = 0;
			intest[playerid] = 1;
			TogglePlayerControllable(playerid, 1);
			testtime = SetTimerEx("TestDrive", 60000, false, "e", playerid);
			SendClientMessage(playerid, Azul, "Test-Drive iniciado com sucesso!");
			SendClientMessage(playerid, Blue, "Você tem 1 minuto de teste, aproveite!");
		}
		else
		{
			new VehicleID = GetPlayerVehicleID(playerid);
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(file, sizeof(file), PASTA_CONCE, carro);
				if(dini_Exists(file))
				{
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && VehicleID == dini_Int(file, "Id"))
					{
						if(GetPlayerGrana(playerid) >= dini_Int(file, "Preco"))
						{
							if(GetCarros(playerid) < MAX_PLAYER_CONCE)
							{
								dini_IntSet(file, "TDono", 1);
								dini_Set(file, "Dono", PlayerName(playerid));
								if(vip[playerid] == 0)
								{
									GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
									TogglePlayerControllable(playerid, 1);
									dini_IntSet(file, "CarVIP", 0);
									intest[playerid] = 0;
									format(string, sizeof(string), "%s comprou um carro, deve estar feliz!", PlayerName(playerid));
									SendClientMessageToAll(roxo, string);
									ClearChatbox(playerid, 10);
									SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
									SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
									SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
								}
								else
								{
									GivePlayerGrana(playerid, -dini_Int(file, "Preco"));
									TogglePlayerControllable(playerid, 1);
									dini_IntSet(file, "CarVIP", 1);
									intest[playerid] = 0;
									format(string, sizeof(string), "%s comprou um carro equipado com alarme explosivo.", PlayerName(playerid));
									SendClientMessageToAll(roxo, string);
									ClearChatbox(playerid, 10);
									SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
									SendClientMessage(playerid, Amarelo, "  (VIP) Seu carro foi equipado com alarme explosivo.");
									SendClientMessage(playerid, Azul, "  Para ver os comandos do veículo, use: /meucarro");
									SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
								}
								return 1;
							}
							else
							{
								SendClientMessage(playerid, Amarelo, "Você só pode ter "#MAX_PLAYER_CONCE" carros!");
								SendClientMessage(playerid, Vermelho, "Para comprar outro venda um de seus!");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
							return 1;
						}
					}
				}
			}
		}
	}

	if(dialogid == casaorder)
	{
		SetTimerEx("InOrder", OrderTime, 0, "d", playerid);
		if(response == 1)
		{
			new pickupid, iconid;
			for(new c = 0; c < MAX_CASAS; c++)
			{
				format(string, sizeof(string), PASTA_CASAS, c);
				if(dini_Exists(string))
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
					{
						if(GetPlayerGrana(playerid) >= dini_Int(string, "Preco"))
						{
							if(GetCasas(playerid) < 1)
							{
								dini_IntSet(string, "TDono", 1);
								dini_Set(string, "Dono", PlayerName(playerid));
								GivePlayerGrana(playerid, -dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1272, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 32, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Morador: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", c, PlayerName(playerid), dini_Get(string, "Morador"), dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
								OnPlayerCommandText(playerid, "/nascercasa");
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Você só pode ter uma casa!");
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem dinheiro!");
							return 1;
						}
					}
				}
			}
		}
	}

	if(dialogid == proporder)
	{
		SetTimerEx("InOrder", OrderTime, 0, "d", playerid);
		if(response == 1)
		{
			new pickupid, iconid;
			for(new p = 0; p < MAX_PROPS; p++)
			{
				format(string, sizeof(string), PASTA_PROPS, p);
				if(dini_Exists(string))
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
					{
						if(GetPlayerGrana(playerid) >= dini_Int(string, "Preco"))
						{
							if(GetProps(playerid) < 1)
							{
								dini_IntSet(string, "TDono", 1);
								dini_Set(string, "Dono", PlayerName(playerid));
								GivePlayerGrana(playerid, -dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1279, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 51, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", dini_Get(string, "Nome"), p, PlayerName(playerid), dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
								OnPlayerCommandText(playerid, "/salvarprop");
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Você já possui uma propriedade!");
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
							return 1;
						}
					}
				}
			}
		}
	}

	if(dialogid == casaopt)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				new msg[256];
				for(new c = 0; c < MAX_CASAS; c++)
				{
					format(string, sizeof(string), PASTA_CASAS, c);
					if(dini_Exists(string))
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							SetPlayerInterior(playerid, dini_Int(string, "IntID"));

							format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
							SetPlayerPos(playerid, dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"));

							TogglePlayerControllable(playerid, false);
							SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

							format(msg, sizeof(msg), "Bem vindo(a) a sua casa %s.", PlayerName(playerid));
							SendClientMessage(playerid, 0xFF0000AA, msg);
							return 1;
						}
					}
				}
			}
			if(listitem == 1)
			{
				for(new c = 0; c < MAX_CASAS; c++)
				{
					format(string, sizeof(string), PASTA_CASAS, c);
					if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
					{
						if(dini_Int(string, "Trancada") == 1)
						{
							dini_IntSet(string, "Trancada", 0);
							GameTextForPlayer(playerid, "~y~Casa ~r~Destrancada", 3000, 3);
							return 1;
						}
						if(dini_Int(string, "Trancada") == 0)
						{
							dini_IntSet(string, "Trancada", 1);
							GameTextForPlayer(playerid, "~y~Casa ~r~Trancada", 3000, 3);
							return 1;
						}
					}
				}
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, cvdmorador, DIALOG_STYLE_INPUT, "Convidar Morador", "{FFFF00}Você está prestes a convidar alguem para morar em sua casa.\n{FFFFFF}Digite o ID do(a) jogador(a) que deseja convidar:", "Convidar", "Cancelar");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, expmorador, DIALOG_STYLE_INPUT, "Expulsar Morador", "{FFFF00}Você está prestes a expulsar o morador de sua casa.\n{FFFFFF}Digite corretamente o Nick do(a) jogador(a) que deseja expulsar:", "Expulsar", "Cancelar");
			}
			if(listitem == 4)
			{
				new pickupid, iconid;
				for(new c = 0; c < MAX_CASAS; c++)
				{
					format(string, sizeof(string), PASTA_CASAS, c);
					if(dini_Exists(string))
					{
						if(dini_Int(string, "TDono") == 1)
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
								if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
								{
									dini_FloatSet(file, "CasaX", Float:1410.5046);
									dini_FloatSet(file, "CasaY", Float:-1789.7197);
									dini_FloatSet(file, "CasaZ", Float:13.8285);
									dini_IntSet(file, "Casa", 0);
								}
								dini_IntSet(string, "TDono", 0);
								dini_Set(string, "Dono", "Ninguem");
								GivePlayerGrana(playerid, dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1273, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 31, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Morador: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", c, dini_Get(string, "Morador"), dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
								GameTextForPlayer(playerid, "~y~Casa ~r~Vendida", 5000, 6);
								return 1;
							}
						}
					}
				}
			}
		}
	}

	if(dialogid == propopt)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				new msg[256];
				for(new p = 0; p < MAX_PROPS; p++)
				{
					format(string, sizeof(string), PASTA_PROPS, p);
					if(dini_Exists(string))
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							SetPlayerInterior(playerid, dini_Int(string, "IntID"));

							format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
							SetPlayerPos(playerid, dini_Int(file, "PropX"), dini_Int(file, "PropY"), dini_Int(file, "PropZ"));

							TogglePlayerControllable(playerid, false);
							SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

							format(msg, sizeof(msg), "Bem vindo(a) a sua propriedade %s.", PlayerName(playerid));
							SendClientMessage(playerid, 0xFF0000AA, msg);
							return 1;
						}
					}
				}
			}
			if(listitem == 1)
			{
				for(new p = 0; p < MAX_PROPS; p++)
				{
					format(string, sizeof(string), PASTA_PROPS, p);
					if(dini_Exists(string))
					{
						if(dini_Int(string, "TDono") == 1)
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								GivePlayerGrana(playerid, dini_Int(string, "Grana"));
								format(STRX, sizeof(STRX), "Você pegou $%d de sua propriedade!", dini_Int(string, "Grana"));
								SendClientMessage(playerid, Amarelo, STRX);
								dini_IntSet(string, "Grana", 0);
								return 1;
							}
						}
					}
				}
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, propnome, DIALOG_STYLE_INPUT, "Mudar Nome", "{FFFF00}Você está prestes a mudar o nome de sua propriedade.\n{FFFFFF}Digite corretamente o novo nome de sua propriedade:", "Mudar Nome", "Cancelar");
			}
			if(listitem == 3)
			{
				new pickupid, iconid;
				for(new p = 0; p < MAX_PROPS; p++)
				{
					format(string, sizeof(string), PASTA_PROPS, p);
					if(dini_Exists(string))
					{
						if(dini_Int(string, "TDono") == 1)
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
								dini_IntSet(file, "Prop", 0);
								dini_IntSet(string, "TDono", 0);
								dini_Set(string, "Dono", "Ninguem");
								GivePlayerGrana(playerid, dini_Int(string, "Preco"));
								DestroyDynamicPickup(dini_Int(string, "Id"));
								pickupid = CreateDynamicPickup(1279, 1, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), -1, -1, -1, 200.0);
								dini_IntSet(string, "Id", pickupid);
								DestroyDynamicMapIcon(dini_Int(string, "IconId"));
								iconid = CreateDynamicMapIcon(dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ"), 11, 0, -1, -1, -1, 100.0);
								dini_IntSet(string, "IconId", iconid);
								format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", dini_Get(string, "Nome"), p, dini_Int(string, "Preco"));
								UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
								return 1;
							}
						}
					}
				}
			}
		}
	}

	if(dialogid == cvdmorador)
	{
		if(response == 1)
		{
			if(!VBIsNumeric(inputtext))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
			}
			else
			{
				if(IsPlayerConnected(StrToInt(inputtext)))
				{
					for(new c = 0; c < MAX_CASAS; c++)
					{
						format(string, sizeof(string), PASTA_CASAS, c);
						if(dini_Exists(string))
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								if(dini_Int(string, "TMorador") == 1)
								{
									SendClientMessage(playerid, Vermelho, "Já tem um morador em sua casa.");
									return 1;
								}
								morar[StrToInt(inputtext)] = 1;
								moradia[StrToInt(inputtext)] = c;
								convitede[StrToInt(inputtext)] = playerid;
								MoradiaTime[StrToInt(inputtext)] = SetTimerEx("Moradia", 30000, false, "d", StrToInt(inputtext));
								format(STRX, sizeof(STRX), "%s (ID: %d) está convidando você para morar na casa dele(a).", PlayerName(playerid), playerid);
								SendClientMessage(StrToInt(inputtext), Amarelo, STRX);
								SendClientMessage(StrToInt(inputtext), Amarelo, "Para aceitar o convite, use: /aceitarmoradia   ||   Para recusar, use: /recusarmoradia");
								SendClientMessage(playerid, Vermelho, "Convite enviado.");
								return 1;
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Jogador não conectado, tente novamente!");
				}
			}
		}
	}

	if(dialogid == expmorador)
	{
		if(response == 1)
		{
			new string222[256], morador[256];
			for(new c = 0; c < MAX_CASAS; c++)
			{
				format(string, sizeof(string), PASTA_CASAS, c);
				if(dini_Exists(string))
				{
					if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
					{
						if(strcmp(dini_Get(string, "Morador"), inputtext, true) == 0 && dini_Int(string, "TMorador") == 1)
						{
							morador = dini_Get(string, "Morador");
							dini_IntSet(string, "TMorador", 0);
							dini_Set(string, "Morador", "Ninguem");
							format(file, sizeof(file), PASTA_CONTAS, morador);
							if(dini_Exists(file))
							{
								dini_FloatSet(file, "CasaX", Float:1410.5046);
								dini_FloatSet(file, "CasaY", Float:-1789.7197);
								dini_FloatSet(file, "CasaZ", Float:13.8285);
								format(string222, sizeof(string222), "Morador Spawned: %s", morador);
								SendClientMessage(playerid, BLUEWHITE, string222);
							}
							format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Morador: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", c, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
							UpdateDynamic3DTextLabelText(ctextoid[c], -1, STRX);
							SendClientMessage(playerid, Verde, "Expulso!");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "Esse jogador não mora aqui!");
							return 1;
						}
					}
				}
			}
		}
	}

	if(dialogid == propnome)
	{
		if(response == 1)
		{
			for(new p = 0; p < MAX_PROPS; p++)
			{
				format(string, sizeof(string), PASTA_PROPS, p);
				if(dini_Int(string, "TDono") == 1)
				{
					if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), false) == 0)
					{
						dini_Set(string, "Nome", inputtext);
						format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", inputtext, p, dini_Get(string, "Dono"), dini_Int(string, "Preco"));
						UpdateDynamic3DTextLabelText(ptextoid[p], -1, STRX);
						format(string, sizeof(string), "Agora sua propriedade chama-se %s", inputtext);
						SendClientMessage(playerid, Violeta, string);
						return 1;
					}
				}
			}
		}
	}

	if(dialogid == eventos)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				// Corrida Pista 1
				if(EventoCriado != 1)
				{
					EventoCorrida1 = 1;
					AddVehiclesPista1();
				}
				PlayerCreateEvent(playerid, 6, "Circuito LS", 1875.8365, -67.9321, 34.8515, 0);
			}
			if(listitem == 1)
			{
				// Corrida Pista 2
				if(EventoCriado != 1)
				{
					EventoCorrida2 = 1;
					AddVehiclesPista2();
				}
				PlayerCreateEvent(playerid, 10, "Circuito LV", 2118.1799, 834.5526, 6.7419, 0);
			}
			if(listitem == 2)
			{
				// Corrida Pista 3
				if(EventoCriado != 1)
				{
					EventoCorrida3 = 1;
					AddVehiclesPista3();
				}
				PlayerCreateEvent(playerid, 10, "Corrida Maluca", -1818.0738, -601.3825, 16.2623, 0);
			}
			if(listitem == 3)
			{
				// Fliping Pista 4
				if(EventoCriado != 1)
				{
					EventoCorrida4 = 1;
					AddVehiclesPista4();
				}
				PlayerCreateEvent(playerid, 4, "Vôo Leve", -1555.6614, -63.0429, 14.1439, 0);
			}
			if(listitem == 4)
			{
				// Fliping Pista 5
				if(EventoCriado != 1)
				{
					EventoCorrida5 = 1;
					AddVehiclesPista5();
				}
				PlayerCreateEvent(playerid, 4, "Vôo Veloz", 1477.1560, 1691.9953, 10.8125, 0);
			}
			if(listitem == 5)
			{
				// Campeonato de Bike
				if(EventoCriado != 1)
				{
					EventoCorrida6 = 1;
					AddVehiclesPista6();
				}
				PlayerCreateEvent(playerid, 6, "Campeonato de Bike", -2304.6362, -1664.5010, 483.6570, 0);
			}
		}
	}

	// Casamento
	if(dialogid == pedidocasamento)
	{
		if(response == 1)
		{
			casar[playerid] = 1;
			pedidode[pedidode[playerid]] = playerid;
			format(string, sizeof(string), "{FF00EE}%s {FFFFFF}aceitou seu pedido de casamento.\n{FFFF00}Agora é só vocês se encontrarem na Igreja em LS para a cerimônia.", PlayerName(playerid));
			ShowPlayerDialog(pedidode[playerid], pedidoaceito, DIALOG_STYLE_MSGBOX, "Pedido de Casamento", string, "OK", "");
		}
		else
		{
			casar[pedidode[playerid]] = 0;
			format(string, sizeof(string), "{FF00EE}%s {FFFFFF}recusou seu pedido de casamento.\n{FFFF00}Não fique triste, sua hora ainda vai chegar. :)", PlayerName(playerid));
			ShowPlayerDialog(pedidode[playerid], pedidorecusado, DIALOG_STYLE_MSGBOX, "Pedido de Casamento", string, "OK", "");
		}
	}
	if(dialogid == pedidoaceito)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		format(file2, sizeof(file2), PASTA_CONTAS, PlayerName(pedidode[playerid]));

		format(string, sizeof(string), "%s aceitou um pedido de casamento de %s, todos estão convidados.", PlayerName(playerid), PlayerName(pedidode[playerid]));
		SendClientMessageToAll(Amarelo, string);

		if(dini_Int(file, "Sexo") == Masculino && dini_Int(file2, "Sexo") == Masculino)
		{
			SendClientMessageToAll(Vermelho, "Temos um casamento Gay para ver, não quera perder. ;)");
		}
		if(dini_Int(file, "Sexo") == Feminino && dini_Int(file2, "Sexo") == Feminino)
		{
			SendClientMessageToAll(Vermelho, "Temos um casamento Lesbico para ver, não quera perder. ;)");
		}

		SendClientMessageToAll(Amarelo, "A cerimônia será realizada no grande Pier na Praia de Santa Maria em LS.");
	}
	if(dialogid == pedidorecusado)
	{
		pedidode[playerid] = INVALID_PLAYER_ID;
	}
	if(dialogid == cerimonia)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(response == 1)
		{
			dini_IntSet(file, "Casado", 1);
			dini_Set(file, "CasouCom", PlayerName(pedidode[playerid]));

			format(string, sizeof(string), "%s casou-se com %s, felicidades para os dois.", PlayerName(playerid), PlayerName(pedidode[playerid]));
			SendClientMessageToAll(Amarelo, string);

			casar[playerid] = 0;
			pedidode[playerid] = INVALID_PLAYER_ID;
		}
		else
		{
			if(dini_Int(file, "Sexo") == Masculino)
			{
				format(string, sizeof(string), "{003300}Ops, agora case!\n\n{FF00EE}%s, {FFFFFF}você aceita {FF00EE}%s {FFFFFF}como sua legitima esposa?\n{FFFF00}Deverá protege-la na saude e na doença até que suas conexões os separem.", PlayerName(playerid), PlayerName(pedidode[playerid]));
				ShowPlayerDialog(playerid, cerimonia, DIALOG_STYLE_MSGBOX, "Cerimônia de Casamento", string, "Aceito", "Não");
			}
			if(dini_Int(file, "Sexo") == Feminino)
			{
				format(string, sizeof(string), "{003300}Ops, agora case!\n\n{FF00EE}%s, {FFFFFF}você aceita {FF00EE}%s {FFFFFF}como seu legitimo esposo?\n{FFFF00}Deverá protege-lo na saude e na doença até que suas conexões os separem.", PlayerName(playerid), PlayerName(pedidode[playerid]));
				ShowPlayerDialog(playerid, cerimonia, DIALOG_STYLE_MSGBOX, "Cerimônia de Casamento", string, "Aceito", "Não");
			}
		}
	}

	if(dialogid == divorcio)
	{
		format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));
		if(response == 1)
		{
			format(file2, sizeof(file2), PASTA_CONTAS, dini_Get(file, "CasouCom"));
			if(dini_Exists(file2))
			{
				dini_IntSet(file2, "Casado", 3);
			}
			dini_IntSet(file, "Casado", 0);
			dini_Set(file, "CasouCom", "Ninguem");
			SendClientMessage(playerid, Amarelo, "O divórcio foi concluído.");
		}
	}

	// =================================================================================
	if(dialogid == 4501)						  // Menu
	{
		if(response == 1)
		{
			if(listitem == 0)					  // Entrar no Carro
			{
				if(NaFaculdade[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está na biblioteca e está incapacitado de fazer isto.");
				if(preso[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está incapacitado de fazer isto pois está preso.");
				if(algemado[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está incapacitado de fazer isto pois está algemado.");
				if(cercado[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está incapacitado de fazer isto pois está cercado.");
				if(nogame[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está incapacitado de fazer isto pois está em um game!");
				if(autoescola[playerid] == 1) return SendClientMessage(playerid, Vermelho, "Você está incapacitado de fazer isto pois está na Auto-Escola!");

				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Exists(string))
					{
						if(IsPlayerConnected(playerid))
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								PutPlayerInVehicle(playerid, dini_Int(string, "Id"), 0);
								if(GetCarros(playerid) > MAX_PLAYER_CONCE)
								{
									ShowPlayerDialog(playerid, 4504, DIALOG_STYLE_MSGBOX, "Aviso", "{1B70E0}Você tem mais de um veículo, clique em 'Próximo' para entrar em seu próximo veículo.", "OK", "Próximo");
								}
								return 1;
							}
						}
					}
				}
			}
			if(listitem == 1)					  // Salvar Posição
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					new Float:carroX, Float:carroY, Float:carroZ, Float:carroA;
					new vid = GetPlayerVehicleID(playerid);
					GetVehiclePos(vid, carroX, carroY, carroZ);
					GetVehicleZAngle(vid, carroA);
					for(new carro = 0; carro < MAX_CONCES; carro++)
					{
						format(string, sizeof(string), PASTA_CONCE, carro);
						if(dini_Int(string, "Id") == vid)
						{
							if(IsPlayerConnected(playerid))
							{
								if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
								{
									format(STRX, sizeof(STRX), "%s", GetPlayerArea(playerid));
									if(strcmp("Commerce", STRX, true) == 0 || strcmp("Pershing Square", STRX, true) == 0)
									{
										SendClientMessage(playerid, Amarelo, "Você não pode salvar veículos neste local.");
										return 1;
									}
									else
									{
										dini_FloatSet(string, "CordX", Float:carroX);
										dini_FloatSet(string, "CordY", Float:carroY);
										dini_FloatSet(string, "CordZ", Float:carroZ);
										dini_FloatSet(string, "Angulo", Float:carroA);
										DestroyVehicle(dini_Int(string, "Id"));
										vid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
										dini_IntSet(string, "Id", vid);
										SendClientMessage(playerid, Verde, "Seu veículo foi salvo na sua posição.");
										return 1;
									}
								}
								else
								{
									SendClientMessage(playerid, Vermelho, "Este veículo não é seu!");
									return 1;
								}
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Para salvar a posição você presisa estar em seu veículo.");
				}
			}
			if(listitem == 2)					  // Alterar Primeira Cor
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					format(STRX, sizeof(STRX), "{33AA33}Alterar Primeira Cor\n\n{33AAFF}Digite o ID da cor desejada:");
					ShowPlayerDialog(playerid, 4502, DIALOG_STYLE_INPUT, "Meu Carro", STRX, "Alterar", "Cancelar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Para mudar a cor você presisa estar em seu veículo.");
				}
			}
			if(listitem == 3)					  // Alterar Segunda Cor
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					format(STRX, sizeof(STRX), "{33AA33}Alterar Segunda Cor\n\n{33AAFF}Digite o ID da cor desejada:");
					ShowPlayerDialog(playerid, 4503, DIALOG_STYLE_INPUT, "Meu Carro", STRX, "Alterar", "Cancelar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Para mudar a cor você presisa estar em seu veículo.");
				}
			}
			if(listitem == 4)					  // Respawnar Carro
			{
				new carroid;
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Exists(string))
					{
						if(IsPlayerConnected(playerid))
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								DestroyVehicle(dini_Int(string, "Id"));
								carroid = AddStaticVehicle(dini_Int(string, "Modelo"), dini_Float(string, "CordX"), dini_Float(string, "CordY"), dini_Float(string, "CordZ"), dini_Float(string, "Angulo"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
								dini_IntSet(string, "Id", carroid);
								if(dini_Int(string, "TRoda") == 1)
								{
									AddVehicleComponent(carroid, dini_Int(string, "Roda"));
								}
								if(dini_Int(string, "TPaintjob") == 1)
								{
									ChangeVehiclePaintjob(carroid, dini_Int(string, "Paintjob"));
								}
								if(dini_Int(string, "TNitro") == 1)
								{
									AddVehicleComponent(carroid, dini_Int(string, "Nitro"));
								}
								if(dini_Int(string, "TSuspensao") == 1)
								{
									AddVehicleComponent(carroid, dini_Int(string, "Suspensao"));
								}
							}
						}
					}
				}
			}
			if(listitem == 5)					  // Ferramentas
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessage(playerid, 0xCC0000FF, "Você precisa estar no veículo para usar esta opção.");
				}
				else
				{
					ShowPlayerDialog(playerid, vcontrole, DIALOG_STYLE_LIST, "Controle", "{FF0000}Luzes\n{0800FF}Abrir/Fechar Capo\n{00FF08}Abrir/Fechar Boot\n{FFFF00}Motor\n{AE00FF}Alarme", "Confirmar", "Cancelar");
				}
			}
			if(listitem == 6)					  // Vender Carro
			{
				new VehicleID = GetPlayerVehicleID(playerid);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && VehicleID == dini_Int(string, "Id"))
					{
						if(IsPlayerConnected(playerid))
						{
							if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
							{
								dini_Set(string, "Dono", "Ninguem");
								dini_IntSet(string, "TDono", 0);
								dini_IntSet(string, "CarVIP", 0);
								GivePlayerGrana(playerid, dini_Int(string, "Preco"));
								format(string, sizeof(string), "%s vendeu um veículo. Local: %s", PlayerName(playerid), GetPlayerArea(playerid));
								SendClientMessageToAll(Azul, string);
								return 1;
							}
							else
							{
								SendClientMessage(playerid, Vermelho, "Este veículo não é seu!");
								return 1;
							}
						}
					}
				}
				SendClientMessage(playerid, Vermelho, "Você precisa estar dentro de seu veículo para vende-lo.");
			}
			if(listitem == 7)					  // Alterar Modelo
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					ShowPlayerDialog(playerid, modeloveiculo, DIALOG_STYLE_INPUT, "Alterar Modelo", "{FF0000}[x] {00FF00}Os ID's vão de {FF0000}400 {00FF00}a {FF0000}611\n\n{00FF00}Digite o novo ID do veículo para mudar:", "OK", "Cancelar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você não está em seu veículo para muda-lo!");
				}
			}
			if(listitem == 8)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					ShowPlayerDialog(playerid, tunar, DIALOG_STYLE_LIST, "Tuning Menu", "{ff0000}Rodas\n{C0C0C0}Cores\n{16EB43}Paintjobs\n{FFFFFF}Neons\n{99FFFF}Nitro\n{FF0000}Suspensão\n{C1E8E6}Subwoofer\n{AFAFAF}Míssil\n{33AA33}AutoTuning", "OK", "Cancelar");
				}
				else
				{
					SendClientMessage(playerid, Vermelho, "Você precisa estar em seu veículo para tuna-lo.");
				}
			}
			if(listitem == 9)
			{
				new VehicleID = GetPlayerVehicleID(playerid);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Int(string, "Id") == VehicleID)
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							if(dini_Int(string, "TRoda") == 1)
							{
								dini_IntSet(string, "TRoda", 0);
								RemoveVehicleComponent(VehicleID, dini_Int(string, "Roda"));
							}
							if(dini_Int(string, "TPaintjob") == 1)
							{
								dini_IntSet(string, "TPaintjob", 0);
								ChangeVehiclePaintjob(VehicleID, 3);
							}
							if(dini_Int(string, "TNitro") == 1)
							{
								dini_IntSet(string, "TNitro", 0);
								RemoveVehicleComponent(VehicleID, dini_Int(string, "Nitro"));
							}
							if(dini_Int(string, "TSuspensao") == 1)
							{
								dini_IntSet(string, "TSuspensao", 0);
								RemoveVehicleComponent(VehicleID, dini_Int(string, "Suspensao"));
							}
							return 1;
						}
					}
				}
				SendClientMessage(playerid, Vermelho, "Você precisa estar em seu veículo para destuna-lo.");
			}
		}
	}

	if(dialogid == 4502)
	{
		if(response == 1)
		{
			if(!VBIsNumeric(inputtext))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
				return 1;
			}
			else
			{
				new VehicleID = GetPlayerVehicleID(playerid);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Exists(string))
					{
						if(VehicleID == dini_Int(string, "Id"))
						{
							dini_IntSet(string, "Cor1", StrToInt(inputtext));
							ChangeVehicleColor(dini_Int(string, "Id"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
							return 1;
						}
					}
				}
				SendClientMessage(playerid, Vermelho, "Este veículo não é seu!");
			}
		}
	}

	if(dialogid == 4503)
	{
		if(response == 1)
		{
			if(!VBIsNumeric(inputtext))
			{
				SendClientMessage(playerid, Vermelho, "Valor inválido, tente novamente!");
				return 1;
			}
			else
			{
				new VehicleID = GetPlayerVehicleID(playerid);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(string, sizeof(string), PASTA_CONCE, carro);
					if(dini_Exists(string))
					{
						if(VehicleID == dini_Int(string, "Id"))
						{
							dini_IntSet(string, "Cor2", StrToInt(inputtext));
							ChangeVehicleColor(dini_Int(string, "Id"), dini_Int(string, "Cor1"), dini_Int(string, "Cor2"));
							return 1;
						}
					}
				}
				SendClientMessage(playerid, Vermelho, "Este veículo não é seu!");
			}
		}
	}
	if(dialogid == 4504)
	{
		if(response == 0)
		{
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(string, sizeof(string), PASTA_CONCE, carro);
				if(dini_Exists(string))
				{
					if(IsPlayerConnected(playerid))
					{
						if(strcmp(dini_Get(string, "Dono"), PlayerName(playerid), true) == 0)
						{
							if(!IsVehicleOccupied(dini_Int(string, "Id")))
							{
								PutPlayerInVehicle(playerid, dini_Int(string, "Id"), 0);
								if(GetCarros(playerid) > MAX_PLAYER_CONCE)
								{
									ShowPlayerDialog(playerid, 4504, DIALOG_STYLE_MSGBOX, "Aviso", "{1B70E0}Você tem mais de um veículo, clique em 'Próximo' para entrar em seu próximo veículo.", "OK", "Próximo");
								}
								return 1;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}


encrypt(name[])
{
	static charset[] = "qwertyaQWERTYUIOPZXCVBNMLKJHGFDSAsdfghzxcvbnuiopjklm1324657809_", css = 63;
	new target[MAX_PLAYER_NAME+1], j = strlen(name), sum = j, tmpp = 0, i, modw;
	for (i = 0; i < MAX_PLAYER_NAME || i < j; i++)
	{
		modw = i % MAX_PLAYER_NAME;
		tmpp = (i >= j) ? charset[(7*i) % css] : name[i];
		sum = (sum+chrfind(tmpp, charset)+1) % css;
		target[modw] = charset[(sum+target[modw]) % css];
	}
	target[MAX_PLAYER_NAME] = '\0';
	return target;
}

public RandomMSGs()
{
	new string[256], random1, random2;
	random1 = random(sizeof(MSGs));
	random2 = random(sizeof(COLORS));
	format(string, sizeof(string), "%s", MSGs[random1]);
	SendClientMessageToAll(COLORS[random2], string);
	return 1;
}

public Up()
{
	for(new p = 0; p < MAX_PROPS; p++)
	{
		new strx[256];
		format(strx, sizeof(strx), PASTA_PROPS, p);
		if(dini_Exists(strx))
		{
			if(dini_Int(strx, "TDono") == 1)
			{
				new grana = (dini_Int(strx, "Preco") /100);
				if(dini_Int(strx, "Grana") +grana >= 4500)
				{
					dini_IntSet(strx, "Grana", 4500);
				}
				else
				{
					dini_IntSet(strx, "Grana", dini_Int(strx, "Grana") +grana);
				}
			}
		}
	}
	SendClientMessageToAll(Amarelo, "As rendas das propriedades foram depositadas nelas.");

	new string[256];
	new aname[MAX_PLAYER_NAME];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1057, 0, 0, 0);
			GetPlayerName(i, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);

			if(dini_Int(file, "Profissao") == Desempregado)
			{
				SendClientMessage(i, Vermelho, "Você não tem um emprego e não recebeu salário.");
				SendClientMessage(i, Vermelho, "Você pode conseguir um emprego na prefeitura.");
			}
			if(dini_Int(file, "ContaBancaria") == 0)
			{
				dini_IntSet(file, "ContaBancaria", 1);
				SendClientMessage(i, 0xCAFF95AA, "Abrimos uma conta bancária para você.");
			}
			if(dini_Int(file, "Casa") == 1)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-100);
				SendClientMessage(i, Verde, "Você tem uma casa e foi cobrado $100 de água e luz.");
			}
			if(dini_Int(file, "Hotel") == 1)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-150);
				SendClientMessage(i, Verde, "Hotel: Foi cobrado $150 do aluguel de quarto.");
			}
			if(dini_Int(file, "Profissao") == MotoristaP)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_MotoristaP);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_MotoristaP);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Guarda)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Guarda);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Guarda);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Policial_R)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Policial_R);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Policial_R);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Policial_M)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Policial_M);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Policial_M);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Policial_C)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Policial_C);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Policial_C);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Policial_F)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Policial_F);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Policial_F);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Delegado)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Delegado);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Delegado);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Bope)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Bope);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Bope);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Swat)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Swat);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Swat);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Espião)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Espião);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Espião);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Traficante)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Traficante);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Traficante);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Assasino)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Assasino);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Assasino);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Terrorista)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Terrorista);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Terrorista);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Sequestrador)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Sequestrador);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Sequestrador);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == AssasinoProfissional)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_AssasinoProfissional);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_AssasinoProfissional);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Jornalista)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Jornalista);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Jornalista);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Fotografo)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Fotografo);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Fotografo);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Reporter)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Reporter);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Reporter);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Ancora)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Ancora);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Ancora);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Meteorologista)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Meteorologista);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Meteorologista);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Mecanico)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Mecanico);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Mecanico);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Rapper)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Rapper);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Rapper);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == VendedorSkin)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_VendedorSkin);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_VendedorSkin);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == VendedorCarro)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_VendedorCarro);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_VendedorCarro);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Frentista)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Frentista);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Frentista);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == FBI)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_FBI);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_FBI);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Interpol)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Interpol);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Interpol);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Aposentado)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Aposentado);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Aposentado);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Advogado)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Advogado);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Advogado);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Prostituta)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Prostituta);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Prostituta);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Promoter)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Promoter);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Promoter);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == SegVila)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_SegVila);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_SegVila);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Assaltante)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Assaltante);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Assaltante);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Bibliotecario)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Bibliotecario);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Bibliotecario);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == vice/presidente)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_vice/presidente);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_vice/presidente);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Prefeito)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Prefeito);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Prefeito);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Presidente)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Presidente);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Presidente);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == TraficanteD)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_TraficanteD);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_TraficanteD);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Mendigo)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Mendigo);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Mendigo);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == LSPD)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_LSPD);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_LSPD);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == YKZ)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_YKZ);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_YKZ);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == MRN)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_MRN);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_MRN);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Empregada)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Empregada);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Empregada);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Pedreiro)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Pedreiro);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Pedreiro);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Gari)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Gari);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Gari);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Lixeiro)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Lixeiro);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Lixeiro);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Temac)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Temac);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Temac);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Correio)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Correio);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Correio);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Estudante)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Estudante);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Estudante);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Flanelinha)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Flanelinha);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Flanelinha);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Cantor)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Cantor);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Cantor);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Poeta)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Poeta);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Poeta);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Mafia)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Mafia);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Mafia);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Drifter)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Drifter);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Drifter);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Professor)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Professor);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Professor);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Empregador)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Empregador);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Empregador);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == AtiradorElite)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_AtiradorElite);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_AtiradorElite);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Ninja)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Ninja);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Ninja);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Maquinista)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Maquinista);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Maquinista);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Profissao") == Caminhoneiro)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+Salario_Caminhoneiro);
				format(string, sizeof(string), "Você tem um emprego e recebeu seu salário: $%d", Salario_Caminhoneiro);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "VIP") == 1)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")+SalarioMaximo);
				format(string, sizeof(string), "Você recebeu seu salário VIP: $%d", SalarioMaximo);
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Luta") == 1)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-50);
				format(string, sizeof(string), "Você está aprendendo a lutar e foi descontado $50 do seu salário.");
				SendClientMessage(i, 0xCAFF95AA, string);
			}
			if(dini_Int(file, "Celular") == 1)
			{
				dini_IntSet(file, "SaldoBancario", dini_Int(file, "SaldoBancario")-50);
				format(string, sizeof(string), "Você tem um celular e a conta chegou, você pagou $50 pelas ligações.");
				SendClientMessage(i, 0xCAFF95AA, string);
			}
		}
	}
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new nname[MAX_PLAYER_NAME],
		pname[MAX_PLAYER_NAME],
		aname[MAX_PLAYER_NAME];

	new string[256], string2[256],
		vid, modelo;

	new Float:X, Float:Y, Float:Z;

	GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
	GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
	GetPlayerName(playerid, nname, MAX_PLAYER_NAME);

	vid = GetPlayerVehicleID(playerid);
	modelo = GetVehicleModel(vid);

	#if defined BomberUser
	vmid[playerid] = GetVehicleStatID(modelo);
	#endif

	format(file, sizeof(file), PASTA_CONTAS, PlayerName(playerid));

	// Capacete
	#if defined CapaceteUser
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(IsABike(vid))
		{
			if(dini_Int(file, "TCapacete") == 1)
			{
				switch(GetPlayerSkin(playerid))
				{
					#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
					case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
					case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
					case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
					case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
					case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
					case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
					case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
					case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
					case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
					case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
					case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
					case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
					case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
					#undef SPAO
				}
			}
			else
			{
				infratores[playerid] = 1;
				SendClientMessage(playerid, Vermelho, "Você está sem Capacete e poderá ser multado.");
				SendClientMessage(playerid, Vermelho, "Compre um em qualquer Loja de Utilidades.");
			}
		}
	}
	else
	{
		if(dini_Int(file, "TCapacete") == 1)
		{
			RemovePlayerAttachedObject(playerid, SLOT);
		}
	}
	#endif

	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(Taximetro[playerid][0] == 1)
		{
			SendClientMessage(playerid, COLOR_GREEN, "Você saiu do taxi, e pagou o taxista.");
			SendClientMessage(Taximetro[playerid][1], Vermelho, "Você recebeu o valor da corrida até aqui.");
			GivePlayerGrana(playerid, 0-PrecoCorrida[playerid]);
			GivePlayerGrana(Taximetro[playerid][1], PrecoCorrida[playerid]);
			PrecoCorrida[playerid] = 0;
			Taximetro[playerid][1] = 0;
			Taximetro[playerid][0] = 0;
		}
	}

	// Live Bar Car
	if(newstate == PLAYER_STATE_DRIVER)
	{
		CarLabel[playerid] = CreateDynamic3DTextLabel("{00ff00}", -1, 0.0, 0.0, 0.9, 50.0, INVALID_PLAYER_ID, vid, 1, -1, -1, -1, 60.0);
		UpdateBar(playerid);
	}
	else
	{
		PauseBar(playerid);
		DestroyDynamic3DTextLabel(CarLabel[playerid]);
		CarLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(noevento[playerid] == 1)
		{
			if(Proibido == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 1);
						}
					}
				}
				GetPlayerPos(playerid, X, Y, Z);
				PlayerPlaySound(playerid, 1056, X, Y, Z);
				TogglePlayerControllable(playerid, false);
				SendClientMessage(playerid, Azul, "[EVENTO] Você entrou em um carro, aguarde o evento começar.");
			}
		}

		if(statuscp[playerid] != 1)
		{
			for(new carro = 0; carro < MAX_CONCES; carro++)
			{
				format(file2, sizeof(file2), PASTA_CONCE, carro);
				if(dini_Exists(file2))
				{
					if(vid == dini_Int(file2, "Id"))
					{
						cCarro[playerid] = dini_Int(file2, "Combustivel");
					}
				}
			}

			#if defined CarInfosUser
			format(string, sizeof(string), "ID: ~g~%d", GetVehicleModel(vid));
			TextDrawSetString(CarInfos2[playerid], string);
			format(string, sizeof(string), "~g~%s", GetVehicleName(vid));
			TextDrawSetString(CarInfos3[playerid], string);

			TextDrawShowForPlayer(playerid, CarInfos1[playerid]);
			TextDrawShowForPlayer(playerid, CarInfos2[playerid]);
			TextDrawShowForPlayer(playerid, CarInfos3[playerid]);
			TextDrawShowForPlayer(playerid, CarInfos4[playerid]);
			#endif

			// =================================== Barras ======================================
			#if defined BarUser
			vVelo[playerid] = CreateProgressBar(230.0, 391.0, _, _, VERDECLARO, 200.0);
			vComb[playerid] = CreateProgressBar(230.0, 401.0, _, _, VERDEFRACO, MAX_COMB.0);
			vLataria[playerid] = CreateProgressBar(230.0, 411.0, _, _, VERDEMEDIO, 1000.0);

			ShowProgressBarForPlayer(playerid, vVelo[playerid]);
			ShowProgressBarForPlayer(playerid, vComb[playerid]);
			ShowProgressBarForPlayer(playerid, vLataria[playerid]);
			#endif
			// =================================================================================

			#if defined BomberUser
			if(vmid[playerid] > -1)
			{
				bptextshow[playerid] = 1;
				bptype[playerid] = 0;
				ShowTextDraw(playerid, vid, 0);
			}
			#endif
		}
		else
		{
			//DisplayVehicleStats(vid, 0);
		}

		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(string2, sizeof(string2), PASTA_CONCE, carro);
			if(dini_Exists(string2))
			{
				if(vid == dini_Int(string2, "Id"))
				{
					GetVehiclePos(vid, X, Y, Z);
					if(dini_Int(string2, "TDono") == 1)
					{
						if(strcmp(dini_Get(string2, "Dono"), pname, true) == 0)
						{
							SendClientMessage(playerid, Azul, " - Este carro é seu, seja bem vindo!");
						}
						else
						{
							if(dini_Int(string2, "CarVIP") == 1)
							{
								if(pAdmin[playerid] == 5)
								{
									SendClientMessage(playerid, Amarelo, "  Olá admin, seja bem-vindo(a)!");
									SendClientMessage(playerid, Azul, "  Este veículo é ou foi de um VIP.");
									SendClientMessage(playerid, LARANJA, "|____________________________________________________|");
								}
								else
								{
									SetTimerEx("CriarExplosao", 5000, false, "fffdf", X, Y, Z, 7, 10.0);
									SetTimerEx("CriarExplosao", 6000, false, "fffdf", X, Y, Z, 10, 10.0);
									SetTimerEx("CriarExplosao", 7000, false, "fffdf", X, Y, Z, 2, 10.0);
									SetTimerEx("CriarExplosao", 8000, false, "fffdf", X, Y, Z, 7, 10.0);
									SetTimerEx("CriarExplosao", 9000, false, "fffdf", X, Y, Z, 10, 10.0);
									SetTimerEx("CriarExplosao", 10000, false, "fffdf", X, Y, Z, 2, 10.0);

									CreatePlayerCountdown(playerid, 5, 1);
									TogglePlayerControllable(playerid, 0);
									incar[playerid] = 1;

									format(string, sizeof(string), " - ALARME VIP: Este carro é de %s e você não tem a chave.", dini_Get(string2, "Dono"));
									SendClientMessage(playerid, Vermelho, string);
									SendClientMessage(playerid, LARANJA, " - Auto-destruição foi ativada, vai explodir em 5 segundos.");
									SendClientMessage(playerid, LARANJA, "|____________________________________________________|");
								}
							}
							else
							{
								if(pAdmin[playerid] == 5)
								{
									SendClientMessage(playerid, Amarelo, "  Olá admin, seja bem-vindo(a)!");
									SendClientMessage(playerid, LARANJA, "|____________________________________________________|");
								}
								else
								{
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(vid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);

									SetTimerEx("DesligarAlarmeCar", 5000, false, "e", vid);
									TogglePlayerControllable(playerid, 0);
									incar[playerid] = 1;

									format(string, sizeof(string), " - ALARME: Este carro é de %s e você não tem a chave.", dini_Get(string2, "Dono"));
									SendClientMessage(playerid, Vermelho, string);
									SendClientMessage(playerid, LARANJA, "|____________________________________________________|");
								}
							}
						}
					}
					else
					{
						format(string, sizeof(string), "{FFFFFF}Este veículo está a venda.\n\n{FFFFFF}Modelo: {FF0000}%s\n{FFFFFF}Conce ID: {FF0000}%d\n{FFFFFF}Dono: {FF0000}%s\n{FFFFFF}Valor: {FF0000}$%d\n\n{FFFFFF}Oque deseja?", GetVehicleName(vid), carro, dini_Get(string2, "Dono"), dini_Int(string2, "Preco"));
						ShowPlayerDialog(playerid, vehicleorder, DIALOG_STYLE_MSGBOX, "Informações", string, "Testar", "Comprar");
					}
				}
			}
		}

		if(modelo == 409)
		{
			if(dini_Int(file, "Profissao") == Presidente || dini_Int(file, "Profissao") == Prefeito || dini_Int(file, "aAdmin") == 1)
			{
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, Amarelo, "Bem vindo prefeito um colete vai te ajudar.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um prefeito ou presidente.");
			}
		}
		else if(modelo == 596 || modelo == 427 || modelo == 523 || modelo == 574 || modelo == 601 || modelo == 528 || modelo == 490)
		{
			if(dini_Int(file, "Profissao") == Policial_M || dini_Int(file, "Profissao") == Policial_C || dini_Int(file, "Profissao") == Policial_F || dini_Int(file, "Profissao") == Delegado || dini_Int(file, "Profissao") == Bope || dini_Int(file, "Profissao") == Swat || dini_Int(file, "Profissao") == Espião || dini_Int(file, "Profissao") == FBI || dini_Int(file, "Profissao") == Interpol || dini_Int(file, "Profissao") == LSPD || dini_Int(file, "aAdmin") == 1)
			{
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, Amarelo, "Bem vindo policial um colete vai te ajudar.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um policial.");
			}
		}
		else if(modelo == 416)
		{
			if(dini_Int(file, "Profissao") == Paramedico || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
			{
				SendClientMessage(playerid, Verde, "Bem vindo paramédico.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um paramédico.");
			}
		}
		else if(modelo == 488 || modelo == 582)
		{
			if(dini_Int(file, "Profissao") == Jornalista || dini_Int(file, "Profissao") == Reporter || dini_Int(file, "Profissao") == Ancora || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
			{
				SendClientMessage(playerid, Amarelo, "Bem vindo jornalista.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um jornalista.");
			}
		}
		else if(modelo == 420 || modelo == 438)
		{
			if(dini_Int(file, "Profissao") == Taxista || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
			{
				SendClientMessage(playerid, Amarelo, "Bem vindo taxista.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um taxista.");
			}
		}
		else if(modelo == 537 || modelo == 538)
		{
			if(dini_Int(file, "Profissao") == Maquinista || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
			{
				// Maquinista
				InRacePistaTrain[playerid] = 1;
				CreatePlayerPistaRaceTrain(playerid);
				SendClientMessage(playerid, Amarelo, "Bem vindo maquinista.");
			}
			else
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não é um maquinista.");
			}
		}
		else if(modelo == 417 || modelo == 488 || modelo == 487 || modelo == 548 || modelo == 525 || modelo == 497 || modelo == 563 || modelo == 447 || modelo == 469 || modelo == 592 || modelo == 577 || modelo == 511 || modelo == 512 || modelo == 593 ||modelo == 520 || modelo == 553 || modelo == 476 || modelo == 519 || modelo == 460 || modelo == 513 || modelo == 425)
		{
			if(dini_Int(file, "HabAerea") == 0)
			{
				incar[playerid] = 1;
				TogglePlayerControllable(playerid, 0);
				SendClientMessage(playerid, Vermelho, "Você não possui habilitação aérea.");
			}
		}
		else
		{
			if(modelo == 472 || modelo == 473 || modelo == 493 || modelo == 595 || modelo == 484 || modelo == 430 || modelo == 453 || modelo == 452 || modelo == 446 || modelo == 454)
			{
				if(dini_Int(file, "HabNautica") == 0)
				{
					SendClientMessage(playerid, Vermelho, "Você não possui habilitação náutica.");
				}
			}
			else if(dini_Int(file, "HabTerrestre") == 0)
			{
				if(autoescola[playerid] == 1)
				{
					SendClientMessage(playerid, Amarelo, "Você está fazendo teste de Auto-Escola.");
					SendClientMessage(playerid, Amarelo, "Se você sair do carro o teste é cancelado.");
				}
				else if(modelo == 509 || modelo == 510 || modelo == 481)
				{
					SendClientMessage(playerid, Vermelho, "Você está dirigindo uma bicicleta e não precisa de habilitação.");
				}
				else
				{
					incar[playerid] = 1;
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, Vermelho, "Você não possui habilitação terrestre.");
					SendClientMessage(playerid, Vermelho, "Tire uma carteira terrestre na delegacia para se legalizar.");
				}
			}
		}

		for(new carro = 0; carro < MAX_CONCES; carro++)
		{
			format(file2, sizeof(file2), PASTA_CONCE, carro);
			if(dini_Exists(file2))
			{
				if(vid == dini_Int(file2, "Id"))
				{
					if(cCarro[playerid] < 30 && cCarro[playerid] > 5)
					{
						if(modelo == 509 || modelo == 510 || modelo == 481)
						{
							SendClientMessage(playerid, LARANJA, "Adicione nosso IP fixo: "#VCL_SERVER_IP"");
						}
						else
						{
							SendClientMessage(playerid, Vermelho, "[ATENÇÃO] Seu combustível está acabando.");
							SendClientMessage(playerid, Vermelho, "[ATENÇÃO] Abasteça no posto mais próximo.");
						}
					}
					else if(cCarro[playerid] <= 0)
					{
						if(modelo == 509 || modelo == 510 || modelo == 481)
						{
							SendClientMessage(playerid, LARANJA, "Adicione nosso IP fixo: "#VCL_SERVER_IP"");
						}
						else
						{
							new engine, lights, alarm, doors, bonnet, boot, objective;
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);

							SendClientMessage(playerid, Vermelho, "Este veículo está sem combustível.");
						}
					}
				}
			}
		}
	}

	if(oldstate == PLAYER_STATE_DRIVER)
	{
		if(noevento[playerid] == 1)
		{
			if(Proibido == 0)
			{
				GetPlayerPos(playerid, X, Y, Z);
				PlayerPlaySound(playerid, 1056, X, Y, Z);
				TogglePlayerControllable(playerid, true);
				SendClientMessage(playerid, Azul, "[EVENTO] Você saiu do carro, o evento já vai começar.");
			}
		}

		if(statuscp[playerid] != 1)
		{
			cCarro[playerid] = -1;

			#if defined CarInfosUser
			TextDrawHideForPlayer(playerid, CarInfos1[playerid]);
			TextDrawHideForPlayer(playerid, CarInfos2[playerid]);
			TextDrawHideForPlayer(playerid, CarInfos3[playerid]);
			TextDrawHideForPlayer(playerid, CarInfos4[playerid]);
			#endif

			// =================================== Barras ======================================
			#if defined BarUser
			HideProgressBarForPlayer(playerid, vVelo[playerid]);
			HideProgressBarForPlayer(playerid, vComb[playerid]);
			HideProgressBarForPlayer(playerid, vLataria[playerid]);

			DestroyProgressBar(vVelo[playerid]);
			DestroyProgressBar(vComb[playerid]);
			DestroyProgressBar(vLataria[playerid]);

			vVelo[playerid] = INVALID_BAR_ID;
			vComb[playerid] = INVALID_BAR_ID;
			vLataria[playerid] = INVALID_BAR_ID;
			#endif
			// =================================================================================

			#if defined BomberUser
			if(bptextshow[playerid] == 1)
			{
				bptextshow[playerid] = 0;
				RemoveTextDraw(playerid);
			}
			#endif

			// Maquinista
			if(InRacePistaTrain[playerid] == 1)
			{
				InRacePistaTrain[playerid] = 0;
				DeletePlayerPistaRaceTrain(playerid);
			}
		}
		else
		{
			//DisplayVehicleStats(vid, 1);
		}
	}
	return 1;
}

public Pesca()
{
	new random1, string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && PescaInProgress[i] == 1)
		{
			QtPescas[i]++;
			PescaInProgress[i] = 0;
			SendClientMessage(i, 0x4E9C9CAA, "Opaaaaa, um peixe mordeu sua isca e você conseguiu traze-lo até o barco parabéns.");
			SendClientMessage(i, 0x4E9C9CAA, "Você pode continuar pescando /pescar ou você pode vender seus peixes.");
			SendClientMessage(i, 0x4E9C9CAA, "O local de venda de peixes, está localizado na praia por um simbolo ''Vermelho''.");
			random1 = random(sizeof(peixes));
			format(string, sizeof(string), "Você pescou um(a) %s e agora tem %d peixe(s).", peixes[random1], QtPescas[i]);
			SendClientMessage(i, 0xFF0000AA, string);
		}
	}
	return 0;
}

public cacas()
{
	new string[256], random1;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && cacando[i] == 1)
		{
			Qtcacas[i]++;
			cacando[i] = 0;
			random1 = random(sizeof(Presa));
			format(string, sizeof(string), "Sua arvore caiu, Você conseguiu um(a) %s ilegalmente e agora tem %d madeira(s).", Presa[random1], Qtcacas[i]);
			SendClientMessage(i, 0x4E9C9CAA, string);
			SendClientMessage(i, 0x4E9C9CAA, "Para vender sua madeira vá até o símbolo de um ''Boneco Verde''.");
			SendClientMessage(i, 0x4E9C9CAA, "Ou continue cortando madeiras, digite /cortar");
		}
	}
	return 0;
}

public DestogglePlayerControllable(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

public DestogglePlayerDynamicRaceCP(playerid, checkpointid)
{
	TogglePlayerDynamicRaceCP(playerid, checkpointid, true);
	return 1;
}

// =============================== Início do Tutorial ===============================
public DynTutorialStart(playerid)
{
	TogglePlayerControllable(playerid, false);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Olá, este rápido tutoral irá explicar");
	SendClientMessage(playerid, Blue, "    como jogar em nosso servidor, então");
	SendClientMessage(playerid, Blue, "    tenha bastante atenção e divirta-se.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	SetTimerEx("DynTutorialDelegacia", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialDelegacia(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid, 1520.2229, -1702.1710, 13.5468);
	SetPlayerCameraPos(playerid, 1522.5903, -1701.5485, 13.5468);
	SetPlayerCameraLookAt(playerid, 1523.7968, -1701.2314, 13.5468);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Antes de tudo você precisa adquirir");
	SendClientMessage(playerid, Blue, "    algumas licenças como porte de armas,");
	SendClientMessage(playerid, Blue, "    carteira de motorista, trabalho e outras.");
	SendClientMessage(playerid, Blue, "     Estas licenças estão diponíveis para");
	SendClientMessage(playerid, Blue, "    compra na delegacia sem burocracia.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	GameTextForPlayer(playerid, "~r~Delegacia", 8000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	SetTimerEx("DynTutorialPrefeitura", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialPrefeitura(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid, 1483.8164, -1727.4125, 13.3828);
	SetPlayerCameraPos(playerid, 1483.8164, -1727.4125, 13.3828);
	SetPlayerCameraLookAt(playerid, 1481.0267, -1772.1371, 19.4570);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Na prefeitura você terá acesso ao");
	SendClientMessage(playerid, Blue, "    menu de empregos, após comprar a");
	SendClientMessage(playerid, Blue, "    carteira de trabalho na delegacia");
	SendClientMessage(playerid, Blue, "    você poderá escolher o emprego que");
	SendClientMessage(playerid, Blue, "    combine com seu level e estudo.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	GameTextForPlayer(playerid, "~r~Prefeitura", 8000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    SetTimerEx("DynTutorialBanco", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialBanco(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid, 1436.9482, -1718.3746, 13.5468);
	SetPlayerCameraPos(playerid, 1433.9848, -1715.9355, 13.3828);
	SetPlayerCameraLookAt(playerid, 1432.6545, -1714.9122, 13.3828);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Abra uma conta no banco para receber");
	SendClientMessage(playerid, Blue, "    salário de seu emprego e deposite seu");
	SendClientMessage(playerid, Blue, "    dinheiro para evitar perda e prejuizo.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	GameTextForPlayer(playerid, "~r~Banco", 8000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	SetTimerEx("DynTutorialFaculdade", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialFaculdade(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid, 1057.9168, -1712.4824, 13.3828);
	SetPlayerCameraPos(playerid, 1060.0291, -1711.0893, 13.3828);
	SetPlayerCameraLookAt(playerid, 1061.3043, -1710.2484, 13.3828);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Estude aqui para conseguir melhor");
	SendClientMessage(playerid, Blue, "    emprego, confira os horários de");
	SendClientMessage(playerid, Blue, "    funcionamento da faculdade /horarios.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	GameTextForPlayer(playerid, "~r~Faculdade", 8000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	SetTimerEx("DynTutorialMorro", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialMorro(playerid)
{
	TogglePlayerControllable(playerid, false);
	SetPlayerPos(playerid, 2144.1062, -970.9034, 80.0703);
	SetPlayerCameraPos(playerid, 2212.5364, -989.5125, 83.3038);
	SetPlayerCameraLookAt(playerid, 2151.6057, -1014.4344, 67.1739);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Blue, "     Aqui o DM estará liberado, caso mate");
	SendClientMessage(playerid, Blue, "    em outro local você será automáticamente");
	SendClientMessage(playerid, Blue, "    preso, no entanto veja onde estão os locais");
	SendClientMessage(playerid, Blue, "    zoneados, evite matar fora desses locais.");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	GameTextForPlayer(playerid, "~r~Morro", 8000, 3);
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	SetTimerEx("DynTutorialEnd", 3000, 0, "e", playerid);
	return 1;
}

public DynTutorialEnd(playerid)
{
	new aname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
	format(file, sizeof(file), PASTA_CONTAS, aname);
	TogglePlayerControllable(playerid, true);
	SetPlayerPos(playerid, dini_Int(file, "CasaX"), dini_Int(file, "CasaY"), dini_Int(file, "CasaZ"));
	SetCameraBehindPlayer(playerid);
	ClearChatbox(playerid, 10);
	SendClientMessage(playerid, Amarelo, "     Nosso IP fixo: "#VCL_SERVER_IP"");
	SendClientMessage(playerid, Blue, "    Adicione em seus favoritos para não perde");
	SendClientMessage(playerid, Blue, "    nosso servidor, este IP é linkado e único,");
	SendClientMessage(playerid, Blue, "    sendo assim ele nunca mudará, divirta-se.");
	SendClientMessage(playerid, Blue, "    Afim De compar ADM /compraradm");
	SendClientMessage(playerid, Vermelho, "|___________________________________________|");
	
	return 1;
}
// =============================== Fim do Tutorial =================================

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	#if defined DamageUser

	// Realistic weapon damage by Th4_Evil

	new Float:pDamage,
		Float:health,
		Float:healthamount;

	GetPlayerHealth(playerid, health);
	healthamount = health + amount;
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(NaFaculdade[playerid] == 1) return 1;
		if(preso[playerid] == 1) return 1;
		if(algemado[playerid] == 1) return 1;
		if(cercado[playerid] == 1) return 1;
		if(nogame[playerid] == 1) return 1;
		if(autoescola[playerid] == 1) return 1;
		if(gmod[playerid] == 1) return 1;

		if(weaponid == 0)
		{
			pDamage = pD_MaxHealth / pD_Unarmed;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 1)
		{
			pDamage = pD_MaxHealth / pD_brass;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 2 || weaponid == 3 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 15)
		{
			pDamage = pD_MaxHealth / pD_golf;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 4)
		{
			pDamage = pD_MaxHealth / pD_knife;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 8 || weaponid == 9)
		{
			pDamage = pD_MaxHealth / pD_katana;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13)
		{
			pDamage = pD_MaxHealth / pD_dildo;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 14)
		{
			pDamage = pD_MaxHealth / pD_flowers;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 16)
		{
			pDamage = pD_MaxHealth / pD_grenades;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 22)
		{
			pDamage = pD_MaxHealth / pD_colt;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 23)
		{
			pDamage = pD_MaxHealth / pD_silenced;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 24)
		{
			pDamage = pD_MaxHealth / pD_deagle;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 25)
		{
			pDamage = pD_MaxHealth / pD_shotgun;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 26)
		{
			pDamage = pD_MaxHealth / pD_sawn;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 27)
		{
			pDamage = pD_MaxHealth / pD_combat;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 28)
		{
			pDamage = pD_MaxHealth / pD_SMG;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 29)
		{
			pDamage = pD_MaxHealth / pD_MP5;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 30)
		{
			pDamage = pD_MaxHealth / pD_AK47;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 31)
		{
			pDamage = pD_MaxHealth / pD_M4;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 32)
		{
			pDamage = pD_MaxHealth / pD_TEC9;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 33 || weaponid == 34)
		{
			pDamage = pD_MaxHealth / pD_rifle;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 35 || weaponid == 36)
		{
			pDamage = pD_MaxHealth / pD_launchers;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 38)
		{
			pDamage = pD_MaxHealth / pD_minigun;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
		if(weaponid == 41)
		{
			pDamage = pD_MaxHealth / pD_spraycan;
			SetPlayerHealth(playerid, healthamount - pDamage);
		}
	}
	#endif

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new string[256];
	new aname[MAX_PLAYER_NAME];
	new kname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
	GetPlayerName(killerid, kname, MAX_PLAYER_NAME);
	format(file, sizeof(file), PASTA_CONTAS, aname);
	format(file2, sizeof(file2), PASTA_CONTAS, kname);

	if(GetTickCount() > FloodTimer[playerid])
	{
		FloodAlert[playerid] = 0;
	}

	FloodTimer[playerid] = GetTickCount() +TimerFlood;
	FloodAlert[playerid]++;

	if(FloodAlert[playerid] > 1 && FloodAlert[playerid] < AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-KILL-FLOOD _| Você tem %d/%d avisos.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood-1)
	{
		format(string, sizeof(string), "|_ ANTI-KILL-FLOOD _| Você tem %d/%d avisos. Mais um e você será kickado.", FloodAlert[playerid], AlertFlood);
		SendClientMessage(playerid, Amarelo, string);
	}
	else if(FloodAlert[playerid] == AlertFlood)
	{
		format(string, sizeof(string), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Flood Kill", PlayerName(playerid));
		SendClientMessageToAll(Amarelo, string);
		KickLog(string);
		Kick(playerid);
		return 1;
	}

	#if defined BomberUser
	if(GetPVarInt(playerid, "nearExp") != INVALID_PLAYER_ID && killerid == INVALID_PLAYER_ID)
	{
		killerid = GetPVarInt(playerid, "nearExp");
		if(killerid == playerid)
		{
			killerid = INVALID_PLAYER_ID;
		}
		reason = 51;
	}
	#endif

	SendDeathMessage(killerid, playerid, reason);

	if(cercado[playerid] == 1)
	{
		UncagePlayer(playerid);
		cercado[playerid] = 0;
	}

	// ================================ Anim Loops =====================================
	#if defined AnimLoopsUser
	if(gPlayerUsingLoopingAnim[playerid])
	{
		gPlayerUsingLoopingAnim[playerid] = 0;
		SendClientMessage(playerid, Blue, "Para sair do anime tecle 'Espaço'.");
	}
	#endif
	// =================================================================================

	dini_IntSet(file, "convitent", 0);
	dini_IntSet(file, "Entrevista", 0);

	if(autoescola[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new id = GetPlayerVehicleID(playerid);
			DestroyVehicle(id);
			id = INVALID_VEHICLE_ID;
		}
	}

	if(dini_Int(file, "usoudroga") == 1)
	{
		TextDrawHideForPlayer(playerid, drogas1);
		TextDrawHideForPlayer(playerid, drogas2);
		dini_IntSet(file, "usoudroga", 0);
	}

	TextDrawShowForPlayer(playerid, topblack);
	TextDrawShowForPlayer(playerid, bottomblack);
	SetTimerEx("HideTopblack", 3000, 0, "d", playerid);

	algemado[playerid] = 0;
	GPS_Spawned[playerid] = 0;
	autoescola[playerid] = 0;
	sequestro[playerid] = 0;
	xprefls[playerid] = 0;
	prefsf[playerid] = 0;
	preflv[playerid] = 0;
	nobanco[playerid] = 0;
	nobarls[playerid] = 0;
	nobarsf[playerid] = 0;
	nobarlv[playerid] = 0;
	nobarfc[playerid] = 0;
	nautlls[playerid] = 0;
	nautllv[playerid] = 0;

	if(GetClosestHospital(playerid) == 0)
	{
		SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), -2651.6501, 634.4510, 14.4531, 180.0000, 0, 0, 0, 0, 0, 0);
	}
	else if(GetClosestHospital(playerid) == 1)
	{
		SetSpawnInfo(playerid, 1 ,dini_Int(file, "Skin"), 1173.5842, -1324.5615, 15.1953, 278.4624, 0, 0, 0, 0, 0, 0);
	}
	else if(GetClosestHospital(playerid) == 2)
	{
		SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), 2031.9415, -1404.3578, 17.2614, 165.8180, 0, 0, 0, 0, 0, 0);
	}
	else if(GetClosestHospital(playerid) == 3)
	{
		SetSpawnInfo(playerid, 1, dini_Int(file, "Skin"), 1582.5615, 1768.7921, 10.8203, 93.7454, 0, 0, 0, 0, 0, 0);
	}

	if(dini_Int(file, "Preso") == 1)
	{
		preso[playerid] = 1;
		dini_IntSet(file, "ofmaconha", 0);
		dini_IntSet(file, "ofcocaina", 0);
		dini_IntSet(file, "ofcrack", 0);
		dini_IntSet(file, "tmaconha", 0);
		dini_IntSet(file, "tcrack", 0);
		dini_IntSet(file, "tcocaina", 0);
		dini_IntSet(file, "Maconha", 0);
		dini_IntSet(file, "Crack", 0);
		dini_IntSet(file, "Cocaina", 0);
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 999999);
		SetPlayerWantedLevel(playerid, 2);
		SetPlayerPos(playerid, 263.8820, 77.4002, 1001.0391);
		SetPlayerInterior(playerid, 6);
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, msgdm, "  Você está preso, para ser solto consulte um advogado");
		SendClientMessage(playerid, msgdm, "ou pague fiança pelo saldo bancario /fianca");
	}

	if(reason == 53 || reason == 54 || reason == 255)
	{
		morreu[playerid]++;

		if(DMlb == 1)
		{
			format(string, sizeof(string), "%s morreu com DM liberado!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMBloqueado[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu em área pública!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberados[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu na base da Swat!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadok[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu na base dos Skatistas!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadoy[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu na base da CV!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberado2[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu na Favela!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadon[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu no Navio!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberado[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s morreu na Arena!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(nogame[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new id = GetPlayerVehicleID(playerid);
				DestroyVehicle(id);
				id = INVALID_VEHICLE_ID;
			}
			format(string, sizeof(string), "| ANTI-DM | %s morreu em um Game!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(noevento[playerid] == 1)
		{
			format(string, sizeof(string), "%s morreu em um Evento!", aname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
	}
	else
	{
		morreu[playerid]++;
		matou[killerid]++;
		dini_IntSet(file2, "DM", 1);

		if(DMlb == 1)
		{
			format(string, sizeof(string), "%s matou alguem com DM liberado!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMBloqueado[playerid] == 1)
		{
			Procurados[killerid] = 0;
			preso[killerid] = 1;
			infratores[killerid] = 0;
			dini_IntSet(file2, "Procurado", 0);
			dini_IntSet(file2, "Preso", 1);
			ResetPlayerWeapons(killerid);
			SetPlayerHealth(killerid, 999999);
			SetPlayerWantedLevel(killerid, 0);
			SetPlayerInterior(killerid, 6);
			SetPlayerPos(killerid, 263.8820, 77.4002, 1001.0391);
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem em área pública e foi preso(a)!", kname);
			SendClientMessageToAll(Amarelo, string);
			return 1;
		}
		if(DMLiberados[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem na base da Swat!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadok[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem na base dos Skatistas!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadoy[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem na base da CV!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberado2[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem na Favela!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberadon[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem no Navio!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(DMLiberado[playerid] == 1)
		{
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem na Arena!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(nogame[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new id = GetPlayerVehicleID(playerid);
				DestroyVehicle(id);
				id = INVALID_VEHICLE_ID;
			}
			format(string, sizeof(string), "| ANTI-DM | %s matou alguem em um Game!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(noevento[playerid] == 1)
		{
			format(string, sizeof(string), "%s matou alguem em um Evento!", kname);
			SendClientMessageToAll(msgdm3, string);
			return 1;
		}
		if(dini_Int(file2, "DM") == 1)
		{
			SetPlayerWantedLevel(killerid, 4);
			dini_IntSet(file2, "Procurado", 1);
			Procurados[killerid] = 1;
			format(string, sizeof(string), "%s matou %s e está sendo procurado(a). ( /procurados )", kname, aname);
			SendClientMessageToAll(LARANJA, string);
			return 1;
		}
	}
	return 1;
}

public Combustivel()
{
	new vid, modelo, estado;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i) == 1)
			{
				vid = GetPlayerVehicleID(i);
				modelo = GetVehicleModel(vid);
				estado = GetPlayerVehicleSeat(i);
				for(new carro = 0; carro < MAX_CONCES; carro++)
				{
					format(file2, sizeof(file2), PASTA_CONCE, carro);
					if(dini_Exists(file2))
					{
						if(vid == dini_Int(file2, "Id"))
						{
							cCarro[i] = dini_Int(file2, "Combustivel");
							if(modelo == 509 || modelo == 510 || modelo == 481)
							{
								SendClientMessage(i, Vermelho, " Você está em uma bicicleta e não gastará combustível.");
							}
							else
							{
								if(estado == 0)
								{
									if(cCarro[i] <= 0)
									{
										dini_IntSet(file2, "Combustivel", 0);
									}
									else
									{
										dini_IntSet(file2, "Combustivel", cCarro[i]-1);
									}
								}
								if(cCarro[i] <= 0)
								{
									new engine, lights, alarm, doors, bonnet, boot, objective;
									GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
									SetVehicleParamsEx(vid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);

									SendClientMessage(i, Vermelho, " Seu combustível acabou vá até um posto mais próximo e abasteça.");
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public MoverObjeto(id, Float:X, Float:Y, Float:Z, Float:speed) MoveDynamicObject(id, X, Y, Z, speed);
public DestruirObjeto(objid) DestroyDynamicObject(objid);
public CriarExplosao(Float:X, Float:Y, Float:Z, tipo, Float:diam) CreateExplosion(X, Y, Z, tipo, diam);

public PlantouBomba(playerid)
{
	pbomba[playerid] = 0;
	return 1;
}

public semporte(playerid)
{
	new nomepl[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nomepl, sizeof(nomepl));
	format(file2, sizeof(file2), PASTA_CONTAS, nomepl);
	if(dini_Exists(file2))
	{
		if(dini_Int(file2, "Porte") == 0)
		{
			ResetPlayerWeapons(playerid);
		}
	}
	return 1;
}

public liberar(playerid)
{
	new plid;
	if(GetDistanceBetweenPlayers(plid, playerid) < 10)
	{
		if(sequestro[playerid] == 1)
		{
			sequestro[playerid] = 0;
			TogglePlayerControllable(plid, 1);
			RemovePlayerFromVehicle(plid);
			SendClientMessage(playerid, COLOR_GREEN, "Player liberado por ter passado muito tempo sequestrado.");
		}
	}
	return 1;
}

public Logarprof(playerid)
{
	new string[256];
	new nomepl[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nomepl, sizeof(nomepl));
	format(file2, sizeof(file2), PASTA_CONTAS, nomepl);
	if(dini_Int(file2, "Profissao") == Desempregado)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 14, 1);
		SetPlayerColor(playerid, Branco);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], Branco, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], Branco, "[- Novato(a)-]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == MotoristaP)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 1, 1);
		GivePlayerWeapon(playerid, 26, 100);
		SetPlayerColor(playerid, C_MotoristaP);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_MotoristaP, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_MotoristaP, "[Motorista Particular]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Guarda)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 24, 200);
		SetPlayerColor(playerid, C_Guarda);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Guarda, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Guarda, "[Guarda]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Policial_R)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 28, 200);
		GivePlayerWeapon(playerid, 27, 200);
		SetPlayerColor(playerid, C_PR);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_PR, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_PR, "[PR]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Policial_M)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 24, 300);
		GivePlayerWeapon(playerid, 28, 300);
		GivePlayerWeapon(playerid, 31, 300);
		GivePlayerWeapon(playerid, 27, 300);
		SetPlayerColor(playerid, C_PM);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_PM, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_PM, "[PM]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Policial_C)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 24, 350);
		GivePlayerWeapon(playerid, 28, 350);
		GivePlayerWeapon(playerid, 31, 350);
		SetPlayerColor(playerid, C_PC);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_PC, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_PC, "[PC]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Policial_F)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 400);
		GivePlayerWeapon(playerid, 28, 400);
		GivePlayerWeapon(playerid, 24, 400);
		SetPlayerColor(playerid, C_PF);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_PF, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_PF, "[PF]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Delegado)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 28, 400);
		GivePlayerWeapon(playerid, 24, 400);
		SetPlayerColor(playerid, C_Delegado);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Delegado, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Delegado, "[Delegado]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Bope)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 500);
		GivePlayerWeapon(playerid, 28, 500);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 31, 500);
		SetPlayerColor(playerid, C_Bope);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Bope, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Bope, "[Bope]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Swat)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 500);
		GivePlayerWeapon(playerid, 28, 500);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 31, 500);
		SetPlayerColor(playerid, C_Swat);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Swat, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Swat, "[Swat]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Espião)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 500);
		GivePlayerWeapon(playerid, 28, 500);
		GivePlayerWeapon(playerid, 24, 500);
		GivePlayerWeapon(playerid, 31, 500);
		SetPlayerColor(playerid, C_Espião);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Espião, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Espião, "[Espião]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Traficante)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 300);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 26, 300);
		GivePlayerWeapon(playerid, 24, 300);
		SetPlayerColor(playerid, C_Traficante);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Traficante, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Traficante, "[Traficante]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Assasino)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 350);
		GivePlayerWeapon(playerid, 26, 350);
		SetPlayerColor(playerid, C_Assasino);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Assasino, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Assasino, "[Assasino]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Terrorista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 400);
		GivePlayerWeapon(playerid, 30, 400);
		GivePlayerWeapon(playerid, 26, 400);
		GivePlayerWeapon(playerid, 24, 400);
		SetPlayerColor(playerid, C_Terrorista);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Terrorista, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Terrorista, "[Terrorista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Sequestrador)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 400);
		GivePlayerWeapon(playerid, 30, 400);
		GivePlayerWeapon(playerid, 26, 400);
		GivePlayerWeapon(playerid, 24, 400);
		SetPlayerColor(playerid, C_Sequestrador);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Sequestrador, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Sequestrador, "[Sequestrador]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == AssasinoProfissional)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 400);
		GivePlayerWeapon(playerid, 30, 400);
		GivePlayerWeapon(playerid, 26, 400);
		GivePlayerWeapon(playerid, 24, 400);
		SetPlayerColor(playerid, C_AssasinoP);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_AssasinoP, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_AssasinoP, "[Assasino Professional]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Jornalista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Jornalista);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Jornalista, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Jornalista, "[Jornalista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Fotografo)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 43, 20);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Fotografo);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Fotografo, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Fotografo, "[Fotografo(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Reporter)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Reporter);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Reporter, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Reporter, "[Reporter]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Ancora)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Ancora);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Ancora, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Ancora, "[Ancora]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Meteorologista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Meteoro);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Meteoro, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Meteoro, "[Meteorologista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Mecanico)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 5, 1);
		SetPlayerColor(playerid, C_Mecanico);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Mecanico, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Mecanico, "[Mecânico]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Rapper)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 30, 200);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Rapper);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Rapper, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Rapper, "[Rapper]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == VendedorSkin)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_VendedorSkin);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_VendedorSkin, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_VendedorSkin, "[Vendedor(a) de Skins]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == VendedorCarro)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_VendedorCarro);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_VendedorCarro, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_VendedorCarro, "[Vendedor de Carros]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Frentista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		GivePlayerWeapon(playerid, 23, 200);
		SetPlayerColor(playerid, C_Frentista);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Frentista, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Frentista, "[Frentista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Taxista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 5, 1);
		GivePlayerWeapon(playerid, 22, 50);
		SetPlayerColor(playerid, C_Taxista);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Taxista, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Taxista, "[Taxista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Paramedico)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 6, 1);
		GivePlayerWeapon(playerid, 23, 50);
		SetPlayerColor(playerid, C_Paramedico);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Paramedico, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Paramedico, "[Paramédico]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == FBI)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 1000);
		GivePlayerWeapon(playerid, 28, 1000);
		GivePlayerWeapon(playerid, 24, 1000);
		GivePlayerWeapon(playerid, 31, 1000);
		GivePlayerWeapon(playerid, 34, 1000);
		SetPlayerColor(playerid, C_FBI);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_FBI, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_FBI, "[FBI]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Interpol)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 800);
		GivePlayerWeapon(playerid, 28, 800);
		GivePlayerWeapon(playerid, 24, 800);
		GivePlayerWeapon(playerid, 31, 800);
		GivePlayerWeapon(playerid, 34, 200);
		SetPlayerColor(playerid, C_Interpol);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Interpol, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Interpol, "[Interpol]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Aposentado)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		GivePlayerWeapon(playerid, 24, 100);
		SetPlayerColor(playerid, C_Aposentado);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Aposentado, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Aposentado, "[Aposentado(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Advogado)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 50);
		SetPlayerColor(playerid, C_Advogado);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Advogado, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Advogado, "[Advogado(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == GuardaCostas)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 50);
		SetPlayerColor(playerid, C_GuardaCostas);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_GuardaCostas, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_GuardaCostas, "[Guarda Costas]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Corredor)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 24, 60);
		GivePlayerWeapon(playerid, 32, 200);
		SetPlayerColor(playerid, C_Corredor);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Corredor, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Corredor, "[Corredor de Rua]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Prostituta)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 11, 1);
		SetPlayerColor(playerid, C_Prostituta);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Prostituta, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Prostituta, "[Prostituta]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Promoter)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 1, 1);
		SetPlayerColor(playerid, C_Promoter);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Promoter, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Promoter, "[Promoter]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == SegVila)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 300);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 26, 300);
		GivePlayerWeapon(playerid, 24, 300);
		SetPlayerColor(playerid, C_SegVila);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_SegVila, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_SegVila, "[Segurança]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Assaltante)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 300);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 26, 300);
		GivePlayerWeapon(playerid, 24, 300);
		SetPlayerColor(playerid, C_Assaltante);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Assaltante, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Assaltante, "[Assaltante]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Bibliotecario)
	{
		ResetPlayerWeapons(playerid);
		SetPlayerColor(playerid, C_Bibliotecario);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Bibliotecario, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Bibliotecario, "[Bibliotecário(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == TraficanteD)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 32, 300);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 26, 300);
		GivePlayerWeapon(playerid, 24, 300);
		SetPlayerColor(playerid, C_TraficanteD);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_TraficanteD, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_TraficanteD, "[Traficante de Armas]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Prefeito)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		SetPlayerColor(playerid, C_Prefeito);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Prefeito, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Prefeito, "[Prefeito]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == vice/presidente)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		SetPlayerColor(playerid, C_vice/presidente);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_vice/presidente, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_vice/presidente, "[vice/presidente(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Presidente)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 15, 1);
		SetPlayerColor(playerid, C_Presidente);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Presidente, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Presidente, "[ - Presidente Do Brasil - ]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Mendigo)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 1, 1);
		GivePlayerWeapon(playerid, 6, 1);
		SetPlayerColor(playerid, C_Mendigo);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Mendigo, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Mendigo, "[Mendigo]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Empregada)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 14, 1);
		GivePlayerWeapon(playerid, 42, 700);
		SetPlayerColor(playerid, C_Empregada);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Empregada, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Empregada, "[Empregada]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Pedreiro)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 6, 1);
		GivePlayerWeapon(playerid, 41, 700);
		GivePlayerWeapon(playerid, 12, 1);
		SetPlayerColor(playerid, C_Pedreiro);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Pedreiro, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Pedreiro, "[Pedreiro]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Gari)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 46, 1);
		GivePlayerWeapon(playerid, 6, 1);
		GivePlayerWeapon(playerid, 4, 1);
		SetPlayerColor(playerid, C_Gari);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Gari, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Gari, "[Gari]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Lixeiro)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 46, 1);
		GivePlayerWeapon(playerid, 42, 700);
		GivePlayerWeapon(playerid, 1, 1);
		SetPlayerColor(playerid, C_Lixeiro);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Lixeiro, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Lixeiro, "[Lixeiro]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Temac)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 23, 500);
		GivePlayerWeapon(playerid, 2, 1);
		GivePlayerWeapon(playerid, 4, 1);
		SetPlayerColor(playerid, C_Temac);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Temac, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Temac, "[Temac]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Correio)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 46, 1);
		GivePlayerWeapon(playerid, 1, 1);
		GivePlayerWeapon(playerid, 4, 1);
		SetPlayerColor(playerid, C_Correio);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Correio, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Correio, "[Correios]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Estudante)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 2, 1);
		GivePlayerWeapon(playerid, 1, 1);
		SetPlayerColor(playerid, C_Estudante);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Estudante, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Estudante, "[Estudante]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Flanelinha)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 1, 1);
		SetPlayerColor(playerid, C_Flanelinha);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Flanelinha, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Flanelinha, "[Flanelinha]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Cantor)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 1, 1);
		SetPlayerColor(playerid, C_Cantor);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Cantor, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Cantor, "[Cantor(a)]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Poeta)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 2, 1);
		SetPlayerColor(playerid, C_Poeta);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Poeta, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Poeta, "[Poeta]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == LSPD)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 800);
		GivePlayerWeapon(playerid, 28, 800);
		GivePlayerWeapon(playerid, 24, 800);
		GivePlayerWeapon(playerid, 31, 800);
		GivePlayerWeapon(playerid, 34, 200);
		SetPlayerColor(playerid, C_LSPD);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_LSPD, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_LSPD, "[LSPD]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == YKZ)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 3, 1);
		GivePlayerWeapon(playerid, 26, 800);
		GivePlayerWeapon(playerid, 28, 800);
		GivePlayerWeapon(playerid, 24, 800);
		GivePlayerWeapon(playerid, 31, 800);
		GivePlayerWeapon(playerid, 34, 200);
		SetPlayerColor(playerid, C_YKZ);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_YKZ, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_YKZ, "[Yakuza]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == MRN)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 24, 999);
		GivePlayerWeapon(playerid, 25, 999);
		GivePlayerWeapon(playerid, 29, 999);
		GivePlayerWeapon(playerid, 30, 999);
		GivePlayerWeapon(playerid, 34, 999);
		GivePlayerWeapon(playerid, 42, 999);
		SetPlayerColor(playerid, C_MRN);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_MRN, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_MRN, "[Marines]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Mafia)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 24, 300);
		GivePlayerWeapon(playerid, 27, 300);
		GivePlayerWeapon(playerid, 29, 300);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 34, 300);
		GivePlayerWeapon(playerid, 42, 900);
		SetPlayerColor(playerid, C_Mafia);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Mafia, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Mafia, "[Máfia]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Drifter)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 16, 999);
		GivePlayerWeapon(playerid, 22, 999);
		GivePlayerWeapon(playerid, 26, 999);
		GivePlayerWeapon(playerid, 28, 999);
		GivePlayerWeapon(playerid, 34, 999);
		GivePlayerWeapon(playerid, 46, 1);
		GivePlayerWeapon(playerid, 31, 999);
		SetPlayerColor(playerid, C_Drifter);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Drifter, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Drifter, "[DK]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Professor)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 1, 1);
		GivePlayerWeapon(playerid, 2, 1);
		GivePlayerWeapon(playerid, 8, 1);
		GivePlayerWeapon(playerid, 22, 300);
		GivePlayerWeapon(playerid, 33, 100);
		SetPlayerColor(playerid, C_Professor);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Professor, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Professor, "[Professor]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Empregador)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 8, 1);
		GivePlayerWeapon(playerid, 9, 1);
		GivePlayerWeapon(playerid, 17, 30);
		GivePlayerWeapon(playerid, 30, 300);
		GivePlayerWeapon(playerid, 43, 20);
		SetPlayerColor(playerid, C_Empregador);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Empregador, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Empregador, "[Empregador]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == AtiradorElite)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 4, 1);
		GivePlayerWeapon(playerid, 16, 50);
		GivePlayerWeapon(playerid, 24, 300);
		GivePlayerWeapon(playerid, 26, 500);
		GivePlayerWeapon(playerid, 31, 900);
		GivePlayerWeapon(playerid, 32, 900);
		GivePlayerWeapon(playerid, 34, 400);
		SetPlayerColor(playerid, C_AtiradorElite);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_AtiradorElite, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_AtiradorElite, "[AE]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Ninja)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 8, 1);
		GivePlayerWeapon(playerid, 17, 50);
		GivePlayerWeapon(playerid, 23, 500);
		GivePlayerWeapon(playerid, 31, 300);
		GivePlayerWeapon(playerid, 32, 500);
		GivePlayerWeapon(playerid, 34, 300);
		SetPlayerColor(playerid, C_Ninja);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Ninja, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Ninja, "[Ninja]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Maquinista)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 6, 1);
		GivePlayerWeapon(playerid, 9, 1);
		GivePlayerWeapon(playerid, 18, 100);
		GivePlayerWeapon(playerid, 25, 300);
		GivePlayerWeapon(playerid, 28, 500);
		GivePlayerWeapon(playerid, 33, 300);
		SetPlayerColor(playerid, C_Maquinista);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Maquinista, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Maquinista, "[Maquinista]");
			}
		}
	}
	if(dini_Int(file2, "Profissao") == Caminhoneiro)
	{
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, 6, 1);
		GivePlayerWeapon(playerid, 9, 1);
		GivePlayerWeapon(playerid, 18, 100);
		GivePlayerWeapon(playerid, 25, 300);
		GivePlayerWeapon(playerid, 28, 500);
		GivePlayerWeapon(playerid, 33, 300);
		SetPlayerColor(playerid, C_Caminhoneiro);
		if(IsPlayerNPC(playerid))
		{
			if(IsValidDynamic3DTextLabel(NPCLabel[playerid]))
			{
				format(string, sizeof(string), "%s (%d)", nomepl, playerid);
				UpdateDynamic3DTextLabelText(NPCLabel[playerid], C_Caminhoneiro, string);
			}
		}
		else
		{
			if(IsValidDynamic3DTextLabel(ProfLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(ProfLabel[playerid], C_Caminhoneiro, "[ MAX Level Chupa ]");
			}
		}
	}
	PlayerPlaySound(playerid, 1057, 0, 0, 0);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	new x = 0;
	while(x != MAX_PLAYERS)
	{
		if(IsPlayerConnected(x) && GetPlayerState(x) == PLAYER_STATE_SPECTATING &&
			gSpectateID[x] == playerid && gSpectateType[x] == ADMIN_SPEC_TYPE_PLAYER )
		{
			SetPlayerInterior(x, newinteriorid);
		}
		x++;
	}
}

public destinoviagen(playerid)
{
	if(Aerols[playerid] == 1)
	{
		SetPlayerPos(playerid, 2085.4761, -2468.5957, 13.5469);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Aero Los Santos.");
		Aerols[playerid] = 0;
		return 1;
	}
	if(Aerosf[playerid] == 1)
	{
		SetPlayerPos(playerid, -1408.5679, -166.7956, 14.1411);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Aero San Fierro.");
		Aerosf[playerid] = 0;
		return 1;
	}
	if(Aerolv[playerid] == 1)
	{
		SetPlayerPos(playerid, 1318.9139, 1251.1759, 10.8203);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Aero Las Venturas.");
		Aerolv[playerid] = 0;
		return 1;
	}
	if(Aeroabd[playerid] == 1)
	{
		SetPlayerPos(playerid, 432.6364, 2529.2515, 16.7646);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Aero Abandonado.");
		Aeroabd[playerid] = 0;
		return 1;
	}
	if(bayside[playerid] == 1)
	{
		SetPlayerPos(playerid, -2244.8035, 2343.6038, 4.9863);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Vila Bayside.");
		bayside[playerid] = 0;
		return 1;
	}
	if(EQ[playerid] == 1)
	{
		SetPlayerPos(playerid, -1445.6693, 2631.0288, 55.8359);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: El Quebrados.");
		EQ[playerid] = 0;
		return 1;
	}
	if(LP[playerid] == 1)
	{
		SetPlayerPos(playerid, -237.6759, 2692.3823, 62.6875);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Las Payasadas.");
		LP[playerid] = 0;
		return 1;
	}
	if(a51[playerid] == 1)
	{
		SetPlayerPos(playerid, 192.0514, 1880.9296, 17.6406);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Area51.");
		a51[playerid] = 0;
		return 1;
	}
	if(LB[playerid] == 1)
	{
		SetPlayerPos(playerid, -777.0883, 1541.5990, 26.9609);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Las Barrancas.");
		LB[playerid] = 0;
		return 1;
	}
	if(FC[playerid] == 1)
	{
		SetPlayerPos(playerid, -94.3555, 1157.0327, 19.7422);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Forte Carson.");
		FC[playerid] = 0;
		return 1;
	}
	if(MG[playerid] == 1)
	{
		SetPlayerPos(playerid, 1409.6783, 277.5197, 19.5469);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Monte Gomery.");
		MG[playerid] = 0;
		return 1;
	}
	if(PC[playerid] == 1)
	{
		SetPlayerPos(playerid, 2388.7761, 40.0404, 26.4844);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Palomino Creek.");
		PC[playerid] = 0;
		return 1;
	}
	if(DME[playerid] == 1)
	{
		SetPlayerPos(playerid, 671.8423, -522.4174, 16.3359);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Dillimore.");
		DME[playerid] = 0;
		return 1;
	}
	if(MC[playerid] == 1)
	{
		SetPlayerPos(playerid, -2341.3350, -1599.7168, 483.6694);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Monte Chiliad.");
		MC[playerid] = 0;
		return 1;
	}
	if(AP[playerid] == 1)
	{
		SetPlayerPos(playerid, -83.6938, -1455.5828, 7.0306);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, 0xC0C0C0AA, "Você chegou ao destino: Angel Pine.");
		AP[playerid] = 0;
		return 1;
	}
	return 1;
}

public ABroadCast(COLOR, const string[], level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(pAdmin[i] == 1 || pAdmin[i] == 2 || pAdmin[i] == 3 || pAdmin[i] == 4 || pAdmin[i] == 5)
			{
				SendClientMessage(i, COLOR, string);
			}
		}
	}
	return 0;
}

public ABroadCast2(COLOR, const string[], level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(verpms[i] == 1)
			{
				SendClientMessage(i, COLOR, string);
			}
		}
	}
	return 0;
}

public Chatp(COLOR, const string[], level, playerid)
{
	new aname[MAX_PLAYER_NAME];
	new pname[MAX_PLAYER_NAME];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);
			GetPlayerName(i, pname, MAX_PLAYER_NAME);
			format(file2, sizeof(file2), PASTA_CONTAS, pname);
			if(dini_Int(file, "Profissao") == dini_Int(file2, "Profissao"))
			{
				SendClientMessage(i, COLOR, string);
			}
		}
	}
	return 0;
}

public Relatorio(COLOR, const string[], level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(pAdmin[i] > 0)
			{
				SendClientMessage(i, COLOR, string);
				GameTextForPlayer(i, "~r~NOVO ~b~PEDIDO", 3000, 4);
				PlayerPlaySound(i, 1057, 0, 0, 0);
			}
		}
	}
	return 0;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new grana = GetPlayerGrana(playerid);

	if(pickupid == PickupsFix[1])
	{
		SetPlayerPos(playerid, 324.6059, 304.3401, 999.1484);
		SetPlayerInterior(playerid, 5);
	}
	if(pickupid == PickupsFix[0])
	{
		SetPlayerPos(playerid, -212.6779, 979.6142, 19.3291);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[55])
	{
		if(nobanco[playerid] == 1)
		{
			SetPlayerPos(playerid, 1413.7911, -1701.3040, 13.5394);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
		if(nobanco[playerid] == 2)
		{
			SetPlayerPos(playerid, 1153.9411, -1769.8316, 16.5937);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
		if(nobanco[playerid] == 3)
		{
			SetPlayerPos(playerid, -1882.9195, 824.4190, 35.1747);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
		if(nobanco[playerid] == 4)
		{
			SetPlayerPos(playerid, -2650.8605, 376.0171, 6.1095);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
		if(nobanco[playerid] == 5)
		{
			SetPlayerPos(playerid, 1933.2949, 1345.2982, 9.9687);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
		if(nobanco[playerid] == 6)
		{
			SetPlayerPos(playerid, 2180.2832, 2294.2443, 10.8203);
			SetPlayerInterior(playerid, 0);
			nobanco[playerid] = 0;
		}
	}
	if(pickupid == PickupsFix[3])
	{
		SetPlayerPos(playerid, 1351.3582,-1756.5243,13.5078);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[2])
	{
		SetPlayerPos(playerid, -33.5122, -89.9078, 1003.5469);
		SetPlayerInterior(playerid, 18);
	}
	if(pickupid == PickupsFix[4])
	{
		SetPlayerPos(playerid, 513.8825,-11.2699,1001.5653);
		SetPlayerInterior(playerid, 3);
	}
	if(pickupid == PickupsFix[5])
	{
		SetPlayerPos(playerid, 2154.8842,-1071.1025,39.2741);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[8])
	{
		SetPlayerPos(playerid, 224.0249, -8.5593, 1002.2109);
		SetPlayerInterior(playerid, 5);
	}
	if(pickupid == PickupsFix[11])
	{
		SetPlayerPos(playerid, 2022.4974, 1007.9083, 10.8203);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[10])
	{
		SetPlayerPos(playerid, 2016.2699, 1017.7790, 996.8750);
		SetPlayerInterior(playerid, 10);
	}
	if(pickupid == PickupsFix[49])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 1;
	}
	if(pickupid == PickupsFix[50])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 2;
	}
	if(pickupid == PickupsFix[51])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 3;
	}
	if(pickupid == PickupsFix[52])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 4;
	}
	if(pickupid == PickupsFix[53])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 5;
	}
	if(pickupid == PickupsFix[54])
	{
		SetPlayerPos(playerid, 830.5774, 7.3999, 1004.1796);
		SetPlayerInterior(playerid, 3);
		nobanco[playerid] = 6;
	}
	if(pickupid == PickupsFix[14])
	{
		SetPlayerPos(playerid, 771.9539, -1.7038, 1000.7278);
		SetPlayerInterior(playerid, 5);
	}
	if(pickupid == PickupsFix[15])
	{
		SetPlayerPos(playerid, -146.3821, 1078.9905, 20.3192);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[16])
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		if(dini_Int(file, "Profissao") == Jornalista || dini_Int(file, "Profissao") == Reporter || dini_Int(file, "Profissao") == Ancora || dini_Int(file, "aAdmin") == 1 || PlayerInfo[playerid][SCON] == true)
		{
			dini_IntSet(file, "Entrevista", 2);
			SetPlayerPos(playerid, 366.6097, 201.3598, 1008.3828);
			SetPlayerInterior(playerid, 3);
		}
		if(dini_Int(file, "convitent") == 1)
		{
			dini_IntSet(file, "Entrevista", 1);
			SetPlayerPos(playerid, 366.6097, 201.3598, 1008.3828);
			SetPlayerInterior(playerid, 3);
		}
		if(dini_Int(file, "convitent") == 0)
		{
			SendClientMessage(playerid, Vermelho, "Aguarde uma entrevista.");
		}
	}
	if(pickupid == PickupsFix[17])
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(file, sizeof(file), PASTA_CONTAS, aname);
		SetPlayerPos(playerid, 366.6807, 185.3443, 1008.3828);
		SetPlayerInterior(playerid, 3);
		dini_IntSet(file, "convitent", 0);
		dini_IntSet(file, "Entrevista", 0);
	}
	if(pickupid == PickupsFix[45])
	{
		SetPlayerPos(playerid, 315.5569, -141.2360, 999.6016);
		SetPlayerInterior(playerid, 7);
	}
	if(pickupid == PickupsFix[46])
	{
		SetPlayerPos(playerid, 1366.2430, -1279.4869, 13.5469);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[18])
	{
		SetPlayerPos(playerid, 316.4616, -168.2046, 999.5938);
		SetPlayerInterior(playerid, 6);
	}
	if(pickupid == PickupsFix[19])
	{
		SetPlayerPos(playerid, -313.7262, 830.2489, 14.2422);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[20])
	{
		SetPlayerPos(playerid, 246.7995, 65.9249, 1003.6406);
		SetPlayerInterior(playerid, 6);
	}
	if(pickupid == PickupsFix[21])
	{
		SetPlayerPos(playerid, 1552.5618, -1675.5143, 16.1953);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[22])
	{
		SetPlayerPos(playerid, 288.7459, 169.3509, 1007.1718);
		SetPlayerInterior(playerid, 3);
	}
	if(pickupid == PickupsFix[23])
	{
		SetPlayerPos(playerid, 2286.9650, 2429.0388, 10.8203);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[24])
	{
		SetPlayerPos(playerid, 246.3771, 109.6216, 1003.2187);
		SetPlayerInterior(playerid, 10);
	}
	if(pickupid == PickupsFix[25])
	{
		SetPlayerPos(playerid, -1605.4896, 712.6463, 13.8714);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[44])
	{
		nautlls[playerid] = 1;
		SetPlayerPos(playerid, -25.9833, -186.0034, 1003.5469);
		SetPlayerInterior(playerid, 17);
	}
	if(pickupid == PickupsFix[26])
	{
		nautllv[playerid] = 1;
		SetPlayerPos(playerid, -25.9833, -186.0034, 1003.5469);
		SetPlayerInterior(playerid, 17);
	}
	if(pickupid == PickupsFix[27])
	{
		if(nautlls[playerid] == 1)
		{
			SetPlayerPos(playerid, 1829.3083, -1842.6304, 13.5781);
			SetPlayerInterior(playerid, 0);
			nautlls[playerid] = 0;
		}
		if(nautllv[playerid] == 1)
		{
			SetPlayerPos(playerid, 613.1134, -492.4037, 16.3359);
			SetPlayerInterior(playerid, 0);
			nautllv[playerid] = 0;
		}
	}
	if(pickupid == PickupsFix[28])
	{
		SetPlayerPos(playerid, 774.1636, -48.0787, 1000.5859);
		SetPlayerInterior(playerid, 6);
	}
	if(pickupid == PickupsFix[29])
	{
		SetPlayerPos(playerid, -2267.7117, -155.8365, 35.3203);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[30])
	{
		SetPlayerPos(playerid, 773.6336, -75.4685, 1000.6546);
		SetPlayerInterior(playerid, 7);
	}
	if(pickupid == PickupsFix[32])
	{
		SetPlayerPos(playerid, 2581.4500, 1063.3763, 10.8203);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[32])
	{
		nobarsf[playerid] = 1;
		SetPlayerPos(playerid, -227.2845, 1400.7986, 27.7656);
		SetPlayerInterior(playerid, 18);
	}
	if(pickupid == PickupsFix[37])
	{
		nobarlv[playerid] = 1;
		SetPlayerPos(playerid, -227.2845, 1400.7986, 27.7656);
		SetPlayerInterior(playerid, 18);
	}
	if(pickupid == PickupsFix[12])
	{
		nobarfc[playerid] = 1;
		SetPlayerPos(playerid, -227.2845, 1400.7986, 27.7656);
		SetPlayerInterior(playerid, 18);
	}
	if(pickupid == PickupsFix[43])
	{
		nobarls[playerid] = 1;
		SetPlayerPos(playerid, -227.2845, 1400.7986, 27.7656);
		SetPlayerInterior(playerid, 18);
	}
	if(pickupid == PickupsFix[13])
	{
		if(nobarfc[playerid] == 1)
		{
			SetPlayerPos(playerid, -144.0950, 1221.2968, 19.8992);
			SetPlayerInterior(playerid, 0);
			nobarfc[playerid] = 0;
		}
		if(nobarlv[playerid] == 1)
		{
			SetPlayerPos(playerid, 2367.2222, 1982.4575, 10.8125);
			SetPlayerInterior(playerid, 0);
			nobarlv[playerid] = 0;
		}
		if(nobarsf[playerid] == 1)
		{
			SetPlayerPos(playerid, -2214.5269, 201.0192, 35.3203);
			SetPlayerInterior(playerid, 0);
			nobarsf[playerid] = 0;
		}
		if(nobarls[playerid] == 1)
		{
			SetPlayerPos(playerid, 1804.5900, -1712.9866, 13.5415);
			SetPlayerInterior(playerid, 0);
			nobarls[playerid] = 0;
		}
	}
	if(pickupid == PickupsFix[33])
	{
		SetPlayerPos(playerid, 6.4397, -27.7275, 1003.5494);
		SetPlayerInterior(playerid, 10);
	}
	if(pickupid == PickupsFix[34])
	{
		SetPlayerPos(playerid, -2443.1655, 744.0441, 35.0156);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[35])
	{
		SetPlayerPos(playerid, 207.0726, -136.3809, 1002.8743);
		SetPlayerInterior(playerid, 3);
	}
	if(pickupid == PickupsFix[36])
	{
		SetPlayerPos(playerid, -1696.8417, 949.7108, 24.8906);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[9])
	{
		SetPlayerPos(playerid, 1160.4045, -1693.9617, 14.0507);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[38])
	{
		SetPlayerPos(playerid, 207.7466, -108.4223, 1005.1328);
		SetPlayerInterior(playerid, 15);
	}
	if(pickupid == PickupsFix[39])
	{
		SetPlayerPos(playerid, 2104.9497, 2257.1113, 11.0234);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[40])
	{
		SetPlayerPos(playerid, 385.4674, 173.9319, 1008.3828);
		SetPlayerInterior(playerid, 3);
		xprefls[playerid] = 1;
	}
	if(pickupid == PickupsFix[41])
	{
		SetPlayerPos(playerid, 385.4674, 173.9319, 1008.3828);
		SetPlayerInterior(playerid, 3);
		prefsf[playerid] = 1;
	}
	if(pickupid == PickupsFix[42])
	{
		SetPlayerPos(playerid, 385.4674, 173.9319, 1008.3828);
		SetPlayerInterior(playerid, 3);
		preflv[playerid] = 1;
	}
	if(pickupid == PickupsFix[6])
	{
		SetPlayerPos(playerid, 385.4674, 173.9319, 1008.3828);
		SetPlayerInterior(playerid, 3);
	}
	if(pickupid == PickupsFix[7])
	{
		SetPlayerPos(playerid, -203.2199, 1062.0526, 19.7421);
		SetPlayerInterior(playerid, 0);
		if(xprefls[playerid] == 1)
		{
			SetPlayerPos(playerid, 1485.0579,-1774.5546,13.5469);
			SetPlayerInterior(playerid, 0);
			xprefls[playerid] = 0;
		}
		if(prefsf[playerid] == 1)
		{
			SetPlayerPos(playerid, -2764.4082, 375.6028, 6.3409);
			SetPlayerInterior(playerid, 0);
			prefsf[playerid] = 0;
		}
		if(preflv[playerid] == 1)
		{
			SetPlayerPos(playerid, 2445.0100, 2376.1411, 12.1635);
			SetPlayerInterior(playerid, 0);
			preflv[playerid] = 0;
		}
	}
	if(pickupid == PickupsFix[47])
	{
		SetPlayerPos(playerid, 1415.7985, -1479.1764, 125.3672);
		SetPlayerInterior(playerid, 0);
	}
	if(pickupid == PickupsFix[48])
	{
		SetPlayerPos(playerid, 1478.5568, -1607.3013, 14.0393);
		SetPlayerInterior(playerid, 0);
	}
	// Armas
	if(pickupid == PickupsFix[56] || pickupid == PickupsFix[60] || pickupid == PickupsFix[64] || pickupid == PickupsFix[68] || pickupid == PickupsFix[72])
	{
		if(grana > 99)
		{
			GivePlayerGrana(playerid, -100);
			GivePlayerWeapon(playerid, 22, 100000); // Colt 45 Pistol
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem grana o suficiente!");
		}
	}
	if(pickupid == PickupsFix[57] || pickupid == PickupsFix[61] || pickupid == PickupsFix[65] || pickupid == PickupsFix[69] || pickupid == PickupsFix[73])
	{
		if(grana > 199)
		{
			GivePlayerGrana(playerid, -200);
			GivePlayerWeapon(playerid, 24, 100000); // Desert Eagle
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem grana o suficiente!");
		}
	}
	if(pickupid == PickupsFix[58] || pickupid == PickupsFix[62] || pickupid == PickupsFix[66] || pickupid == PickupsFix[70] || pickupid == PickupsFix[74])
	{
		if(grana > 299)
		{
			GivePlayerGrana(playerid, -300);
			GivePlayerWeapon(playerid, 31, 100000); // M4 Assault Rifle
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem grana o suficiente!");
		}
	}
	if(pickupid == PickupsFix[59] || pickupid == PickupsFix[63] || pickupid == PickupsFix[67] || pickupid == PickupsFix[71] || pickupid == PickupsFix[75])
	{
		if(grana > 199)
		{
			GivePlayerGrana(playerid, -200);
			GivePlayerWeapon(playerid, 32, 100000); // Tec-9
		}
		else
		{
			SendClientMessage(playerid, Vermelho, "Você não tem grana o suficiente!");
		}
	}

	new string[256];
	for(new p = 0; p < MAX_PROPS; p++)
	{
		format(string, sizeof(string), PASTA_PROPS, p);
		if(dini_Exists(string))
		{
			if(pickupid == dini_Int(string, "Id"))
			{
				if(dini_Int(string, "TDono") == 1)
				{
					ClearChatbox(playerid, 1);
					format(STRX, sizeof(STRX), "  Para mais informações use /ajudaprop");
					SendClientMessage(playerid, Verde, STRX);
					SendClientMessage(playerid, Blue, "|___________________________________________________|");
					return 1;
				}
				else
				{
					if(order[playerid] == 0)
					{
						order[playerid] = 1;
						format(STRX, sizeof(STRX), "{FFFFFF}Esta propriedade está a venda.\n\n{FFFFFF}Valor: {FF0000}$%d\n{FFFFFF}Dono: {FF0000}%s\n{FFFFFF}Renda: {FF0000}$%d\n{FFFFFF}Prop ID: {FF0000}%d\n{FFFFFF}Nome: {FF0000}%s\n\n{FFFFFF}Oque deseja?", dini_Int(string, "Preco"), dini_Get(string, "Dono"), dini_Get(string, "Grana"), p, dini_Get(string, "Nome"));
						ShowPlayerDialog(playerid, proporder, DIALOG_STYLE_MSGBOX, "Informações", STRX, "Comprar", "Cancelar");
					}
					return 1;
				}
			}
		}
	}

	for(new c = 0; c < MAX_CASAS; c++)
	{
		format(string, sizeof(string), PASTA_CASAS, c);
		if(dini_Exists(string))
		{
			if(pickupid == dini_Int(string, "Id"))
			{
				if(dini_Int(string, "TDono") == 1)
				{
					ClearChatbox(playerid, 1);
					format(STRX, sizeof(STRX), "  Para entrar na casa aperte ENTER.");
					SendClientMessage(playerid, Verde, STRX);
					format(STRX, sizeof(STRX), "  Para mais informações use /ajudacasa");
					format(STRX, sizeof(STRX), "  Para Fica Mais Facil Usa /Minhacasa");
					SendClientMessage(playerid, Verde, STRX);
					SendClientMessage(playerid, Blue, "|___________________________________________________|");
					return 1;
				}
				else
				{
					if(order[playerid] == 0)
					{
						order[playerid] = 1;
						format(STRX, sizeof(STRX), "{FFFFFF}Esta casa está a venda.\n\n{FFFFFF}Valor: {FF0000}$%d\n{FFFFFF}Dono: {FF0000}%s\n{FFFFFF}Morador: {FF0000}%s\n{FFFFFF}Casa ID: {FF0000}%d\n{FFFFFF}Int ID: {FF0000}%d\n\n{FFFFFF}Oque deseja?", dini_Int(string, "Preco"), dini_Get(string, "Dono"), dini_Get(string, "Morador"), c, dini_Int(string, "Int"));
						ShowPlayerDialog(playerid, casaorder, DIALOG_STYLE_MSGBOX, "Informações", STRX, "Comprar", "Cancelar");					return 1;
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

#if defined MissilesUser
public VM_OnVehicleFire(vehicleid, slot)
{
	return 1;
}
#endif

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new string[256];
	new pname[MAX_PLAYER_NAME];

	#if defined HeadShotUser
		#define PRESSED(%0) \
			(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

	if(PRESSED(KEY_AIMFIRE) && NoBadCam(playerid))
	{
		switch(GetPlayerWeapon(playerid))
		{
			#if !defined CONSERVATIVE
			case WEAPON_SNIPER:
			{
				if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET) CheckHeadShot(playerid);
			}
			case 22..33, 38:
			{
				SetTimerEx("HSTimer", 100, 0, "i", playerid);
			}
			#else
			case WEAPON_SNIPER, WEAPON_SHOTGUN:
			{
				if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET) CheckHeadShot(playerid);
			}
			case WEAPON_RIFLE:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING) CheckHeadShot(playerid);
			}
			case 22..24, 26..32, 38:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING) CheckHeadShot(playerid);
			}
			#endif
		}
	}
		#undef PRESSED
	#endif

	#if defined MissilesUser
	VM_OnPlayerKeyStateChange(playerid, newkeys);
	#endif

	if(newkeys == KEY_WALK)
	{
		if(nobomber[playerid] == 1)
		{
			if(pbomba[playerid] == 0)
			{
				new xdinid, Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				pbomba[playerid] = 1;

				#if defined AnimLoopsUser
				OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				#else
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
				#endif

				xdinid = CreateDynamicObject(1252, X, Y, Z-0.8, 0, 0, 0, -1, -1, -1, 200.0);
				SetTimerEx("DestruirObjeto", 8000, false, "d", xdinid);
				SetTimerEx("PlantouBomba", 7000, false, "i", playerid);
				SetTimerEx("CriarExplosao", 8000, false, "fffdf", X, Y, Z-0.8, 7, 50.0);
				SetTimerEx("CriarExplosao", 8000, false, "fffdf", X, Y, Z-0.8, 10, 50.0);
				SetTimerEx("CriarExplosao", 8000, false, "fffdf", X, Y, Z-0.8, 2, 50.0);
				GameTextForPlayer(playerid, "~r~BOMBA ~b~PLANTADA", 1000, 4);
			}
			else
			{
				SendClientMessage(playerid, Verde, "Plante uma bomba por vez.");
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 30.0, 1570.8325195313, -1635.4766845703, 12.728549957275))
		{
			MoveDynamicObject(ObjectsFix[18], 1570.8934326172, -1635.2736816406, 27.561433792114, 3.0);
			SetTimerEx("MoverObjeto", 10000, false, "iffff", ObjectsFix[18], 1570.8325195313, -1635.4766845703, 12.728549957275, 3.0);
			SendClientMessage(playerid, 0xFFFFFFAA, "Subindo o elevador da DP!");
			SendClientMessage(playerid, Amarelo, "O elevador desce em 10 segundos!");
		}

		if(IsPlayerInRangeOfPoint(playerid, 20.0, 1067.3000488281, 1357.4000244141, 12.60000038147))
		{
			if(pAdmin[playerid] >= 2)
			{
				MoveDynamicObject(ObjectsFix[24], 1067.3000488281, 1357.4000244141, 17.60000038147, 3.0);
				SetTimerEx("MoverObjeto", 10000, false, "iffff", ObjectsFix[24], 1067.3000488281, 1357.4000244141, 12.60000038147, 3.0);
				SendClientMessage(playerid, 0xFFFFFFAA, "Abrindo portão da Detran!");
				SendClientMessage(playerid, Amarelo, "O portão fecha em 10 segundos!");
			}
			else
			{
				SendClientMessage(playerid, Amarelo, "Você não tem permissão.");
			}
		}
	}

	// ================================ Anim Loops =====================================
	#if defined AnimLoopsUser
	if(gPlayerUsingLoopingAnim[playerid] == 1)
	{
		if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys))
		{
			ClearAnimations(playerid);
			StopLoopingAnim(playerid);
			SendClientMessage(playerid, Blue, "Você parou o anime!");
		}
	}
	#endif
	// =================================================================================

	if(vip[playerid] == 1 || pAdmin[playerid] == 1 || pAdmin[playerid] == 2 || pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new var0 = GetPlayerVehicleID(playerid);
			if(function218(var0) && (oldkeys & 1 || oldkeys & 4))
			{
				RemoveVehicleComponent(var0, 1010);
				AddVehicleComponent(var0, 1010);
			}
		}
	}

	if(newkeys == KEY_SECONDARY_ATTACK && incar[playerid] == 1)
	{
		incar[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		RemovePlayerFromVehicle(playerid);
	}

	if(newkeys == KEY_SECONDARY_ATTACK && emcasa[playerid] == 1)
	{
		emcasa[playerid] = 0;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, CasaX[playerid], CasaY[playerid], CasaZ[playerid]);

		TogglePlayerControllable(playerid, false);
		SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

		SendClientMessage(playerid, Vermelho, "Você saiu da casa.");
	}

	for(new c = 0; c < MAX_CASAS; c++)
	{
		format(string, sizeof(string), PASTA_CASAS, c);
		if(newkeys == KEY_WALK && IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
		{
			GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
			if(strcmp(dini_Get(string, "Dono"), pname, true) == 0 || PlayerInfo[playerid][SCON] == true)
			{
				if(dini_Int(string, "Trancada") == 1)
				{
					dini_IntSet(string, "Trancada", 0);
					SendClientMessage(playerid, Verde, "Casa destrancada!");
				}
				if(dini_Int(string, "Trancada") == 0)
				{
					dini_IntSet(string, "Trancada", 1);
					SendClientMessage(playerid, Verde, "Casa trancada!");
				}
			}
		}

		if(newkeys == KEY_SECONDARY_ATTACK && IsPlayerInRangeOfPoint(playerid, 2.0, dini_Float(string, "PosX"), dini_Float(string, "PosY"), dini_Float(string, "PosZ")))
		{
			if(dini_Int(string, "Trancada") == 1)
			{
				GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
				if(strcmp(dini_Get(string, "Dono"), pname, true) == 0 || PlayerInfo[playerid][SCON] == true)
				{
					new strx[256];
					format(strx, sizeof(strx), PASTA_Int, dini_Int(string, "Int"));
					if(dini_Exists(strx))
					{
						new Float:X, Float:Y, Float:Z;
						GetPlayerPos(playerid, X, Y, Z);
						CasaX[playerid] = X;
						CasaY[playerid] = Y;
						CasaZ[playerid] = Z;
						emcasa[playerid] = 1;
						SetPlayerVirtualWorld(playerid, c);
						SetPlayerInterior(playerid, dini_Int(strx, "Int"));
						SetPlayerPos(playerid, dini_Float(strx, "EX"), dini_Float(strx, "EY"), dini_Float(strx, "EZ"));

						TogglePlayerControllable(playerid, false);
						SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

						SendClientMessage(playerid, Vermelho, "Você entrou na casa para sair use ENTER.");
					}
				}
			}
			else
			{
				new strx[256];
				format(strx, sizeof(strx), PASTA_Int, dini_Int(string, "Int"));
				if(dini_Exists(strx))
				{
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					CasaX[playerid] = X;
					CasaY[playerid] = Y;
					CasaZ[playerid] = Z;
					emcasa[playerid] = 1;
					SetPlayerVirtualWorld(playerid, c);
					SetPlayerInterior(playerid, dini_Int(strx, "Int"));
					SetPlayerPos(playerid, dini_Float(strx, "EX"), dini_Float(strx, "EY"), dini_Float(strx, "EZ"));

					TogglePlayerControllable(playerid, false);
					SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

					SendClientMessage(playerid, Vermelho, "Você entrou na casa para sair use ENTER.");
				}
			}
		}
	}

	if(pAdmin[playerid] == 3 || pAdmin[playerid] == 4 || pAdmin[playerid] == 5)
	{
		new Float:px,
			Float:py,
			Float:pz,
			Float:paa;

		if(newkeys == KEY_SECONDARY_ATTACK && amod[playerid] == 1)
		{
			GetPlayerFacingAngle(playerid, paa);
			if(paa >= 0.0 && paa <= 22.5)		  // n1
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py+20, pz);
			}
			if(paa >= 332.5)					  // n2
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py+20, pz);
			}
			if(paa >= 22.5 && paa <= 67.5)		  // nw
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-10, py+10, pz);
			}
			if(paa >= 67.5 && paa <= 112.5)		  // w
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-20, py, pz);
			}
			if(paa >= 112.5 && paa <= 157.5)	  // sw
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-10, py-10, pz);
			}
			if(paa >= 157.5 && paa <= 202.5)	  // s
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py-20, pz);
			}
			if(paa >= 202.5 && paa <= 247.5)	  // se
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+10, py-10, pz);
			}
			if(paa >= 247.5 && paa <= 292.5)	  // e
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+20, py, pz);
			}
			if(paa >= 292.5 && paa <= 332.5)	  // e
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+10, py+10, pz);
			}
		}

		if(newkeys == KEY_SPRINT && amod[playerid] == 1)
		{
			GetPlayerPos(playerid, px, py, pz);
			SetPlayerPos(playerid, px, py, pz+5);
		}

		if(newkeys == KEY_WALK && amod[playerid] == 1)
		{
			if(gmod[playerid] == 0)
			{
				gmod[playerid] = 1;
				SetPlayerHealth(playerid, 999999);
				SendClientMessage(playerid, 0x0016DDFF, "Godmod: ATIVADO");
			}
			else
			{
				if(gmod[playerid] == 1)
				{
					gmod[playerid] = 0;
					SetPlayerHealth(playerid, 100);
					SendClientMessage(playerid, 0x0016DDFF, "Godmod: DESATIVADO");
				}
			}
		}
	}

	#if defined BomberUser
	if(IsPlayerInAnyVehicle(playerid) && (vmid[playerid] > -1))
	{
		new old[MAX_PLAYERS];
		if((newkeys & KEY_NEXT_BOMBTYPE) && !(oldkeys & KEY_NEXT_BOMBTYPE))
		{
			old[playerid] = bptype[playerid];
			bptype[playerid] ++;
			if(bptype[playerid] >= sizeof gBombTypes)
			{
				bptype[playerid] = old[playerid];
			}
			while(gVehicleBombs[vmid[playerid]][bptype[playerid]+1] <= 0)
			{
				bptype[playerid] ++;
				if(bptype[playerid] >= sizeof gBombTypes)
				{
					bptype[playerid] = old[playerid];
					return 1;
				}
			}
			UpdateTextDraw(playerid);
		}
		if((newkeys & KEY_PREV_BOMBTYPE) && !(oldkeys & KEY_PREV_BOMBTYPE))
		{
			old[playerid] = bptype[playerid];
			bptype[playerid] --;
			if(bptype[playerid] < 0)
			{
				bptype[playerid] = old[playerid];
			}
			while(gVehicleBombs[vmid[playerid]][bptype[playerid]+1] <= 0)
			{
				bptype[playerid] --;
				if(bptype[playerid] < 0)
				{
					bptype[playerid] = old[playerid];
					return 1;
				}
			}
			UpdateTextDraw(playerid);
		}
		if((newkeys & KEY_DROP_BOMB) && !(oldkeys & KEY_DROP_BOMB))
		{
			if(IsPlayerAllowedToDropBomb(playerid))
			{
				DropBomb(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Você não pode usar essa bomba no momento!");
			}
			UpdateTextDraw(playerid);
		}
	}
	#endif

	return 1;
}

function218(arg0)
{
	new var0 = GetVehicleModel(arg0);
	switch(var0)
	{
		case 444:
			return 0;
		case 581:
			return 0;
		case 586:
			return 0;
		case 481:
			return 0;
		case 509:
			return 0;
		case 446:
			return 0;
		case 556:
			return 0;
		case 443:
			return 0;
		case 452:
			return 0;
		case 453:
			return 0;
		case 454:
			return 0;
		case 472:
			return 0;
		case 473:
			return 0;
		case 484:
			return 0;
		case 493:
			return 0;
		case 595:
			return 0;
		case 462:
			return 0;
		case 463:
			return 0;
		case 468:
			return 0;
		case 521:
			return 0;
		case 522:
			return 0;
		case 417:
			return 0;
		case 425:
			return 0;
		case 447:
			return 0;
		case 487:
			return 0;
		case 488:
			return 0;
		case 497:
			return 0;
		case 501:
			return 0;
		case 548:
			return 0;
		case 563:
			return 0;
		case 406:
			return 0;
		case 520:
			return 0;
		case 539:
			return 0;
		case 553:
			return 0;
		case 557:
			return 0;
		case 573:
			return 0;
		case 460:
			return 0;
		case 593:
			return 0;
		case 464:
			return 0;
		case 476:
			return 0;
		case 511:
			return 0;
		case 512:
			return 0;
		case 577:
			return 0;
		case 592:
			return 0;
		case 471:
			return 0;
		case 448:
			return 0;
		case 461:
			return 0;
		case 523:
			return 0;
		case 510:
			return 0;
		case 430:
			return 0;
		case 465:
			return 0;
		case 469:
			return 0;
		case 513:
			return 0;
		case 519:
			return 0;
	}
	return 1;
}

public Taxi()
{
	new string[256];

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Taximetro[i][0] == 1)
			{
				if(GetPlayerGrana(i) > PrecoCorrida[i]+3)
				{
					PrecoCorrida[i] = PrecoCorrida[i]+3;
					format(string, sizeof(string), "[TAXIMETRO] O taxímetro cobra: $%d", PrecoCorrida[i]);
					SendClientMessage(i, 0xFFFF00AA, string);
					SendClientMessage(Taximetro[i][1], COLOR_GREEN, string);
				}
				if(GetPlayerGrana(i) < PrecoCorrida[i]+3)
				{
					PrecoCorrida[i] = 0;
					Taximetro[i][1] = 0;
					RemovePlayerFromVehicle(i);
					GivePlayerGrana(i, 0-PrecoCorrida[i]);
					GivePlayerGrana(Taximetro[i][1], PrecoCorrida[i]);
					SendClientMessage(i, Vermelho, "[TAXIMETRO] Você não tem mais dinheiro para o taxi, e foi expulso do veículo.");
					SendClientMessage(Taximetro[i][1], Vermelho, "Seu passageiro ficou sem dinheiro e por isso foi expulso do taxi.");
				}
			}
		}
	}
	return 1;
}

public GPS()
{
	new string[256];
	new year, month, day;
	new hour, minute, second;
	new aname[MAX_PLAYER_NAME];

	#if defined HostNameRandUser
	new random1 = random(sizeof(SVNAMES));
	format(string, sizeof(string), "hostname %s", SVNAMES[random1]);
	SendRconCommand(string);
	#endif

	getdate(year, month, day);
	gettime(hour, minute, second);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerName(i, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);

			SetPlayerScore(i, dini_Int(file, "Level"));             

			#if defined gText2User        
            format(string, sizeof(string), "~l~~y~STATUS~n~~r~EXP:~b~%d/%d~n~~r~Level:~b~%d/%d~n~~g~Estudo:~b~%d/%d~n~~w~Players:~b~%i/%i", dini_Int(file, "EXP"), MAX_PLAYER_EXP, dini_Int(file, "Level"), MAX_PLAYER_LEVEL, dini_Int(file, "Faculdade"), MAX_PLAYER_ESTUDO, totalon, GetMaxPlayers(), i);
			TextDrawSetString(gText2[i], string);
			#endif

            #if defined gText4User
  	        format(string, sizeof(string), "..:: %02d~g~/~w~%02d~g~/~w~%04d ~g~- ~w~%02d~g~:~w~%02d~g~:~w~%02d ::.. ~r~/comandos ~r~/teles", day, month, year, hour, minute, second);
            TextDrawSetString(gText4[i], string);
			#endif

			// =================================== GPS =========================================
			if(GPS_Spawned[i] == 1)
			{
				format(string, sizeof(string), "Local: ~g~%s", GetPlayerArea(i));
				TextDrawSetString(gps[i], string);
			}
			// =================================================================================
		}
	}
	return 1;
}

public CasaLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Casas.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

public PropLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Props.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

public PortaoLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Portoes.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

public KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Kicks.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

public GetClosestHospital(playerid)
{
	if(!IsPlayerConnected(playerid))
	{
		return -1;
	}
	new Float:prevdist = 100000.000;
	new prevhosp;
	for(new hospid=0; hospid < 4; hospid++)
	{
		new Float:dist;
		if(hospid == 0)
		{
			dist = GetPlayerDistanceToPoint(playerid, -2651.6501, 634.1177, 0.0);
		}
		else if(hospid == 1)
		{
			dist = GetPlayerDistanceToPoint(playerid, 1173.5842, -1324.5615, 0.0);
		}
		else if(hospid == 2)
		{
			dist = GetPlayerDistanceToPoint(playerid, 2031.9415, -1404.3578, 0.0);
		}
		else if(hospid == 3)
		{
			dist = GetPlayerDistanceToPoint(playerid, 1582.5615, 1768.7921, 0.0);
		}
		if((dist < prevdist))
		{
			prevdist = dist;
			prevhosp = hospid;
		}
	}
	return prevhosp;
}

public Moradia(playerid)
{
	if(morar[playerid] == 1)
	{
		morar[playerid] = 0;
		moradia[playerid] = 0;
		SendClientMessage(convitede[playerid], Vermelho, "O convidado demorou muito para aceitar, convite dado como recusado.");
		convitede[playerid] = INVALID_PLAYER_ID;
	}
	return 1;
}

public Clima()
{
	new texto[256], Previsao;
	Previsao = random(sizeof(WeatherName));
	if(Previsao >= 1 && Previsao <= 50)
	{
		SetWeather(Previsao);
	}
	format(texto, sizeof(texto), "Clima: %s", WeatherName[Previsao]);
	SendClientMessageToAll(0x93FFFFAA, texto);
	return 1;
}

// SNAKE
#if defined SnakeUser
public snakeupdate(playerid)
{
	SnakeTimer[playerid] = SetTimerEx("snakeupdate", 500, 0, "i", playerid);

	for(new j; j<23; j++)
	{
		if(PosSnake[playerid][j] != -1)
		{
			TextDrawHideForPlayer(playerid, Snake[playerid][j]);
			TextDrawDestroy(Snake[playerid][j]);
		}
	}
	if(CheckGameOver(playerid)) return 1;
	if(Growth[playerid] == 1)
	{
		Growth[playerid] = 0;
		new LastID;
		for(new i; i<23; i++)
		{
			if(PosSnake[playerid][i] == -1)
			{
				LastID = i;
				break;
			}
		}
		for(new i = LastID; i >= 0; --i)
		{
			if(i == 0)
			{
				SideSystem(playerid);
			}
			else
			{
				PosSnake[playerid][i] = PosSnake[playerid][i-1];
				MoveTextDraw(i, playerid);
			}
		}
		return 1;
	}

	new LastID;
	for(new i; i<23; i++)
	{
		if(PosSnake[playerid][i] == -1 )
		{
			LastID = i;
			break;
		}
	}
	for(new i = LastID - 1; i >= 0; --i)
	{
		MoveTextDraw(i, playerid);
	}
	return 1;
}
#endif

public LevelUP()
{
	new string[256],
		aname[MAX_PLAYER_NAME],
		Float:X, Float:Y, Float:Z;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerName(i, aname, MAX_PLAYER_NAME);
			format(file, sizeof(file), PASTA_CONTAS, aname);

			GetPlayerPos(i, X, Y, Z);

			if(AFK[i] == 0)
			{
				dini_IntSet(file, "Tempo", dini_Int(file, "Tempo")+1);
			}
			// EXP =============================================================================
			if(dini_Int(file, "Tempo") >= TEMPO_EXP-1)
			{
				dini_IntSet(file, "EXP", dini_Int(file, "EXP")+EXP_POR_TEMPO);
				dini_IntSet(file, "Tempo", 0);
				PlayerPlaySound(i, 1057, X, Y, Z);
				format(string, sizeof(string), "{00FF00}[LEVEL UP] {CCFF00}Você ganhou mais experiência. {FF0000}({00FF00}%d{FF0000}/{00FF00}%d{FF0000})", dini_Int(file, "EXP"), MAX_PLAYER_EXP);
				SendClientMessage(i, -1, string);
			}
			// LEVEL UP ========================================================================
			if(dini_Int(file, "EXP") >= MAX_PLAYER_EXP-1)
			{
				dini_IntSet(file, "Level", dini_Int(file, "Level")+LEVEL_POR_EXP);
				dini_IntSet(file, "EXP", 0);
				dini_IntSet(file, "rouboubanco", 0);
				jasequestro[i] = 0;
				PlayerPlaySound(i, 1057, X, Y, Z);
				format(string, sizeof(string), "{00FF00}[LEVEL UP] {CCFF00}Você subiu de level. {FF0000}({00FF00}%d{FF0000}/{00FF00}%d{FF0000})", dini_Int(file, "Level"), MAX_PLAYER_LEVEL);
				SendClientMessage(i, -1, string);
			}
			// =================================== Outros ======================================
			if(dini_Int(file, "Preso") == 1)
			{
				Preso[i]++;
				PlayerPlaySound(i, 1076, X, Y, Z);
				format(string, sizeof(string), "Você está preso por %d/%d minutos!", Preso[i], TEMPO_PRESO);
				SendClientMessage(i, verdel, string);
				if(Preso[i] >= TEMPO_PRESO-1)
				{
					Preso[i] = 0;
					preso[i] = 0;
					dini_IntSet(file, "ofmaconha", 0);
					dini_IntSet(file, "ofcocaina", 0);
					dini_IntSet(file, "ofcrack", 0);
					dini_IntSet(file, "tmaconha", 0);
					dini_IntSet(file, "tcrack", 0);
					dini_IntSet(file, "tcocaina", 0);
					dini_IntSet(file, "maconha", 0);
					dini_IntSet(file, "crack", 0);
					dini_IntSet(file, "cocaina", 0);
					dini_IntSet(file, "Preso", 0);
					SetPlayerHealth(i, 100);
					SpawnPlayer(i);
					PlayerPlaySound(i, 1076, X, Y, Z);
					SendClientMessage(i, Vermelho, "Você foi solto, não cometa mais crimes.");
				}
			}
			if(NaFaculdade[i] == 1)
			{
				minutos[i]++;
				if(minutos[i] >= TEMPO_ESTUDO-1)
				{
					minutos[i] = 0;
					NaFaculdade[i] = 0;
					SetPlayerHealth(i, 100);
					SetPlayerInterior(i, 0);
					SpawnPlayer(i);
					dini_IntSet(file, "Faculdade", dini_Int(file, "Faculdade")+ESTUDO_POR_TEMPO);
					format(string, sizeof(string), "{00FF00}[LEVEL UP] {CCFF00}A aula acabou. {FF0000}({00FF00}%d{FF0000}/{00FF00}%d{FF0000})", dini_Int(file, "Faculdade"), MAX_PLAYER_ESTUDO);
					SendClientMessage(i, -1, string);
				}
				format(string, sizeof(string), "Você estudou por %d/%d minutos.", minutos[i], TEMPO_ESTUDO);
				SendClientMessage(i, verdel, string);
			}
			UpdatePlayerInfo(i);
		}
	}
	return 0;
}

public ClearChatbox(playerid, lines)
{
	if(IsPlayerConnected(playerid))
	{
		for(new i = 0; i < lines; i++)
		{
			SendClientMessage(playerid, -1, " ");
		}
	}
	return 1;
}

public RespawnSystem(playerid)
{
	new string[256];

	LoadTextDraws();
	Load3DTextsFix();
	LoadCheckpointsFix();
	LoadGangZonesFix();
	LoadMapIconsFix();
	LoadPickupsFix();
	LoadObjectsFix();
	LoadVehiclesFix();
	LoadFilesIniItens();

	LoadDynamicObjectsFromFile("Objetos/Bases.txt");
	LoadDynamicObjectsFromFile("Objetos/Casas.txt");
	LoadDynamicObjectsFromFile("Objetos/HQS.txt");
	LoadDynamicObjectsFromFile("Objetos/Games.txt");
	LoadDynamicObjectsFromFile("Objetos/Jump.txt");
	LoadDynamicObjectsFromFile("Objetos/Outros.txt");
    LoadDynamicObjectsFromFile("Objetos/sv.txt");
	LoadStaticVehiclesFromFile("Conce/setados.txt");
	LoadStaticVehiclesFromFile("vehicles/trains.txt");
	//LoadStaticVehiclesFromFile("vehicles/pilots.txt");
	LoadStaticVehiclesFromFile("vehicles/lv_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/lv_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/lv_gen.txt");
	LoadStaticVehiclesFromFile("vehicles/sf_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/sf_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/sf_gen.txt");
	LoadStaticVehiclesFromFile("vehicles/ls_law.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_airport.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_gen_inner.txt");
	//LoadStaticVehiclesFromFile("vehicles/ls_gen_outer.txt");
	//LoadStaticVehiclesFromFile("vehicles/whetstone.txt");
	//LoadStaticVehiclesFromFile("vehicles/bone.txt");
	//LoadStaticVehiclesFromFile("vehicles/flint.txt");
	//LoadStaticVehiclesFromFile("vehicles/tierra.txt");
	//LoadStaticVehiclesFromFile("vehicles/red_county.txt");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			LoadPlayerTextDraws(i);

			TextDrawShowForPlayer(i, gps[i]);

			#if defined gText2User
			TextDrawShowForPlayer(i, gText2[i]);
			#endif

			#if defined gText3User
			TextDrawShowForPlayer(i, gText3);
			#endif

			#if defined gText4User
			TextDrawShowForPlayer(i, gText4[i]);
			#endif

			TextDrawShowForPlayer(i, Relogio);

			if(AFK[playerid] == 1)
			{
				TextDrawShowForPlayer(i, AfkText);
				TextDrawShowForPlayer(i, AfkBackText);
			}

			GangZoneShowForPlayer(i, GangZonesFix[1], Vermelho);
			GangZoneShowForPlayer(i, GangZonesFix[2], Vermelho);
			GangZoneShowForPlayer(i, GangZonesFix[3], Vermelho);
			GangZoneShowForPlayer(i, GangZonesFix[4], Vermelho);
			GangZoneShowForPlayer(i, GangZonesFix[5], Vermelho);
			GangZoneShowForPlayer(i, GangZonesFix[6], Verde);
			GangZoneShowForPlayer(i, GangZonesFix[7], Branco);
			GangZoneShowForPlayer(i, GangZonesFix[8], Branco);
			GangZoneShowForPlayer(i, GangZonesFix[9], Branco);
		}
	}

	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, MAX_PLAYER_NAME);
	format(string, sizeof(string), "%s (%d) recarregou todos itens do servidor.", pname, playerid);
	SendClientMessageToAll(tcadm, string);

	format(string, sizeof(string), "{FFFFFF}Total de Objetos: %d\n{FFFFFF}Total de Pickups: %d\n{FFFFFF}Total de Checkpoints: %d\n{FFFFFF}Total de Race Checkpoints: %d\n{FFFFFF}Total de MapIcons: %d\n{FFFFFF}Total de TextLabels: %d\n{FFFFFF}Total de Areas: %d", CountDynamicObjects(), CountDynamicPickups(), CountDynamicCPs(), CountDynamicRaceCPs(), CountDynamicMapIcons(), CountDynamic3DTextLabels(), CountDynamicAreas());
	ShowPlayerDialog(playerid, rmovinfo, DIALOG_STYLE_MSGBOX, "Total de Itens do Servidor", string, "OK", "");
	return 0;
}

public pOnline()
{
	totalon = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(totalon == 0)
			{
				totalon = 1;
			}
			else if(totalon > 0)
			{
				totalon++;
			}
		}
	}
	return 1;
}

public CronServe()
{
	new string[256];

	minu++;
	if(horas == 0)
	{
		SetWorldTime(0);
		Faculdade2 = 0;
	}
	if(minu >= 59)
	{
		minu = 0;
		horas++;
		SetWorldTime(horas);
	}
	if(horas > 23)
	{
		horas = 0;
	}
	format(string, 25, "~w~%02d~g~:~w~%02d", horas, minu);
	TextDrawSetString(Relogio, string);

	// ================================== Faculdade ====================================
	if(horas == 9 && minu == 00)
	{
		Faculdade2 = 1;
		MoveDynamicObject(ObjectsFix[21], 1214.0789794922, -1842.5186767578, 20.415674209595, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1269.8895263672, -1842.5379638672, 20.511180877686, 4.0);
		GameTextForAll("~w~Faculdade ~p~Aberta!", 6000, 1);
	}
	if(horas == 12 && minu == 00)
	{
		Faculdade2 = 0;
		MoveDynamicObject(ObjectsFix[21], 1213.7843017578, -1842.4782714844, 15.156204223633, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1270.2001953125, -1842.5798339844, 15.156204223633, 4.0);
		GameTextForAll("~w~Faculdade ~p~Fechada!", 6000, 1);
	}
	// -------
	if(horas == 14 && minu == 00)
	{
		Faculdade2 = 1;
		MoveDynamicObject(ObjectsFix[21], 1214.0789794922, -1842.5186767578, 20.415674209595, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1269.8895263672, -1842.5379638672, 20.511180877686, 4.0);
		GameTextForAll("~w~Faculdade ~p~Aberta!", 6000, 1);
	}
	if(horas == 17 && minu == 00)
	{
		Faculdade2 = 0;
		MoveDynamicObject(ObjectsFix[21], 1213.7843017578, -1842.4782714844, 15.156204223633, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1270.2001953125, -1842.5798339844, 15.156204223633, 4.0);
		GameTextForAll("~w~Faculdade ~p~Fechada!", 6000, 1);
	}
	// -------
	if(horas == 21 && minu == 00)
	{
		Faculdade2 = 1;
		MoveDynamicObject(ObjectsFix[21], 1214.0789794922, -1842.5186767578, 20.415674209595, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1269.8895263672, -1842.5379638672, 20.511180877686, 4.0);
		GameTextForAll("~w~Faculdade ~p~Aberta!", 6000, 1);
	}
	if(horas == 24 && minu == 30)
	{
		Faculdade2 = 0;
		MoveDynamicObject(ObjectsFix[21], 1213.7843017578, -1842.4782714844, 15.156204223633, 4.0);
		MoveDynamicObject(ObjectsFix[22], 1270.2001953125, -1842.5798339844, 15.156204223633, 4.0);
		GameTextForAll("~w~Faculdade ~p~Fechada!", 6000, 1);
	}
	// Salário
	if(horas == 15 && minu == 00)
	{
		print("Salário pago ao(s) empregado(s) online!");
		Up();
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerMoney(i) != GetPlayerGrana(i))
			{
				ResetPlayerMoney(i);
				GivePlayerMoney(i, GetPlayerGrana(i));
			}

			#if !defined AntiCheatUser
			GetPlayerPos(i, PlayerCurrentPos[0], PlayerCurrentPos[1], PlayerCurrentPos[2]);

			if(!floatcmp(PlayerCurrentPos[0], PlayerLastPos[i][LastX]) && !floatcmp(PlayerCurrentPos[1], PlayerLastPos[i][LastY]))
			{
				PlayerAfkTicks[i]++;
			}
			else
			{
				PlayerAfkTicks[i] = 0;
			}
			PlayerLastPos[i][LastX] = PlayerCurrentPos[0];
			PlayerLastPos[i][LastY] = PlayerCurrentPos[1];
			PlayerLastPos[i][LastZ] = PlayerCurrentPos[2];

			if(PlayerAfkTicks[i] == MAX_IDLE_TIME*60 && PlayerInfo[i][Logged] == 1)
			{
				AFK[i] = 1;
				SetPlayerVirtualWorld(i, 1);
				SetCameraBehindPlayer(i);
				TogglePlayerControllable(i, 0);
				TextDrawShowForPlayer(i, AfkText);
				TextDrawShowForPlayer(i, AfkBackText);
				format(string, sizeof(string), "%s está ausente e foi impedido(a) de upar!", PlayerName(i));
				SendClientMessageToAll(0xFF9595AA, string);
			}
			#endif

			format(file, sizeof(file), PASTA_CONTAS, PlayerName(i));
			if(dini_Exists(file))
			{
				new Float:health;
				GetPlayerHealth(i, health);
				dini_IntSet(file, "Matou", matou[i]);
				dini_IntSet(file, "Morreu", morreu[i]);
				if(dini_Int(file, "usoudroga") == 1)
				{
					SetPlayerHealth(i, health-2);
				}
				if(dini_Int(file, "Level") > MAX_PLAYER_LEVEL-1)
				{
					dini_IntSet(file, "Level", MAX_PLAYER_LEVEL);
				}
				if(dini_Int(file, "Faculdade") > MAX_PLAYER_ESTUDO-1)
				{
					dini_IntSet(file, "Faculdade", MAX_PLAYER_ESTUDO);
				}
				if(pAdmin[i] > 0)
				{
					dini_IntSet(file, "Admin", pAdmin[i]);
				}
			}
		}
	}
	return 1;
}

public locais()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			// ================================ Áreas Públicas =================================
			if(IsPlayerInPlace(i, 1383.386, -1772.66, 1596.345, -1583.168) // pref
				|| IsPlayerInPlace(i, 1048.736, -1745.026, 1189.441, -1693.705) // bi
				|| IsPlayerInPlace(i, 1178.033, -1875.301, 1345.357, -1705.548) // facul
				|| PlayerToPoint(30.0, i, 370.7215, 173.7653, 1008.3828) // iPref
				|| PlayerToPoint(30.0, i, 246.3227, 79.6510, 1003.6406) // iDp
				|| PlayerToPoint(30.0, i, 829.5621, 4.8665, 1004.1870)) // iBanco
			{
				DMBloqueado[i] = 1;
			}
			else
			{
				if(DMBloqueado[i] == 1)
				{
					DMBloqueado[i] = 0;
				}
			}
			// ================================ Favela =========================================
			if(IsPlayerInPlace(i, 2016.010, -1161.922, 2324.010, -923.518))
			{
				DMLiberado2[i] = 1;
				GangZoneFlashForAll(GangZonesFix[1], BRANCO);
			}
			else
			{
				if(DMLiberado2[i] == 1)
				{
					DMLiberado2[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[1]);
				}
			}
			// ============================== Navio DM =========================================
			if(IsPlayerInPlace(i, -2545.777, 1483.09, -2230.474, 1623.225))
			{
				DMLiberadon[i] = 1;
				GangZoneFlashForAll(GangZonesFix[2], BRANCO);
			}
			else
			{
				if(DMLiberadon[i] == 1)
				{
					DMLiberadon[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[2]);
				}
			}
			// ============================== Area DM LV =======================================
			if(IsPlayerInPlace(i, 1267.535, 2084.409, 1408.109, 2235.263))
			{
				DMLiberado[i] = 1;
				GangZoneFlashForAll(GangZonesFix[3], BRANCO);
			}
			else
			{
				if(DMLiberado[i] == 1)
				{
					DMLiberado[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[3]);
				}
			}
			// ================================ Base COT =========================================
			if(IsPlayerInPlace(i, 2649.73,-2593.79,2794.238,-2337.187))
			{
				DMLiberadoy[i] = 1;
				GangZoneFlashForAll(GangZonesFix[5], BRANCO);
			}
			else
			{
				if(DMLiberadoy[i] == 1)
				{
					DMLiberadoy[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[5]);
				}
			}
			// ============================== Base Swat =======================================
			if(IsPlayerInPlace(i, 1101.976, -2096.375, 1318.738, -1993.733))
			{
				DMLiberados[i] = 1;
				GangZoneFlashForAll(GangZonesFix[4], BRANCO);
			}
			else
			{
				if(DMLiberados[i] == 1)
				{
					DMLiberados[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[4]);
				}
			}
			// ============================== Skatistas =======================================
			if(IsPlayerInPlace(i, 1821.749, -1483.09, 2113.696, -1331.278))
			{
				DMLiberadok[i] = 1;
				GangZoneFlashForAll(GangZonesFix[6], BRANCO);
			}
			else
			{
				if(DMLiberadok[i] == 1)
				{
					DMLiberadok[i] = 0;
					GangZoneStopFlashForAll(GangZonesFix[6]);
				}
			}
			// =========================== Postos de Combustível ==============================
												  // Postos em FC
			if(PlayerToPoint(7.0, i, 70.4532, 1219.1954, 18.8117)
				|| PlayerToPoint(7.0, i, -90.2719, -1169.9579, 2.3964)
				|| PlayerToPoint(7.0, i, -2411.5728, 976.1896, 45.4609)
				|| PlayerToPoint(7.0, i, 2114.8413, 919.9194, 10.8203))
			{
				GameTextForPlayer(i, "~r~/abastecer", 3000, 4);
				AreaPosto[i] = 1;
			}
			else
			{
				if(AreaPosto[i] == 1)
				{
					AreaPosto[i] = 0;
				}								  // Postos em LV
				if(PlayerToPoint(7.0, i, 2638.9553, 1107.1788, 10.8203)
					|| PlayerToPoint(7.0, i, 1595.6233, 2199.6162, 10.8203)
					|| PlayerToPoint(7.0, i, 1940.8671, -1773.2283, 13.3906)
					|| PlayerToPoint(7.0, i, -2243.8435, -2560.5598, 31.9219))
				{
					GameTextForPlayer(i, "~r~/abastecer", 3000, 4);
					AreaPosto[i] = 1;
				}
				else
				{
					if(AreaPosto[i] == 1)
					{
						AreaPosto[i] = 0;
					}							  // Postos em LS/SF
					if(PlayerToPoint(7.0, i, 1382.3647, 459.0785, 20.3452)
						|| PlayerToPoint(7.0, i, -1675.4781, 413.1594, 7.1797)
						|| PlayerToPoint(7.0, i, 655.5922, -565.3943, 16.3359)
						|| PlayerToPoint(7.0, i, -1606.3616, -2713.5872, 48.5335))
					{
						GameTextForPlayer(i, "~r~/abastecer", 3000, 4);
						AreaPosto[i] = 1;
					}
					else
					{
						if(AreaPosto[i] == 1)
						{
							AreaPosto[i] = 0;
						}						  // Postos em Acima FC
						if(PlayerToPoint(7.0, i, 576.3771, 1662.789, 619.3304)
							|| PlayerToPoint(7.0, i, 1004.1403, -937.8801, 42.1797)
							|| PlayerToPoint(7.0, i, 2202.1230, 2476.8582, 10.8203)
							|| PlayerToPoint(7.0, i, 417.2369, -1912.7708, 1.5641))
						{
							GameTextForPlayer(i, "~r~/abastecer", 3000, 4);
							AreaPosto[i] = 1;
						}
						else
						{
							if(AreaPosto[i] == 1)
							{
								AreaPosto[i] = 0;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public SalvePlayerPos(playerid)
{
	new string[256];
	format(string, sizeof(string), "/salvarpos %s", PlayerName(playerid));
	OnPlayerCommandText(playerid, string);
	return 1;
}

public AutoSpawn(plid)
{
	SpawnPlayer(plid);
	return 1;
}

public AutoRestart()
{
	SendRconCommand("gmx");
	return 1;
}

#if defined IntroTextUser
public ShowIntro(playerid)
{
	SetPVarInt(playerid, "Intro", GetPVarInt(playerid, "Intro")+1);
	new iteration = GetPVarInt(playerid, "Intro");
	switch(iteration)
	{
		case 1:
		{
			TextDrawShowForPlayer(playerid, Intro[playerid][0]);
		}
		case 2:
		{
		    TextDrawShowForPlayer(playerid, Intro[playerid][1]);
		}
		case 3:
		{
            TextDrawShowForPlayer(playerid, Intro[playerid][2]);
		}
		case 4:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][2]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][3]);
		}
		case 5:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][3]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][4]);
		}
		case 6:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][4]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][5]);
		}
		case 7:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][5]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][6]);
		}
		case 8:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][6]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][7]);
		}
		case 9:
		{
		    TextDrawHideForPlayer(playerid, Intro[playerid][7]);
		    TextDrawShowForPlayer(playerid, Intro[playerid][8]);
		}
		case 10:
		{
		    TextDrawShowForPlayer(playerid, Intro[playerid][9]);
		}
		case 11:
		{
		    TextDrawShowForPlayer(playerid, Intro[playerid][10]);
		}
		case 12:
		{
		    TextDrawShowForPlayer(playerid, Intro[playerid][11]);
		}
	}
	if(GetPVarInt(playerid, "Intro") < 10)
	{
		SetTimerEx("ShowIntro", 300, 0, "d", playerid);
	}
	else if(9 < GetPVarInt(playerid, "Intro") < 13)
	{
        SetTimerEx("ShowIntro", 2000, 0, "d", playerid);
	}
	else
	{
	    Loop(o, 12)
	    {
			TextDrawHideForPlayer(playerid, Intro[playerid][o]);

			TextDrawDestroy(Intro[playerid][o]);
			Intro[playerid][o] = Text:INVALID_TEXT_DRAW;
		}
		if(PlayerInfo[playerid][Logged] == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 100);
		}
		else
		{
			#if defined AntiCheatUser
			format(STRX, sizeof(STRX), "{00FF00}Seja bem vindo(a)!\n\n{FFFFFF}AntiCheat: {00FF00}ON\n{FFFFFF}Versão: {FF33FF}%d\n\n{00FF00}Divirta-se em nosso servidor.", AC_INCLUDE_VERSION);
			#else
			format(STRX, sizeof(STRX), "{00FF00}Seja bem vindo(a)!\n\n{FFFFFF}AntiCheat: {00FF00}OFF\n{FFFFFF}Versão: {FF33FF}Indisponível\n\n{00FF00}Divirta-se em nosso servidor.");
			#endif
			ShowPlayerDialog(playerid, AVISO, DIALOG_STYLE_MSGBOX, "Aviso", STRX, "OK", "");
		}
	}
	return 1;
}
#endif

#if defined AudioStreamUser
public StreamInfo(playerid)
{
	new streamedurl[256];
	format(streamedurl, sizeof(streamedurl), "%s", PlayerStreamLink[playerid]);
	if(PlayerStream[playerid] == 11)
	{
		PlayAudioStreamForPlayer(playerid, streamedurl);
		return 1;
	}
	else if(PlayerStream[playerid] == 22)
	{
		PlayAudioStreamForPlayer(playerid, streamedurl);
		return 1;
	}
	else if(PlayerStream[playerid] == 33)
	{
		PlayAudioStreamForPlayer(playerid, streamedurl);
		return 1;
	}
	else if(PlayerStream[playerid] == 44)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				PlayAudioStreamForPlayer(i, streamedurl);
				return 1;
			}
		}
	}
	else if(PlayerStream[playerid] == 333)
	{
		new Float:X, Float:Y, Float:Z, radius;
		GetPlayerPos(playerid, X, Y, Z);
		radius = strval(StreamRadius[playerid]);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsPlayerInRangeOfPoint(i, radius, X, Y, Z))
				{
					PlayAudioStreamForPlayer(i, streamedurl, X, Y, Z, radius, 1);
					return 1;
				}
			}
		}
	}
	return 1;
}
#endif

#if defined HeadShotUser
public HSTimer(playerid)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if((keys & KEY_FIRE) == (KEY_FIRE) && NoBadCam(playerid))
	{
		switch(GetPlayerWeapon(playerid))
		{
			case WEAPON_COLT45, WEAPON_UZI, WEAPON_TEC9, WEAPON_MP5, WEAPON_AK47, WEAPON_M4:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 150, 0, "i", playerid);
				}
			}
			case WEAPON_SHOTGSPA, WEAPON_SAWEDOFF:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 300, 0, "i", playerid);
				}
			}
			case WEAPON_SILENCED:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 500, 0, "i", playerid);
				}
			}
			case WEAPON_DEAGLE:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 800, 0, "i", playerid);
				}
			}
			case WEAPON_SHOTGUN:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_NO_BULLETS)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 900, 0, "i", playerid);
				}
			}
			case WEAPON_RIFLE:
			{
				if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
				{
					CheckHeadShot(playerid);
					SetTimerEx("HSTimer", 1000, 0, "i", playerid);
				}
			}
		}
	}
	return 1;
}

public CheckHeadShot(playerid)
{
	#if defined DEBUG_HS
	count1 = GetTickCount();
	#endif

	new Float:x[4], Float:y[4], Float:z[4], Float:dist = 1.0, Float:hs_range = 0.0;
	GetPlayerCameraPos(playerid, x[0], y[0], z[0]);
	GetPlayerCameraFrontVector(playerid, x[1], y[1], z[1]);

	#if defined DEBUG_HS
	printf("\nCamera Position: x=%.2f, y=%.2f, z=%.2f\nFrontVector: x=%.2f, y=%.2f, z=%.2f", x[0], y[0], z[0], x[1], y[1], z[1]);
	#endif

	hs_range = hs_ranges[GetPlayerWeapon(playerid)];

	if(hs_range != 0.0)
	{
		switch(GetPlayerWeapon(playerid))
		{
			case WEAPON_RIFLE:
			{
				if(x[1] < 0.0 && y[1] > 0.0 )
				{
					x[1] += 0.0155;
					y[1] += 0.0155;
				}
				else if(x[1] > 0.0 && y[1] > 0.0)
				{
					x[1] += 0.0155;
					y[1] -= 0.0155;
				}
				else if(x[1] < 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0155;
					y[1] += 0.0155;
				}
				else if(x[1] > 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0155;
					y[1] -= 0.0155;
				}
				if(z[1] > 0.1) z[1] += 0.06;
				else z[1] += 0.05;
			}
			case WEAPON_AK47,WEAPON_M4:
			{
				if(x[1] < 0.0 && y[1] > 0.0 )
				{
					x[1] += 0.0225;
					y[1] += 0.0225;
				}
				else if(x[1] > 0.0 && y[1] > 0.0)
				{
					x[1] += 0.0225;
					y[1] -= 0.0225;
				}
				else if(x[1] < 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0225;
					y[1] += 0.0225;
				}
				else if(x[1] > 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0225;
					y[1] -= 0.0225;
				}
				if(z[1] > 0.0) z[1] += 0.08;
				else if(z[1] < -0.0 && z[1] > -0.5) z[1] += 0.06;
				else if(z[1] < -0.5) z[1] -= 0.05;
			}
			case 22..29,32,38:
			{
				if(x[1] < 0.0 && y[1] > 0.0 )
				{
					x[1] += 0.0325;
					y[1] += 0.0325;
				}
				else if(x[1] > 0.0 && y[1] > 0.0)
				{
					x[1] += 0.0325;
					y[1] -= 0.0325;
				}
				else if(x[1] < 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0325;
					y[1] += 0.0325;
				}
				else if(x[1] > 0.0 && y[1] < 0.0)
				{
					x[1] -= 0.0325;
					y[1] -= 0.0325;
				}
				if(z[1] > 0.0) z[1] += 0.125;
				else z[1] += 0.09;
			}
		}
		x[0] += (2.0 * x[1]);
		y[0] += (2.0 * y[1]);
		do
		{
			x[0] += (x[1] * 1.0);
			y[0] += (y[1] * 1.0);
			z[0] += (z[1] * 1.0);

			#if defined DEBUG_HS
				#if !defined NO_LOS_HS
			SetTimerEx("DestroyMe", DESTROY_LOS, 0, "i", CreateDynamicObject(1239, x[0], y[0], z[0], 0.0, 0.0, 0.0, -1, -1, -1, 200.0));
				#endif
			#endif

			new string[256];
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(i != playerid)
				{
					GetPlayerPos(i, x[2], y[2], z[2]);

					if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_DUCK) z[2] -= 0.6;
					else z[2] += 0.8;
					if(PointInRangeOfPoint(0.5, x[0], y[0], z[0], x[2], y[2], z[2]))
					{
						if(tomouhs[i] == 0)
						{
							tomouhs[i] = 1;
							SetTimerEx("InOrder", OrderTime, 0, "d", i);
							format(file, sizeof(file), PASTA_CONTAS, PlayerName(i));
							if(IsPlayerNPC(i) || dini_Int(file, "AntiHS") == 1)
							{
								// Esses estão imune ao Head-Shot
							}
							else
							{
								SetPlayerHealth(i, 0.0);
								GameTextForPlayer(i, "~r~Head-Shot", 3000, 5);
								format(string, sizeof(string), "%s levou um belo Head-Shot.", PlayerName(i));
								SendClientMessageToAll(Blue, string);
							}
						}

						#if defined DEBUG_HS
						count2 = GetTickCount();
						count1 = count2 - count1;
						printf("\nPlayer hit\nMax Players Looped: %d\nMax Weapon Range: %.2f\nDistance to Hit: %.2f\nTotal execution time: %8d ms", i, hs_range, dist, count1);
						count1 = count2;
						#endif

						return 1;
					}
				}
			}
			dist += 1.0;
		}
		while(dist < hs_range);

		#if defined DEBUG_HS
		count2 = GetTickCount();
		count1 = count2 - count1;
		printf("\nMax Players Looped: %d\nMax Weapon Range: %.2f\nTotal execution time: %8d ms", MAX_PLAYERS, hs_range, count1);
		count1 = count2;
		#endif

	}
	return 1;
}

public DestroyMe(id)
{
	DestroyDynamicObject(id);
	return 1;
}
#endif

// Anti Rcon Hack
public AfterPlayerConnect(playerid)
{
	PlayerInfo[playerid][SCON] = false;
	return 1;
}

public ChangeRCONPassword()
{
	new string[39], password[25];

	new letters[][] =
	{
		"a", "b", "c", "d",
		"e", "f", "g", "h",
		"i", "j", "k", "l",
		"m", "n", "o", "p",
		"q", "r", "s", "t",
		"u", "v", "w", "x",
		"y", "z"
	};

	new bool:numlet = false;

	for(new i = 0; i < 20; i++)
	{
		if(numlet == false)
		{
			new number = random(10);
			format(string, sizeof(string), "%d", number);
			strins(password, string, i, 1);
			numlet = true;
		}
		else if(numlet == true)
		{
			new letter = random(26);
			strins(password, letters[letter], i, 1);
			numlet = false;
		}
	}

	format(string, sizeof(string), "rcon_password %s", password);
	SendRconCommand(string);

	//print(string);
}
// =================================================================================

#if defined BomberUser
public DropBomb(playerid)
{
	if(bptype[playerid] != 0)
	{
		if(bfree[playerid] == 0)
		{
			if(bombcount[playerid] < MAX_BOMBS)
			{
				bfree[playerid] = 1;
				new bid = bptype[playerid];
				for(new drops = 0; drops < gBombTypes[bptype[playerid]][dropAtOnce] && bombcount[playerid] < MAX_BOMBS; drops ++)
				{
					if(gBombTypes[bid][dropAtOnceDelay] > 0)
					{
						SetTimerEx("ReleaseBomb", gBombTypes[bid][dropAtOnceDelay]*drops, 0, "ii", playerid, bid);
					}
					else
					{
						ReleaseBomb(playerid, bid);
					}
				}
				SetTimerEx("ReactivateBomb", gBombTypes[bptype[playerid]][reloadTime], 0, "ii", playerid, bptype[playerid]);
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "Muitas bombas estão caindo, espere-as explodirem!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "As bombas estão sendo carregadas! Aguarde um momento...");
		}
	}
}

public ReleaseBomb(playerid, bid)
{
	new sel = -1;
	new Float:x, Float:y, Float:z, Float:tz;
	new Float:tolerancex, Float:tolerancey;
	bombcount[playerid]++;
	for(new i = 0; i < MAX_BOMBS; i++)
	{
		if(bombid[playerid][i] <= 0)
		{
			sel = i;
			bombid[playerid][i] = 1;
			break;
		}
	}
	if(sel == -1) return;
	boti[playerid][sel] = 0;
	btype[playerid][sel] = bid;
	GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);

	tz = floatdiv(z-MapAndreas_FindZ_For2DCoord(x, y, tz), gBombTypes[bid][accuracy]);
	tolerancex = floatsub(floatdiv(float(random(floatround(tz*100000))), 100000.0), floatdiv(tz, 2.0));
	tolerancey = floatsub(floatdiv(float(random(floatround(tz*100000))), 100000.0), floatdiv(tz, 2.0));
	MapAndreas_FindZ_For2DCoord(x+tolerancex, y+tolerancey, tz);

	bombid[playerid][sel] = CreateObject(gBombTypes[bid][bombModel], x, y, z-1, gBombTypes[bid][bombModelRot], 0, 0);
	MoveObject(bombid[playerid][sel], x+tolerancex, y+tolerancey, tz-1, gBombSpeed);
	bombtime[playerid][sel] = SetTimerEx("BombTimer", UPDATE_TIME, 1, "iif", playerid, sel, tz);
	if(bptype[playerid] == 6)
	{
		CallRemoteFunction("LaunchAntiRocketFlare", "iff", bombid[playerid][sel], gBombTypes[6][expRadius], gBombTypes[6][accuracy]);
	}
}

public BombTimer(playerid, num, Float:targetz)
{
	new Float:x, Float:y, Float:z;
	GetObjectPos(bombid[playerid][num], x, y, z);
	boti[playerid][num] += UPDATE_TIME;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerDistanceToPoint(i, x, y, z) < 7.5 && boti[playerid][num] >= 400)
			{
				DetonateBomb(playerid, num);
			}
		}
	}
	if((floatsub(z, targetz) < 1))
	{
		if(gBombTypes[btype[playerid][num]][expDelay] > 0)
		{
			SetTimerEx("DetonateBomb", gBombTypes[btype[playerid][num]][expDelay], 0, "ii", playerid, num);
			KillTimer(bombtime[playerid][num]);
		}
		else
		{
			DetonateBomb(playerid, num);
		}
	}
}

public DetonateBomb(playerid, num)
{
	new Float:x, Float:y, Float:z;
	GetObjectPos(bombid[playerid][num], x, y, z);
	OnBombExplode(playerid, num, x, y, z);
	KillTimer(bombtime[playerid][num]);
	if(gBombTypes[btype[playerid][num]][expID] > -1)
	{
		CreateExplosion(x, y, z, gBombTypes[btype[playerid][num]][expID], gBombTypes[btype[playerid][num]][expRadius]);
	}
	else
	{
		CreateSpecialExplosion(gBombTypes[btype[playerid][num]][expID], num, playerid);
	}
	DestroyObject(bombid[playerid][num]);
	bombid[playerid][num] = -1;
	bombcount[playerid] --;
}

public CreateSpecialExplosion(explosionid, num, playerid)
{
	new Float:x, Float:y, Float:z;
	GetObjectPos(bombid[playerid][num], x, y, z);
	if(explosionid == -1)
	{
		CreateExplosion(x, y, z, 7, 4.0);
		CreateExplosion(x, y, z+5.0, 1, 4.0);
		CreateExplosion(x, y, z+9.0, 1, 3.0);
		CreateExplosion(x, y, z+12.5, 1, 3.0);
		CreateExplosion(x+4.0, y, z, 0, 2.0);
		CreateExplosion(x-4.0, y, z, 0, 2.0);
		CreateExplosion(x, y+4.0, z, 0, 2.0);
		CreateExplosion(x, y-4.0, z, 0, 2.0);
		CreateExplosion(x, y-7.0, z, 1, 3.0);
		CreateExplosion(x, y+7.0, z, 1, 3.0);
		CreateExplosion(x+7.0, y, z, 1, 3.0);
		CreateExplosion(x-7.0, y, z, 1, 3.0);
		CreateExplosion(x+4.0, y+4.0, z, 1, 4.0);
		CreateExplosion(x-4.0, y-4.0, z, 1, 4.0);
		CreateExplosion(x-4.0, y+4.0, z, 1, 4.0);
		CreateExplosion(x+4.0, y-4.0, z, 1, 4.0);
	}
	else if(explosionid == -2)
	{
		CallRemoteFunction("StopAntiRocketFlare", "i", bombid[playerid][num]);
	}
	else if(explosionid == -3)
	{
		CreateExplosion(x, y, z, 7, 4.0);
		SetTimerEx("CreateRadialExplosion", 200, 0, "fffii", x, y, z, 0, 4);
	}
}

public CreateRadialExplosion(Float:x, Float:y, Float:z, round, max)
{
	for(new i = 0; i < 1+6*round; i ++)
	{
		CreateExplosion(x+round*10*floatcos(6.28318*(float(i)/(1.0+6.0*float(round)))), y+round*10*floatsin(6.28318*(float(i)/(1.0+6.0*float(round)))), z, 2, 3.0);
	}
	round ++;
	if(round <= max)
	{
		SetTimerEx("CreateRadialExplosion", 200, 0, "fffii", x, y, z, round, max);
	}
	return 1;
}

public ReactivateBomb(playerid)
{
	bfree[playerid] = 0;
	UpdateTextDraw(playerid);
}

public OnBombExplode(playerid, num, Float:x, Float:y, Float:z)
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(GetPlayerDistanceToPoint(i, x, y, z) < 2*gBombTypes[btype[playerid][num]][expID])
		{
			SetPVarInt(i, "nearExp", playerid);
			SetTimerEx("ResetNearExp", 15000, 0, "i", i);
		}
	}
	return 1;
}

public ShowTextDraw(playerid, vehicleid, count)
{
	if(IsPlayerInVehicle(playerid, vehicleid))
	{
		bombtext[playerid] = TextDrawCreate(0, 200, " ");
		TextDrawFont(bombtext[playerid], 1);
		UpdateTextDraw(playerid);
		TextDrawShowForPlayer(playerid, bombtext[playerid]);
	}
	else
	{
		count ++;
		if(count < 20)
		{
			ShowTextDraw(playerid, vehicleid, count);
		}
	}
}

public RemoveTextDraw(playerid)
{
	TextDrawHideForPlayer(playerid, bombtext[playerid]);
	TextDrawDestroy(bombtext[playerid]);
	bombtext[playerid] = Text:INVALID_TEXT_DRAW;
}

public ResetNearExp(playerid)
{
	SetPVarInt(playerid, "nearExp", INVALID_PLAYER_ID);
}
#endif

public OnPlayerUpdate(playerid)
{
	new Float:x, Float:y, Float:z,
		objectid, keys, ud, lr;

	objectid = GetPVarInt(playerid, "objToEdit");
	GetPlayerKeys(playerid, keys, ud, lr);

	UpdateHP(playerid);

	// SNAKE
	#if defined SnakeUser
	if(SnakeActive[playerid] == 1)
	{
		if(ud > 0 && Button[playerid] != 0) Side[playerid] = 1;
		else if(ud < 0 && Button[playerid] != 1) Side[playerid] = 0;
		if(lr > 0 && Button[playerid] != 2) Side[playerid] = 3;
		else if(lr < 0 && Button[playerid] != 3) Side[playerid] = 2;
	}
	#endif

	// LASER
	#if defined LaserUser
	if(GetPVarInt(playerid, "laser"))
	{
		RemovePlayerAttachedObject(playerid, 0);
		if(!(IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid)))
		{
			switch(GetPlayerWeapon(playerid))
			{
				case 23:
				{
					if(IsPlayerAiming(playerid))
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // SP standing aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
						}
						else
						{
												  // SP crouched aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
						}
					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // SP standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
						}
						else
						{
												  // SP crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
						}
					}
				}
				case 27:
				{
					if(IsPlayerAiming(playerid))
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // SPAS standing aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
						}
						else
						{
												  // SPAS crouched aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
						}
					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // SPAS standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
						}
						else
						{
												  // SPAS crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
						}
					}
				}
				case 30:
				{
					if(IsPlayerAiming(playerid))
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // AK standing aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
						}
						else
						{
												  // AK crouched aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
						}
					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // AK standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
						}
						else
						{
												  // AK crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
						}
					}
				}
				case 31:
				{
					if(IsPlayerAiming(playerid))
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // M4 standing aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
						}
						else
						{
												  // M4 crouched aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
						}
					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // M4 standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
						}
						else
						{
												  // M4 crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
						}
					}
				}
				case 34:
				{
					if(IsPlayerAiming(playerid))
					{

					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // Sniper standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
						}
						else
						{
												  // Sniper crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
						}
					}
				}
				case 29:
				{
					if(IsPlayerAiming(playerid))
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // MP5 standing aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
						}
						else
						{
												  // MP5 crouched aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
						}
					}
					else
					{
						if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
						{
												  // MP5 standing not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
						}
						else
						{
												  // MP5 crouched not aiming
							SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6,
								0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
						}
					}
				}
			}
		}
	}
	#endif

	// Arma-Colada
	#if defined ArmaColadaUser
	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerWeaponData(playerid, 5, ArmasColadas[playerid], BalasColadas[playerid]);
		if(ArmasColadas[playerid] == 30 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 30) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
			else SetPlayerAttachedObject(playerid, SlotAKeFUZIL, 355, 1, -0.060921, -0.141673, 0.000000, 0.000000, 35.362735, 0.000000);
		}
		else if(ArmasColadas[playerid] == 31 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 31) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
			else SetPlayerAttachedObject(playerid, SlotAKeFUZIL, 356, 1, -0.099681, -0.133408, 0.000000, 1.027592, 19.667785, 0.000000);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
		}

		GetPlayerWeaponData(playerid, 3, ArmasColadas[playerid], BalasColadas[playerid]);
		if(ArmasColadas[playerid] == 25 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 25) RemovePlayerAttachedObject(playerid, SlotEscopeta);
			else SetPlayerAttachedObject(playerid, SlotEscopeta, 349, 1, -0.109260, -0.059651, -0.066210, 186.310729, 42.375362, 6.716565);
		}
		else if(ArmasColadas[playerid] == 27 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 27) RemovePlayerAttachedObject(playerid, SlotEscopeta);
			else SetPlayerAttachedObject(playerid, SlotEscopeta, 351, 1, -0.181073, -0.056285, -0.081242, 181.269729, 39.399085, 12.246994);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, SlotEscopeta);
		}
	}
	else
	{
		GetPlayerWeaponData(playerid, 5, ArmasColadas[playerid], BalasColadas[playerid]);
		if(ArmasColadas[playerid] == 30 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 30) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
		}
		else if(ArmasColadas[playerid] == 31 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 31) RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, SlotAKeFUZIL);
		}

		GetPlayerWeaponData(playerid, 3, ArmasColadas[playerid], BalasColadas[playerid]);
		if(ArmasColadas[playerid] == 25 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 25) RemovePlayerAttachedObject(playerid, SlotEscopeta);
		}
		else if(ArmasColadas[playerid] == 27 && BalasColadas[playerid] >= 1)
		{
			if(GetPlayerWeapon(playerid) == 27) RemovePlayerAttachedObject(playerid, SlotEscopeta);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, SlotEscopeta);
		}
	}
	#endif

	if(keys & KEY_SECONDARY_ATTACK)
	{
		if(GetPVarInt(playerid, "EditingXMode") == 1)
		{
			DeletePVar(playerid, "EditingXMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
		if(GetPVarInt(playerid, "EditingYMode") == 1)
		{
			DeletePVar(playerid, "EditingYMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
		if(GetPVarInt(playerid, "EditingZMode") == 1)
		{
			DeletePVar(playerid, "EditingZMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
		if(GetPVarInt(playerid, "EditingRXMode") == 1)
		{
			DeletePVar(playerid, "EditingRXMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
		if(GetPVarInt(playerid, "EditingRYMode") == 1)
		{
			DeletePVar(playerid, "EditingRYMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
		if(GetPVarInt(playerid, "EditingRZMode") == 1)
		{
			DeletePVar(playerid, "EditingRZMode");
			SetTimerEx("ShowEditDialog", 600, false, "i", playerid);
		}
	}

	if(keys & KEY_ANALOG_LEFT)
	{
		if(GetPVarInt(playerid, "EditingXMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x-0.2, y, z);
		}
		if(GetPVarInt(playerid, "EditingYMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x, y-0.2, z);
		}
		if(GetPVarInt(playerid, "EditingZMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x, y, z-0.2);
		}
		if(GetPVarInt(playerid, "EditingRXMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x-0.2, y, z);
		}
		if(GetPVarInt(playerid, "EditingRYMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x, y-0.2, z);
		}
		if(GetPVarInt(playerid, "EditingRZMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x, y, z-0.2);
		}
	}

	if(keys & KEY_ANALOG_RIGHT)
	{
		if(GetPVarInt(playerid, "EditingXMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x+1, y, z);
		}
		if(GetPVarInt(playerid, "EditingYMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x, y+1, z);
		}
		if(GetPVarInt(playerid, "EditingZMode") == 1)
		{
			GetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectPos(objectid, x, y, z+1);
		}
		if(GetPVarInt(playerid, "EditingRXMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x+1, y, z);
		}
		if(GetPVarInt(playerid, "EditingRYMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x, y+1, z);
		}
		if(GetPVarInt(playerid, "EditingRZMode") == 1)
		{
			GetDynamicObjectRot(objectid, x, y, z);
			SetDynamicObjectRot(objectid, x, y, z+1);
		}
	}

	#if !defined AntiCheatUser
	if(!(vip[playerid] == 1 || pAdmin[playerid] > 0))
	{
		if(GetPlayerSpecialAction(playerid) == 2)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SendClientMessage(playerid, Vermelho, "JetPack proibido, não tente usar Cheat/Hack ou será banido(a).");
		}
		if(GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 39 || GetPlayerWeapon(playerid) == 40)
		{
			ResetPlayerWeapons(playerid);
			SendClientMessage(playerid, Vermelho, "Arma proibida, não tente usar Cheat/Hack ou será banido(a).");
		}
	}

	if(GetPlayerPing(playerid) >= 1500)
	{
		if(PingCfg == 1)
		{
			VBanID(-1, playerid, "Ping Alto, Max: 1500");
		}
		if(PingCfg == 2)
		{
			format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi kickado(a) por VCLBot. Motivo: Ping Alto, Max: 1500", PlayerName(playerid));
			SendClientMessageToAll(Amarelo, STRX);
			KickLog(STRX);
			Kick(playerid);
		}
	}
	#endif

	return 1;
}

stock LoadFilesIniItens()
{
	for(new stri[128], interior = 0; interior < MAX_INT; interior++)
	{
		if(proximoint != MAX_INT)
		{
			format(stri, sizeof(stri), PASTA_Int, interior);
			if(dini_Exists(stri))
			{
				proximoint++;
			}
		}
	}

	for(new strc[128], pickupid, iconid, c = 0; c < MAX_CASAS; c++)
	{
		if(proximacasa != MAX_CASAS)
		{
			format(strc, sizeof(strc), PASTA_CASAS, c);
			if(dini_Exists(strc))
			{
				if(dini_Int(strc, "TDono") == 0)
				{
					pickupid = CreateDynamicPickup(1273, 1, dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), -1, -1, -1, 200.0);
					dini_IntSet(strc, "Id", pickupid);
					iconid = CreateDynamicMapIcon(dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), 31, 0, -1, -1, -1, 100.0);
					dini_IntSet(strc, "IconId", iconid);
					format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Morador: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", c, dini_Get(strc, "Dono"), dini_Get(strc, "Morador"), dini_Int(strc, "Preco"));
					ctextoid[c] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
					dini_IntSet(strc, "Mundo", proximacasa);
					proximacasa++;
				}
				else
				{
					if(dini_Int(strc, "TDono") == 1)
					{
						pickupid = CreateDynamicPickup(1272, 1, dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), -1, -1, -1, 200.0);
						dini_IntSet(strc, "Id", pickupid);
						iconid = CreateDynamicMapIcon(dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), 32, 0, -1, -1, -1, 100.0);
						dini_IntSet(strc, "IconId", iconid);
						format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Morador: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", c, dini_Get(strc, "Dono"), dini_Get(strc, "Morador"), dini_Int(strc, "Preco"));
						ctextoid[c] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strc, "PosX"), dini_Float(strc, "PosY"), dini_Float(strc, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
						dini_IntSet(strc, "Mundo", proximacasa);
						proximacasa++;
					}
					else
					{
						dini_IntSet(strc, "TDono", 3);
						dini_Set(strc, "Dono", "Ninguem");
						dini_IntSet(strc, "Id", 999);
						dini_IntSet(strc, "IconId", 999);
						dini_IntSet(strc, "Mundo", proximacasa);
						proximacasa++;
					}
				}
			}
		}
	}

	for(new strp[128], pickupid, iconid, p = 0; p < MAX_PROPS; p++)
	{
		if(proximaprop != MAX_PROPS)
		{
			format(strp, sizeof(strp), PASTA_PROPS, p);
			if(dini_Exists(strp))
			{
				if(dini_Int(strp, "TDono") == 0)
				{
					pickupid = CreateDynamicPickup(1279, 1, dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), -1, -1, -1, 200.0);
					dini_IntSet(strp, "Id", pickupid);
					iconid = CreateDynamicMapIcon(dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), 11, 0, -1, -1, -1, 100.0);
					dini_IntSet(strp, "IconId", iconid);
					format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", dini_Get(strp, "Nome"), p, dini_Get(strp, "Dono"), dini_Int(strp, "Preco"));
					ptextoid[p] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
					dini_IntSet(strp, "Mundo", proximaprop);
					proximaprop++;
				}
				else
				{
					if(dini_Int(strp, "TDono") == 1)
					{
						pickupid = CreateDynamicPickup(1279, 1, dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), -1, -1, -1, 200.0);
						dini_IntSet(strp, "Id", pickupid);
						iconid = CreateDynamicMapIcon(dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), 51, 0, -1, -1, -1, 100.0);
						dini_IntSet(strp, "IconId", iconid);
						format(STRX, sizeof(STRX), "{FF0000}%s\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}%s\n{00FF00}Valor: {FF0000}$%d", dini_Get(strp, "Nome"), p, dini_Get(strp, "Dono"), dini_Int(strp, "Preco"));
						ptextoid[p] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strp, "PosX"), dini_Float(strp, "PosY"), dini_Float(strp, "PosZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
						dini_IntSet(strp, "Mundo", proximaprop);
						proximaprop++;
					}
					else
					{
						dini_IntSet(strp, "TDono", 3);
						dini_Set(strp, "Dono", "Ninguem");
						dini_IntSet(strp, "Id", 999);
						dini_IntSet(strp, "IconId", 999);
						dini_IntSet(strp, "Mundo", proximaprop);
						proximaprop++;
					}
				}
			}
		}
	}

	for(new strv[128], carro = 0; carro < MAX_CONCES; carro++)
	{
		if(proximocarro != MAX_CONCES)
		{
			format(strv, sizeof(strv), PASTA_CONCE, carro);
			if(dini_Exists(strv))
			{
				if(dini_Int(strv, "TDono") == 0)
				{
					CriarVeiculo3(carro, dini_Int(strv, "Modelo"), dini_Float(strv, "CordX"), dini_Float(strv, "CordY"), dini_Float(strv, "CordZ"), dini_Float(strv, "Angulo"), dini_Int(strv, "Cor1"), dini_Int(strv, "Cor2"));
					proximocarro++;
				}
				else
				{
					if(dini_Int(strv, "TDono") == 1)
					{
						CriarVeiculo3(carro, dini_Int(strv, "Modelo"), dini_Float(strv, "CordX"), dini_Float(strv, "CordY"), dini_Float(strv, "CordZ"), dini_Float(strv, "Angulo"), dini_Int(strv, "Cor1"), dini_Int(strv, "Cor2"));
						proximocarro++;
					}
					else
					{
						dini_IntSet(strv, "TDono", 3);
						dini_Set(strv, "Dono", "Ninguem");
						dini_IntSet(strv, "CarVIP", 0);
						dini_IntSet(strv, "Id", INVALID_VEHICLE_ID);
						proximocarro++;
					}
				}
			}
		}
	}

	for(new strpt[128], portaoid, portao = 0; portao < MAX_PORTOES; portao++)
	{
		if(proximoportao != MAX_PORTOES)
		{
			format(strpt, sizeof(strpt), PASTA_PORTOES, portao);
			if(dini_Exists(strpt))
			{
				if(dini_Int(strpt, "TDono") == 0)
				{
					portaoid = CreateDynamicObject(dini_Int(strpt, "Modelo"), dini_Float(strpt, "fCordX"), dini_Float(strpt, "fCordY"), dini_Float(strpt, "fCordZ"), dini_Float(strpt, "fCordRX"), dini_Float(strpt, "fCordRY"), dini_Float(strpt, "fCordRZ"), -1, -1, -1, 200.0);
					dini_IntSet(strpt, "Id", portaoid);
					format(STRX, sizeof(STRX), "{00FF00}/ap %d {FF0000}para abrir\n{00FF00}/fp %d {FF0000}para fechar", portao, portao);
					potextoid[portao] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strpt, "fCordX"), dini_Float(strpt, "fCordY"), dini_Float(strpt, "fCordZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
					proximoportao++;
				}
				else
				{
					if(dini_Int(strpt, "TDono") == 1)
					{
						portaoid = CreateDynamicObject(dini_Int(strpt, "Modelo"), dini_Float(strpt, "fCordX"), dini_Float(strpt, "fCordY"), dini_Float(strpt, "fCordZ"), dini_Float(strpt, "fCordRX"), dini_Float(strpt, "fCordRY"), dini_Float(strpt, "fCordRZ"), -1, -1, -1, 200.0);
						dini_IntSet(strpt, "Id", portaoid);
						format(STRX, sizeof(STRX), "{00FF00}/ap %d {FF0000}para abrir\n{00FF00}/fp %d {FF0000}para fechar", portao, portao);
						potextoid[portao] = CreateDynamic3DTextLabel(STRX, -1, dini_Float(strpt, "fCordX"), dini_Float(strpt, "fCordY"), dini_Float(strpt, "fCordZ"), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
						proximoportao++;
					}
					else
					{
						dini_IntSet(strpt, "TDono", 3);
						dini_Set(strpt, "Dono", "Ninguem");
						dini_IntSet(strpt, "Id", INVALID_OBJECT_ID);
						proximoportao++;
					}
				}
			}
		}
	}
	return 1;
}

stock UnloadFilesIniItens()
{
	for(new strc[128], c = 0; c < MAX_CASAS; c++)
	{
		format(strc, sizeof(strc), PASTA_CASAS, c);
		if(dini_Exists(strc))
		{
			if(dini_Int(strc, "TDono") == 0)
			{
				DestroyDynamicPickup(dini_Int(strc, "Id"));
				DestroyDynamicMapIcon(dini_Int(strc, "IconId"));
				DestroyDynamic3DTextLabel(ctextoid[c]);
				ctextoid[c] = Text3D:INVALID_3DTEXT_ID;
			}
			if(dini_Int(strc, "TDono") == 1)
			{
				DestroyDynamicPickup(dini_Int(strc, "Id"));
				DestroyDynamicMapIcon(dini_Int(strc, "IconId"));
				DestroyDynamic3DTextLabel(ctextoid[c]);
				ctextoid[c] = Text3D:INVALID_3DTEXT_ID;
			}
		}
	}
	proximacasa = 0;

	for(new strp[128], p = 0; p < MAX_PROPS; p++)
	{
		format(strp, sizeof(strp), PASTA_PROPS, p);
		if(dini_Exists(strp))
		{
			if(dini_Int(strp, "TDono") == 0)
			{
				DestroyDynamicPickup(dini_Int(strp, "Id"));
				DestroyDynamicMapIcon(dini_Int(strp, "IconId"));
				DestroyDynamic3DTextLabel(ptextoid[p]);
				ptextoid[p] = Text3D:INVALID_3DTEXT_ID;
			}
			if(dini_Int(strp, "TDono") == 1)
			{
				DestroyDynamicPickup(dini_Int(strp, "Id"));
				DestroyDynamicMapIcon(dini_Int(strp, "IconId"));
				DestroyDynamic3DTextLabel(ptextoid[p]);
				ptextoid[p] = Text3D:INVALID_3DTEXT_ID;
			}
		}
	}
	proximaprop = 0;

	for(new strv[128], carro = 0; carro < MAX_CONCES; carro++)
	{
		format(strv, sizeof(strv), PASTA_CONCE, carro);
		if(dini_Exists(strv))
		{
			if(!(dini_Int(strv, "TDono") == 3))
			{
				DestroyVehicle(dini_Int(strv, "Id"));
			}
		}
	}
	proximocarro = 0;

	for(new strpt[128], portao = 0; portao < MAX_PORTOES; portao++)
	{
		format(strpt, sizeof(strpt), PASTA_PORTOES, portao);
		if(dini_Exists(strpt))
		{
			if(!(dini_Int(strpt, "TDono") == 3))
			{
				DestroyDynamicObject(dini_Int(strpt, "Id"));
			}
		}
	}
	proximoportao = 0;
	return 1;
}

stock UpdatePlayerInfo(playerid)
{
	new fileinfo[128];

	format(fileinfo, sizeof(fileinfo), PASTA_CONTAS, PlayerName(playerid));
	if(dini_Exists(fileinfo))
	{
		PlayerInfo[playerid][_Faculdade] = dini_Int(fileinfo, "Faculdade");
		PlayerInfo[playerid][_Level] = dini_Int(fileinfo, "Level");
		PlayerInfo[playerid][_EXP] = dini_Int(fileinfo, "EXP");
		PlayerInfo[playerid][_SaldoBancario] = dini_Int(fileinfo, "SaldoBancario");
		PlayerInfo[playerid][_Profissao] = dini_Int(fileinfo, "Profissao");
		format(PlayerInfo[playerid][_CasouCom], sizeof(fileinfo), "%s", dini_Get(fileinfo, "CasouCom"));
		PlayerInfo[playerid][_CartaoTelefonico] = dini_Int(fileinfo, "CartaoTelefonico");
		PlayerInfo[playerid][_Celular] = dini_Int(fileinfo, "Celular");
		PlayerInfo[playerid][_MP3] = dini_Int(fileinfo, "MP3");
		PlayerInfo[playerid][_Skin] = dini_Int(fileinfo, "Skin");
		PlayerInfo[playerid][_LaserP] = dini_Int(fileinfo, "LaserP");
		PlayerInfo[playerid][_TCapacete] = dini_Int(fileinfo, "TCapacete");
		PlayerInfo[playerid][_AntiHS] = dini_Int(fileinfo, "AntiHS");
		PlayerInfo[playerid][_Porte] = dini_Int(fileinfo, "Porte");
		PlayerInfo[playerid][_HabTerrestre] = dini_Int(fileinfo, "HabTerrestre");
		PlayerInfo[playerid][_HabNautica] = dini_Int(fileinfo, "HabNautica");
		PlayerInfo[playerid][_HabAerea] = dini_Int(fileinfo, "HabAerea");
	}
	return 1;
}

stock DesbugPlayer(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		RemovePlayerFromVehicle(playerid);
		jasequestro[playerid] = 0;
		order[playerid] = 0;
		Mute[playerid] = 0;
		nautlls[playerid] = 0;
		nautllv[playerid] = 0;
		nobarlv[playerid] = 0;
		nobarls[playerid] = 0;
		nobarsf[playerid] = 0;
		nobarfc[playerid] = 0;
		preso[playerid] = 0;
		algemado[playerid] = 0;
		sequestro[playerid] = 0;
		gmod[playerid] = 0;
		amod[playerid] = 0;
		autoescola[playerid] = 0;
		Preso[playerid] = 0;
		noevento[playerid] = 0;
		ExpulsoEvento[playerid] = 0;
		nogame[playerid] = 0;
		nobomber[playerid] = 0;
		prefsf[playerid] = 0;
		preflv[playerid] = 0;
		xprefls[playerid] = 0;
		nobanco[playerid] = 0;
		NaFaculdade[playerid] = 0;
		cCarro[playerid] = -1;
		casar[playerid] = 0;
		pedidode[playerid] = INVALID_PLAYER_ID;
		SetTimerEx("AutoSpawn", 3000, false, "e", playerid);
	}
	else
	{
		jasequestro[playerid] = 0;
		order[playerid] = 0;
		Mute[playerid] = 0;
		nautlls[playerid] = 0;
		nautllv[playerid] = 0;
		nobarlv[playerid] = 0;
		nobarls[playerid] = 0;
		nobarsf[playerid] = 0;
		nobarfc[playerid] = 0;
		preso[playerid] = 0;
		algemado[playerid] = 0;
		sequestro[playerid] = 0;
		gmod[playerid] = 0;
		amod[playerid] = 0;
		autoescola[playerid] = 0;
		Preso[playerid] = 0;
		noevento[playerid] = 0;
		ExpulsoEvento[playerid] = 0;
		nogame[playerid] = 0;
		nobomber[playerid] = 0;
		prefsf[playerid] = 0;
		preflv[playerid] = 0;
		xprefls[playerid] = 0;
		nobanco[playerid] = 0;
		NaFaculdade[playerid] = 0;
		cCarro[playerid] = -1;
		casar[playerid] = 0;
		pedidode[playerid] = INVALID_PLAYER_ID;
		SpawnPlayer(playerid);
	}
	return 0;
}

stock GivePlayerGrana(playerid, ammount)
{
	new ammgive[128];
	GivePlayerMoney(playerid, dini_Int(ammgive, "Dinheiro")+ammount);
	format(ammgive, sizeof(ammgive), PASTA_CONTAS, PlayerName(playerid));
	return dini_IntSet(ammgive, "Dinheiro", dini_Int(ammgive, "Dinheiro")+ammount);
}

stock GetPlayerGrana(playerid)
{
	new ammget[128];
	format(ammget, sizeof(ammget), PASTA_CONTAS, PlayerName(playerid));
	return dini_Int(ammget, "Dinheiro");
}

stock ResetPlayerGrana(playerid)
{
	new ammreset[128];
	ResetPlayerMoney(playerid);
	format(ammreset, sizeof(ammreset), PASTA_CONTAS, PlayerName(playerid));
	return dini_IntSet(ammreset, "Dinheiro", 0);
}

stock IsVehicleOccupied(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(GetPlayerVehicleID(i) == vehicleid)
				{
					return 1;
				}
			}
		}
	}
	return 0;
}

// Evento - INÍCIO -
stock PlayerCreateEvent(playerid, vagas, nome[], Float:eX, Float:eY, Float:eZ, eI)
{
	if(EventoCriado == 1)
	{
		SendClientMessage(playerid, Vermelho, "Um evento já foi criado, espere terminar para criar outro.");
		return 1;
	}
	if(Proibido == 1)
	{
		Proibido = 0;
	}
	EventoTextDraw = 1;
	EventoCriado = 1;
	VagasNoEvento = vagas;

	eventoX = eX,
	eventoY = eY,
	eventoZ = eZ,
	interiore = eI;

	guerra = GangZoneCreate(eX-100, eY-100, eX+100, eY+100);
	GangZoneShowForAll(guerra, Branco);

	#if defined EventTextUser
	TextDrawShowForAll(Stakline);
	#endif

	Staktimer = SetTimerEx("Nupdate", 900, 1, "e", playerid);
	GameTextForAll("~y~Evento ~g~Criado ~y~Use ~b~/irevento", 6000, 1);

	format(STRX, sizeof(STRX), "%s criou um evento com %d vaga(s) (») Nome: %s (») Digite: (/irevento)", PlayerName(playerid), vagas, nome);
	SendClientMessageToAll(Amarelo, STRX);

	SendClientMessage(playerid, 0x008000AA, "Evento criado com sucesso use: /comecarevento quando você for inicia-lo.");
	SendClientMessage(playerid, 0x008000AA, "Caso você queira cancela-lo use: /cancelarevento");
	return 1;
}

stock PlayerCancelEvent(playerid)
{
	if(EventoCriado == 0)
	{
		SendClientMessage(playerid, Vermelho, "Não tem nenhum evento para cancelar.");
		return 1;
	}
	if(Proibido == 0)
	{
		Proibido = 1;
	}
	EventoCriado = 0;
	VagasNoEvento = 0;
	PlayersNoEvento = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			noevento[i] = 0;
			ExpulsoEvento[i] = 0;
		}
	}

	if(EventoTextDraw == 1)
	{
		KillTimer(Staktimer);

		#if defined EventTextUser
		TextDrawHideForAll(Stakline);
		#endif

		EventoTextDraw = 0;
	}

	GangZoneHideForAll(guerra);
	GangZoneDestroy(guerra);

	GameTextForAll("~y~Evento ~r~Cancelado", 6000, 1);
	format(STRX, sizeof(STRX), "O(A) ADM %s cancelou o evento.", PlayerName(playerid));
	SendClientMessageToAll(0xFFFF00AA, STRX);
	return 1;
}

stock PlayerCloseEvent(playerid)
{
	if(EventoCriado == 0)
	{
		SendClientMessage(playerid, Vermelho, "Não tem nenhum evento para fechar.");
		return 1;
	}
	if(Proibido == 0)
	{
		Proibido = 1;
	}
	EventoCriado = 0;
	VagasNoEvento = 0;
	PlayersNoEvento = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			noevento[i] = 0;
			ExpulsoEvento[i] = 0;
		}
	}

	if(EventoTextDraw == 1)
	{
		KillTimer(Staktimer);

		#if defined EventTextUser
		TextDrawHideForAll(Stakline);
		#endif

		EventoTextDraw = 0;
	}

	GangZoneHideForAll(guerra);
	GangZoneDestroy(guerra);

	GameTextForAll("~y~Evento ~r~Fechado", 6000, 1);
	format(STRX, sizeof(STRX), "O(A) ADM %s fechou o evento.", PlayerName(playerid));
	SendClientMessageToAll(tcadm, STRX);
	return 1;
}

stock PlayerExpulsePlayerEvent(playerid, plid, motivo[])
{
	if(Proibido == 1)
	{
		SendClientMessage(playerid, Vermelho, "Evento cancelado ou já começou.");
		return 1;
	}
	if(!IsPlayerConnected(plid))
	{
		SendClientMessage(playerid, Vermelho, "Jogador não conectado.");
		return 1;
	}
	if(noevento[plid] == 1)
	{
		ExpulsoEvento[plid] = 1;
		noevento[plid] = 0;
		SpawnPlayer(plid);
		format(STRX, sizeof(STRX), "O(A) jogador(a) %s foi espulso do evento. Motivo: %s", PlayerName(plid), motivo);
		SendClientMessageToAll(Amarelo, STRX);
	}
	else
	{
		format(STRX, sizeof(STRX), "%s não está em um evento.", PlayerName(plid));
		SendClientMessage(playerid, Vermelho, STRX);
	}
	return 1;
}

stock PlayerInitEvent(playerid)
{
	if(EventoCriado == 0)
	{
		SendClientMessage(playerid, Vermelho, "Não tem nenhum evento para começa-lo.");
		return 1;
	}
	if(Proibido == 0)
	{
		Proibido = 1;
	}
	if(EventoTextDraw == 1)
	{
		KillTimer(Staktimer);

		#if defined EventTextUser
		TextDrawHideForAll(Stakline);
		#endif

		EventoTextDraw = 0;
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(noevento[i] == 1)
			{
				CreatePlayerCountdown(i, 5, 1);
				if(IsPlayerInAnyVehicle(i))
				{
					SetTimerEx("DestogglePlayerControllable", 5000, 0, "d", i);
				}
			}
		}
	}

	GameTextForAll("~y~Evento ~b~Iniciado", 6000, 1);
	format(STRX, sizeof(STRX), "O(A) ADM %s começou o evento.", PlayerName(playerid));
	SendClientMessageToAll(tcadm, STRX);

	SendClientMessage(playerid, 0x008000AA, "O evento começou, quando terminar use: /fecharevento");
	return 1;
}

stock SetPlayerEventPos(playerid)
{
	if(ExpulsoEvento[playerid] == 1)
	{
		SendClientMessage(playerid, Vermelho, "Você foi expulso do evento.");
		return 1;
	}
	if(noevento[playerid] == 1)
	{
		SendClientMessage(playerid, Vermelho, "Você já está no evento.");
		return 1;
	}
	if(Proibido == 1)
	{
		SendClientMessage(playerid, Vermelho, "Evento cancelado ou já começou.");
		return 1;
	}
	if(EventoCriado == 1)
	{
		if(PlayersNoEvento == VagasNoEvento)
		{
			SendClientMessage(playerid, Amarelo, "Acabaram-se as vagas no evento, tente no próximo.");
		}
		else
		{
			PlayersNoEvento++;
			noevento[playerid] = 1;
			SetPlayerInterior(playerid, interiore);
			SetPlayerPos(playerid, eventoX, eventoY, eventoZ);

			TogglePlayerControllable(playerid, false);
			SetTimerEx("DestogglePlayerControllable", 1000, 0, "d", playerid);

			format(STRX, sizeof(STRX), "%s foi para o evento (») Quer ir? Use: /irevento (») Vagas: %d/%d", PlayerName(playerid), PlayersNoEvento, VagasNoEvento);
			SendClientMessageToAll(Vermelho, STRX);
		}
	}
	return 1;
}
// Evento - FIM -

stock ChatProximo(playerid, text[])
{
	new Float:chatx, Float:chaty, Float:chatz;
	GetPlayerPos(playerid, chatx, chaty, chatz);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInRangeOfPoint(i, 50.0, chatx, chaty, chatz))
			{
				format(STRX, sizeof(STRX), "[ID: %d] (») Chat Próximo (») %s", playerid, text);
				SendPlayerMessageToPlayer(i, playerid, STRX);
			}
		}
	}
	return 1;
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new i = 0;
	new ip_count = 0;
	for(i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerIp(i, against_ip, 32);
			if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

stock aKick(playerid, pname[])
{
	new szIP[16];
	bIllegalPlayer[playerid] = true;

	#if _CHANGE_NAME_BEFORE_KICK
	SetPlayerName(playerid, szTmpKickName);
	#endif

	GetPlayerIp(playerid, szIP, 16);

	SendClientMessage(playerid, BLUEWHITE, "~~ ~~ ~~ ~~ ~~~~ ~~ ~~ ~~ ~~~~ ~~ ~~ ~~ ~~~~ ~~ ~~");
	SendClientMessage(playerid, Vermelho, " Este tipo de nick não está mais sendo permitido no servidor.");
	SendClientMessage(playerid, Amarelo, " Use um nick no formato \"Nome_Sobrenome\" para se registrar/logar.");
	SendClientMessage(playerid, BLUEWHITE, "~~ ~~ ~~ ~~ ~~~~ ~~ ~~ ~~ ~~~~ ~~ ~~ ~~ ~~~~ ~~ ~~");

	print("\n================================================");
	printf("[protetor] %s kickado por usar um nick proibido.", pname);
	printf("ID: %d | IP: %s", playerid, szIP);
	print("================================================\n");

	Kick(playerid);
	return 0;
}

stock ResetVarsEditPortao(playerid)
{
	DeletePVar(playerid, "EditingXMode");
    DeletePVar(playerid, "EditingYMode");
    DeletePVar(playerid, "EditingZMode");
    DeletePVar(playerid, "EditingRXMode");
    DeletePVar(playerid, "EditingRYMode");
    DeletePVar(playerid, "EditingRZMode");
    DeletePVar(playerid, "objToEdit");
	DeletePVar(playerid, "pidToEdit");
	DeletePVar(playerid, "pidSalvo");
	return 0;
}

stock CreateFileAccount(newfile[], passx[])
{
	dini_Create(newfile);
	dini_Set(newfile, "Senha", passx);
	dini_IntSet(newfile, "Skin", 0);
	dini_IntSet(newfile, "Profissao", 0);
	dini_IntSet(newfile, "ContaBancaria", 0);
	dini_IntSet(newfile, "SaldoBancario", 0);
	dini_IntSet(newfile, "Dinheiro", 78000);
	dini_IntSet(newfile, "Combustivel", 200);
	dini_IntSet(newfile, "Celular", 0);
	dini_IntSet(newfile, "CartaoTelefonico", 0);
	dini_IntSet(newfile, "MP3", 0);
	dini_IntSet(newfile, "LaserP", 0);
	dini_IntSet(newfile, "TCapacete", 0);
	dini_IntSet(newfile, "AntiHS", 0);
	dini_IntSet(newfile, "Sexo", 0);
	dini_IntSet(newfile, "HabTerrestre", 0);
	dini_IntSet(newfile, "HabAerea", 0);
	dini_IntSet(newfile, "HabNautica", 0);
	dini_IntSet(newfile, "Matou", 0);
	dini_IntSet(newfile, "Morreu", 0);
	dini_IntSet(newfile, "Preso", 0);
	dini_IntSet(newfile, "Bloco", 0);
	dini_IntSet(newfile, "Casa", 0);
	dini_IntSet(newfile, "Prop", 0);
	dini_IntSet(newfile, "Carta", 0);
	dini_Set(newfile, "Lembrete", "Nada");
	dini_IntSet(newfile, "Casado", 0);
	dini_Set(newfile, "CasouCom", "Ninguem");
	dini_IntSet(newfile, "Level", 0);
	dini_IntSet(newfile, "Continuar", 0);
	dini_IntSet(newfile, "novato", 1);
	dini_IntSet(newfile, "Porte", 0);
	dini_IntSet(newfile, "Carteira", 0);
	dini_IntSet(newfile, "Level", 50);
	dini_IntSet(newfile, "Faculdade", 50);
	dini_IntSet(newfile, "UsouConce", 0);
	dini_IntSet(newfile, "VIP", 0);
	dini_IntSet(newfile, "aAdmin", 0);
	dini_IntSet(newfile, "Admin", 0);
	return 0;
}

stock RenameFileAccount(oldfile[], newfile[])
{
	new mnsenha[256];
	new mnskin;
	new mnprocurado;
	new mnlutas;
	new mnpreso;
	new mnentrevista;
	new mnsaldobancario;
	new mndinheiro;
	new mncombustivel;
	new mnprof;
	new mncel;
	new mnbloco;
	new mnlevel;
	new mntempo;
	new mnexp;
	new mnmp3;
	new mnlaser;
	new mncapacete;
	new mnantihs;
	new mnsexo;
	new mnporte;
	new mncarteira;
	new mnhabt;
	new mnhabn;
	new mnhaba;
	new mncontabancaria;
	new mndm;
	new mnmatou;
	new mnmorreu;
	new mncasa;
	new Float:mncasax;
	new Float:mncasay;
	new Float:mncasaz;
	new mnprop;
	new Float:mnpropx;
	new Float:mnpropy;
	new Float:mnpropz;
	new mnlembrete[256];
	new mncasado;
	new mncasoucom[256];
	new mnfacul;
	new mnroubobanco;
	new mnhotel;
	new mnluta;
	new mnusouconce;
	new mnvip;
	new mnaadmin;
	new mnadmin;

	// Pegar dados
	mnsenha = dini_Get(oldfile, "Senha");
	mnskin = dini_Int(oldfile, "Skin");
	mnprocurado = dini_Int(oldfile, "Procurado");
	mnlutas = dini_Int(oldfile, "Lutas");
	mnpreso = dini_Int(oldfile, "Preso");
	mnentrevista = dini_Int(oldfile, "Entrevista");
	mnsaldobancario = dini_Int(oldfile, "SaldoBancario");
	mndinheiro = dini_Int(oldfile, "Dinheiro");
	mncombustivel = dini_Int(oldfile, "Combustivel");
	mnprof = dini_Int(oldfile, "Profissao");
	mncel = dini_Int(oldfile, "Celular");
	mnbloco = dini_Int(oldfile, "Bloco");
	mnlevel = dini_Int(oldfile, "Level");
	mntempo = dini_Int(oldfile, "Tempo");
	mnexp = dini_Int(oldfile, "EXP");
	mnmp3 = dini_Int(oldfile, "MP3");
	mnlaser = dini_Int(oldfile, "LaserP");
	mncapacete = dini_Int(oldfile, "TCapacete");
	mnantihs = dini_Int(oldfile, "AntiHS");
	mnsexo = dini_Int(oldfile, "Sexo");
	mnporte = dini_Int(oldfile, "Porte");
	mncarteira = dini_Int(oldfile, "Carteira");
	mnhabt = dini_Int(oldfile, "HabTerrestre");
	mnhabn = dini_Int(oldfile, "HabNautica");
	mnhaba = dini_Int(oldfile, "HabAerea");
	mncontabancaria = dini_Int(oldfile, "ContaBancaria");
	mndm = dini_Int(oldfile, "DM");
	mnmatou = dini_Int(oldfile, "Matou");
	mnmorreu = dini_Int(oldfile, "Morreu");
	mncasa = dini_Int(oldfile, "Casa");
	mncasax = dini_Float(oldfile, "CasaX");
	mncasay = dini_Float(oldfile, "CasaY");
	mncasaz = dini_Float(oldfile, "CasaZ");
	mnprop = dini_Int(oldfile, "Prop");
	mnpropx = dini_Float(oldfile, "PropX");
	mnpropy = dini_Float(oldfile, "PropY");
	mnpropz = dini_Float(oldfile, "PropZ");
	mnlembrete = dini_Get(oldfile, "Lembrete");
	mncasado = dini_Int(oldfile, "Casado");
	mncasoucom = dini_Get(oldfile, "CasouCom");
	mnfacul = dini_Int(oldfile, "Faculdade");
	mnroubobanco = dini_Int(oldfile, "rouboubanco");
	mnhotel = dini_Int(oldfile, "Hotel");
	mnluta = dini_Int(oldfile, "Luta");
	mnusouconce = dini_Int(oldfile, "UsouConce");
	mnvip = dini_Int(oldfile, "VIP");
	mnaadmin = dini_Int(oldfile, "aAdmin");
	mnadmin = dini_Int(oldfile, "Admin");

	// Apagar conta antiga
	dini_Remove(oldfile);

	// Criar nova conta
	dini_Create(newfile);
	dini_Set(newfile, "Senha", mnsenha);
	dini_IntSet(newfile, "Skin", mnskin);
	dini_IntSet(newfile, "Procurado", mnprocurado);
	dini_IntSet(newfile, "Lutas", mnlutas);
	dini_IntSet(newfile, "Preso", mnpreso);
	dini_IntSet(newfile, "Entrevista", mnentrevista);
	dini_IntSet(newfile, "SaldoBancario", mnsaldobancario);
	dini_IntSet(newfile, "Dinheiro", mndinheiro);
	dini_IntSet(newfile, "Combustivel", mncombustivel);
	dini_IntSet(newfile, "Profissao", mnprof);
	dini_IntSet(newfile, "Celular", mncel);
	dini_IntSet(newfile, "Bloco", mnbloco);
	dini_IntSet(newfile, "Level", mnlevel);
	dini_IntSet(newfile, "Tempo", mntempo);
	dini_IntSet(newfile, "EXP", mnexp);
	dini_IntSet(newfile, "MP3", mnmp3);
	dini_IntSet(newfile, "LaserP", mnlaser);
	dini_IntSet(newfile, "TCapacete", mncapacete);
	dini_IntSet(newfile, "AntiHS", mnantihs);
	dini_IntSet(newfile, "Sexo", mnsexo);
	dini_IntSet(newfile, "Porte", mnporte);
	dini_IntSet(newfile, "Carteira", mncarteira);
	dini_IntSet(newfile, "HabTerrestre", mnhabt);
	dini_IntSet(newfile, "HabNautica", mnhabn);
	dini_IntSet(newfile, "HabAerea", mnhaba);
	dini_IntSet(newfile, "ContaBancaria", mncontabancaria);
	dini_IntSet(newfile, "DM", mndm);
	dini_IntSet(newfile, "Matou", mnmatou);
	dini_IntSet(newfile, "Morreu", mnmorreu);
	dini_IntSet(newfile, "Casa", mncasa);
	dini_FloatSet(newfile, "CasaX", mncasax);
	dini_FloatSet(newfile, "CasaY", mncasay);
	dini_FloatSet(newfile, "CasaZ", mncasaz);
	dini_IntSet(newfile, "Prop", mnprop);
	dini_FloatSet(newfile, "PropX", mnpropx);
	dini_FloatSet(newfile, "PropY", mnpropy);
	dini_FloatSet(newfile, "PropZ", mnpropz);
	dini_Set(newfile, "Lembrete", mnlembrete);
	dini_IntSet(newfile, "Casado", mncasado);
	dini_Set(newfile, "CasouCom", mncasoucom);
	dini_IntSet(newfile, "Faculdade", mnfacul);
	dini_IntSet(newfile, "rouboubanco", mnroubobanco);
	dini_IntSet(newfile, "Hotel", mnhotel);
	dini_IntSet(newfile, "Luta", mnluta);
	dini_IntSet(newfile, "MN", 0);
	dini_IntSet(newfile, "UsouConce", mnusouconce);
	dini_IntSet(newfile, "VIP", mnvip);
	dini_IntSet(newfile, "aAdmin", mnaadmin);
	dini_IntSet(newfile, "Admin", mnadmin);
	return 0;
}

#if defined AudioStreamUser
stock LoadAudioStream()
{
	new cmrfcrccrtkmgxp = PlayerAddCategory("Trance");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Discover Trance Radio", "http://london02.discovertrance.com:80");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - Trance", "http://u11aw.di.fm:80/di_trance");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Trance.FM", "http://nl-sc.trance.fm:8080");
	AddStreamToCategory(cmrfcrccrtkmgxp, "TranceRadio.CH", "http://server8.digital-webstream.de:10780");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Afterhours FM", "http://nl2.ah.fm:9000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Club Lounge Radio - Trance td", "http://Club-Lounge-Radio.com:8888");
	AddStreamToCategory(cmrfcrccrtkmgxp, "1Mix Radio", "http://marc.1mix.co.uk:8000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "1.FM Radio - Trance", "http://64.71.145.130:8040");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - Vocal Trance", "http://205.188.215.230:8004");
	AddStreamToCategory(cmrfcrccrtkmgxp, "NERadio International", "http://87.98.182.201:80");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Chromanova.FM", "http://85.25.86.69:8000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Bassfabrik", "http://178.63.65.7:8005");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - DJ Mixes", "http://209.247.146.100:8000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - Progressive", "http://scfire-dtc-aa04.stream.aol.com:80/stream/1026");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Afterhours FM - DJS", "http://205.188.215.229:8020");
	AddStreamToCategory(cmrfcrccrtkmgxp, "NERadio Sweden", "http://94.23.27.140");
	AddStreamToCategory(cmrfcrccrtkmgxp, "p s y r a d i o FM", "http://81.88.37.2:8010");
	AddStreamToCategory(cmrfcrccrtkmgxp, "PulsRadio Version Trance", "http://91.121.1.154:9000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - Classic Trance", "http://67.21.210.110:8000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "SomaFM - Tag's Trip", "http://205.188.215.230:8012");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Mika FM", "http://stream1-1.mika.fm:80");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Digitally Imported - Breaks", "http://205.188.215.225:8002");
	AddStreamToCategory(cmrfcrccrtkmgxp, "PSYCHEDELIK", "http://88.191.102.69:8010");
	AddStreamToCategory(cmrfcrccrtkmgxp, "PSYCHEDELIK - Trance Flux", "http://88.191.102.69:8000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "1Club.FM - Trance", "http://208.77.21.19:80/trance");
	AddStreamToCategory(cmrfcrccrtkmgxp, "TranceSection.FM", "http://212.95.42.87:88");
	AddStreamToCategory(cmrfcrccrtkmgxp, "1Club.FM - 24/7 Trance Mixes", "http://208.77.21.19:80/trancemixes");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Shathor", "http://212.62.227.4:8500");
	AddStreamToCategory(cmrfcrccrtkmgxp, "DJTiestoStream.NL", "http://213.148.243.128:8020");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Trancemission.FM", "http://87.230.21.161:9000");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Dance Radio Global - Trance", "http://75.126.73.136:8090");
	AddStreamToCategory(cmrfcrccrtkmgxp, "ETN fm - Trance", "http://toronto.etn.fm:8130");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Trance Elements", "http://tranceelements.com:9990");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Techno FM - Trance", "http://69.174.241.145/trance.mp3");
	AddStreamToCategory(cmrfcrccrtkmgxp, "Radio Seven", "http://sc5.radioseven.se:8002");
	new sverbpvwntsampc = PlayerAddCategory("Local");
	AddStreamToCategory(sverbpvwntsampc, "Cool FM 97.4 FM", "http://icy-e-01.sharp-stream.com:80/coolfm.mp3");
	AddStreamToCategory(sverbpvwntsampc, "Citybeat 96.7 FM", "http://213.229.90.229:8600");
	AddStreamToCategory(sverbpvwntsampc, "IUR FM", "http://iurfm.internet-radio.org.uk:11832");
	AddStreamToCategory(sverbpvwntsampc, "U105.8FM", "http://stream1.radiomonitor.com/U105");
	AddStreamToCategory(sverbpvwntsampc, "Carrickfergus 106.7 FM", "http://lush.wavestreamer.com:5055");
	AddStreamToCategory(sverbpvwntsampc, "Blast 106.4 FM", "http://origin01.proradiostreaming.com:8018");
	new oowzorafhvvchyb = PlayerAddCategory("Holidays");
	AddStreamToCategory(oowzorafhvvchyb, "Christmas Classics - Word Of Truth Radio", "http://208.53.138.118:8090");
	AddStreamToCategory(oowzorafhvvchyb, "Christmas Radio Network", "http://216.59.35.37:8100");
	new pxnajerjsboexjm = PlayerAddCategory("Country");
	AddStreamToCategory(pxnajerjsboexjm, "181.Fm - Kickin Country - Today's Best Country!", "http://scfire-ntc-aa08.stream.aol.com:80/stream/1075");
	AddStreamToCategory(pxnajerjsboexjm, "DRS 2006 - Country Radio Switzerland", "http://rs3.radiostreamer.com:9330");
	AddStreamToCategory(pxnajerjsboexjm, "CMR Nashville", "http://91.121.122.94:8013");
	AddStreamToCategory(pxnajerjsboexjm, "The World Net Radio - Country Oldies", "http://theworldnetradio.com:8024");
	AddStreamToCategory(pxnajerjsboexjm, "181.Fm - Highway 181 (Classic Country)", "http://uplink.duplexfx.com:8018");
	AddStreamToCategory(pxnajerjsboexjm, "Country 108 - Your Country Music Station - 247", "http://tuner.country108.com");
	AddStreamToCategory(pxnajerjsboexjm, "1.FM - Country", "http://72.13.81.178:8020");
	AddStreamToCategory(pxnajerjsboexjm, "WKRK Radio", "http://shoutatme.com:7034");
	AddStreamToCategory(pxnajerjsboexjm, "1.FM - Absolutely Country Hits", "http://72.13.81.178:7800");
	AddStreamToCategory(pxnajerjsboexjm, "Nashville Classics", "http://ophanim.net:7100");
	AddStreamToCategory(pxnajerjsboexjm, "HPR1 - Classic Country", "http://130.166.82.14:8006");
	AddStreamToCategory(pxnajerjsboexjm, "Active Radio US", "http://s5.voscast.com:7264");
	AddStreamToCategory(pxnajerjsboexjm, "Boot Liquor", "http://207.200.96.230:8014");
	AddStreamToCategory(pxnajerjsboexjm, "Nashville FM", "http://server-14.stream-server.nl:8300");
	AddStreamToCategory(pxnajerjsboexjm, "UK Country Radio", "http://87.117.250.3:9078");
	AddStreamToCategory(pxnajerjsboexjm, "Super Country", "http://s5.viastreaming.net:7690");
	AddStreamToCategory(pxnajerjsboexjm, "Country Music24", "http://212.48.110.70:9000");
	AddStreamToCategory(pxnajerjsboexjm, "The World Net Radio - Country", "http://theworldnetradio.com:8720");
	AddStreamToCategory(pxnajerjsboexjm, "Steel Radio", "http://steelradio.serverroom.us:8300");
	AddStreamToCategory(pxnajerjsboexjm, "Trucknet Radio", "http://212.105.73.74:8001");
	AddStreamToCategory(pxnajerjsboexjm, "Lonestar 101 - Texas Country", "http://70.84.35.211:8000");
	AddStreamToCategory(pxnajerjsboexjm, "The New Highway - 40 Country", "http://64.64.3.161:8000");
	AddStreamToCategory(pxnajerjsboexjm, "Radioio - Classic Country", "http://76.76.18.109:8666");
	AddStreamToCategory(pxnajerjsboexjm, "Country Crossroads Radio", "http://67.205.85.183:7710");
	AddStreamToCategory(pxnajerjsboexjm, "Radio Country Club", "http://91.197.164.12:8130");
	AddStreamToCategory(pxnajerjsboexjm, "KLMR AM Classic Country", "http://69.145.25.169:8000");
	AddStreamToCategory(pxnajerjsboexjm, "1.FM - Absolute Country Hits", "http://72.13.81.5:5010");
	AddStreamToCategory(pxnajerjsboexjm, "The Country Top 30", "http://clubhost.ca:8030");
	new aaagvxyxmdagsdo = PlayerAddCategory("Hardstyle");
	AddStreamToCategory(aaagvxyxmdagsdo, "Hard.FM - The #1 Hardstyle Radio", "http://192.mp3.streams.lsw.evo.hard.fm:8000");
	AddStreamToCategory(aaagvxyxmdagsdo, "Digitally Imported - Hardstyle", "http://u11aw.di.fm:80/di_hardstyle");
	AddStreamToCategory(aaagvxyxmdagsdo, "Q-Dance", "http://stream01.platform02.true.nl:8000/qdance-hard");
	AddStreamToCategory(aaagvxyxmdagsdo, "Hardsection FM", "http://89.31.134.100:82");
	AddStreamToCategory(aaagvxyxmdagsdo, "Hardbase FM", "http://mp3.hb-stream.net");
	AddStreamToCategory(aaagvxyxmdagsdo, "Clubsoundz FM", "http://87.118.112.38:8000");
	new wnzzzkedevrmtvm = PlayerAddCategory("Dubstep");
	AddStreamToCategory(wnzzzkedevrmtvm, "Dubstep FM", "http://72.233.84.175:80");
	AddStreamToCategory(wnzzzkedevrmtvm, "Sensimedia - Strictly Dubstep & Bass", "http://sensimedia.net:9002");
	AddStreamToCategory(wnzzzkedevrmtvm, "Filth FM", "http://75.125.130.122:8062");
	AddStreamToCategory(wnzzzkedevrmtvm, "DubstepLive Radio (DNBTV)", "http://173.236.56.82:8004");
	AddStreamToCategory(wnzzzkedevrmtvm, "Shakedown FM", "http://cp.internet-radio.org.uk:15580");
	AddStreamToCategory(wnzzzkedevrmtvm, "Digitally Imported - Dubstep", "http://67.21.210.110:8002");
	AddStreamToCategory(wnzzzkedevrmtvm, "Rough Tempo", "http://217.112.93.51:8200");
	new obfwsstwzfbbjnb = PlayerAddCategory("Dance");
	AddStreamToCategory(obfwsstwzfbbjnb, "Gaydar Radio", "http://mp31.gaydarradio.com/gaydarradio_high_1");
	AddStreamToCategory(obfwsstwzfbbjnb, "MaxDance - Trance/Dance", "http://cp.internet-radio.org.uk:15114");
	AddStreamToCategory(obfwsstwzfbbjnb, "Energy FM", "http://204.45.8.170:8051");
	AddStreamToCategory(obfwsstwzfbbjnb, "Digitally Imported - Hard Dance", "http://209.247.146.98:8000");
	AddStreamToCategory(obfwsstwzfbbjnb, "Digitally Imported - Eurodance", "http://scfire-ntc-aa02.stream.aol.com:80/stream/1024");
	AddStreamToCategory(obfwsstwzfbbjnb, "Soundic Radio", "http://193.10.239.174");
	AddStreamToCategory(obfwsstwzfbbjnb, "NonStopPlay - Dance Radio", "http://highdedi.nonstopplay.co.uk:80");
	AddStreamToCategory(obfwsstwzfbbjnb, "Gay FM", "http://www.alcelec.lu");
	new apmvrwycjfwhwjv = PlayerAddCategory("Metal");
	AddStreamToCategory(apmvrwycjfwhwjv, "Rockradio1.Com - Classic Hard Rock & Heavy Metal", "http://91.121.203.207:8000");
	AddStreamToCategory(apmvrwycjfwhwjv, "SnakeNet Metal Radio", "http://205.188.215.231:8016");
	AddStreamToCategory(apmvrwycjfwhwjv, "1.FM - High Voltage", "http://sc8.1.fm:8035");
	AddStreamToCategory(apmvrwycjfwhwjv, "Netrock101", "http://76.73.107.66:8418");
	AddStreamToCategory(apmvrwycjfwhwjv, "ChroniX Metal", "http://205.188.215.225:8022");
	AddStreamToCategory(apmvrwycjfwhwjv, "Death FM", "http://209.9.229.211:80");
	AddStreamToCategory(apmvrwycjfwhwjv, "Hard Rock Radio Live", "http://66.90.103.189:8868");
	AddStreamToCategory(apmvrwycjfwhwjv, "Braingell", "http://76.73.21.74:8102");
	AddStreamToCategory(apmvrwycjfwhwjv, "Metal Tome", "http://metaltome.com:7900");
	new esydmygyznroyxf = PlayerAddCategory("House");
	AddStreamToCategory(esydmygyznroyxf, "House Radio", "http://78.129.250.9:8052");
	AddStreamToCategory(esydmygyznroyxf, "SSRadio", "http://server2.myshoutcast.de:9044");
	AddStreamToCategory(esydmygyznroyxf, "Dance Radio Global - Progressive House", "http://75.126.73.136:8080");
	AddStreamToCategory(esydmygyznroyxf, "ETN fm - House", "http://toronto.etn.fm:8230");
	new pwzbbgxjdvjdowx = PlayerAddCategory("Chillout");
	AddStreamToCategory(pwzbbgxjdvjdowx, "Digitally Imported - Chillout Dreams", "http://195.43.138.147:8000");
	AddStreamToCategory(pwzbbgxjdvjdowx, "Chillout Radio Greece - Chillout/Ambient/Lounge Music", "http://live.chilloutradio.gr:8999");
	AddStreamToCategory(pwzbbgxjdvjdowx, "4clubbers", "http://94.23.226.80:8500");
	new ocvmkzwvdsggmkx = PlayerAddCategory("80s");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Offshore Music Radio", "http://bitsmitter.com:8000");
	AddStreamToCategory(ocvmkzwvdsggmkx, "More Fm - Classic Rock Radio", "http://216.66.84.2:6320");
	AddStreamToCategory(ocvmkzwvdsggmkx, "ABC 80s Ireland", "http://173.244.194.212:8067");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Threeten Radio", "http://threetenradio.com:8089");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Glam FM", "http://173.193.223.145:8046");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Absolute 80s", "http://mp3-a8-128.as34763.net");
	AddStreamToCategory(ocvmkzwvdsggmkx, ".977 The 80s Channel", "http://205.188.215.229:8004");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Kick Radio - 80s & 90s", "http://brd.kickradio.nl:9000");
	AddStreamToCategory(ocvmkzwvdsggmkx, "Dance Groove Radio", "http://server3.digital-webstream.de:12160");
	AddStreamToCategory(ocvmkzwvdsggmkx, "80s Planet", "http://eu2.servemp3.com");
	new zbegxcahbczxoyc = PlayerAddCategory("Techno");
	AddStreamToCategory(zbegxcahbczxoyc, "Techno FM", "http://stream.techno.fm/techno.mp3");
	AddStreamToCategory(zbegxcahbczxoyc, "JumpStation.FM", "http://85.25.84.200:8036");
	new jjkkrroxkxvszpe = PlayerAddCategory("Hardcore");
	AddStreamToCategory(jjkkrroxkxvszpe, "Digitally Imported - Happy Hardcore", "http://u11aw.di.fm:80/di_hardcore");
	AddStreamToCategory(jjkkrroxkxvszpe, "Hardcore Radio", "http://shoutcast1.hardcoreradio.nl");
	AddStreamToCategory(jjkkrroxkxvszpe, "Hardcore Power Radio", "http://hardcorepower.stream2us.com:8126");
	new avsktonvwxxtyyn = PlayerAddCategory("RnB");
	AddStreamToCategory(avsktonvwxxtyyn, "Defjay", "http://sc1.netstreamer.net:8008");
	AddStreamToCategory(avsktonvwxxtyyn, "KISS", "http://icy-e-01.sharp-stream.com/kiss100.mp3");
	new xvhjsxjrzovsono = PlayerAddCategory("Rock");
	AddStreamToCategory(xvhjsxjrzovsono, "Atlantic Sound Factory", "http://208.85.240.83");
	AddStreamToCategory(xvhjsxjrzovsono, "Regular Rotation", "http://cp2.internet-radio.org.uk:30047");
	AddStreamToCategory(xvhjsxjrzovsono, "Noise FM", "http://stream01.noisefm.pl:8000");
	AddStreamToCategory(xvhjsxjrzovsono, "Idobi Radio", "http://65.19.189.162");
	AddStreamToCategory(xvhjsxjrzovsono, "Beatles Radio", "http://beatlesradio.com:8088");
	AddStreamToCategory(xvhjsxjrzovsono, "Absolute Radio", "http://mp3-vr-128.smgradio.com");
	AddStreamToCategory(xvhjsxjrzovsono, "181.FM - The Eagle (Classic Rock)", "http://uplink.duplexfx.com:8030");
	AddStreamToCategory(xvhjsxjrzovsono, "Rock Radio1", "http://91.121.203.207:8000");
	AddStreamToCategory(xvhjsxjrzovsono, "Megarock Radio", "http://205.188.215.228:8012");
	new kdxrhdcnydoozya = PlayerAddCategory("Drum & Bass");
	AddStreamToCategory(kdxrhdcnydoozya, "Bassjunkees.com - Drum & Bass, Oldskool, Jungle & Dubstep", "http://ducks.and.ponies.listen.bassjunkees.com:8442");
	AddStreamToCategory(kdxrhdcnydoozya, "Digitally Imported - Drum and Bass", "http://207.200.96.229:8030");
	AddStreamToCategory(kdxrhdcnydoozya, "DnB Heaven", "http://dnbheaven.com:8000");
	AddStreamToCategory(kdxrhdcnydoozya, "DnB Radio", "http://ponies.and.turtles.love.dnbradio.hosted.by.ilovedrumnbass.com:8000");
	AddStreamToCategory(kdxrhdcnydoozya, "UK Bass Radio", "http://92.48.87.11:8740");
	AddStreamToCategory(kdxrhdcnydoozya, "Destroyer", "http://destroyer.net:8800");
	AddStreamToCategory(kdxrhdcnydoozya, "Bassdrive", "http://screlay-dtc0l-3.shoutcast.com:8084");
	new bajpwtdkkamjzcc = PlayerAddCategory("Misc");
	AddStreamToCategory(bajpwtdkkamjzcc, "HIT104 - Your Top 40 Channel", "http://tuner.hit104.com:80");
	AddStreamToCategory(bajpwtdkkamjzcc, ".977 The Hits Channel", "http://205.188.215.230:8002");
	AddStreamToCategory(bajpwtdkkamjzcc, "Jack FM - All Hit Radio", "http://tuner.jackfm.de:80");
	new wvjhjmrrxtbkptc = PlayerAddCategory("Electro");
	AddStreamToCategory(wvjhjmrrxtbkptc, "Electro Radio", "http://stream.electroradio.ch:26630");
	AddStreamToCategory(wvjhjmrrxtbkptc, "Digitally Imported - Electro House", "http://scfire-dtc-aa01.stream.aol.com:80/stream/1025");
	AddStreamToCategory(wvjhjmrrxtbkptc, "Tuff and Twisted", "http://server2.myshoutcast.de:9042");
	AddStreamToCategory(wvjhjmrrxtbkptc, "House Section FM", "http://stream.housesection.fm:84");
	return 1;
}
#endif

// Corrida Pista 1
stock DestroyVehiclesPista1()
{
	Loop(o, sizeof(VehiclesFixPista1))
	{
		DestroyVehicle(VehiclesFixPista1[o]);
		VehiclesFixPista1[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista1()
{
	VehiclesFixPista1[0] = AddStaticVehicle(411, 1871.5778, -73.0314, 34.6071, 161.6082, -1, -1);
	VehiclesFixPista1[1] = AddStaticVehicle(411, 1876.3944, -74.4538, 34.5786, 162.9435, -1, -1);
	VehiclesFixPista1[2] = AddStaticVehicle(451, 1879.8948, -63.5898, 34.5591, 162.6328, -1, -1);
	VehiclesFixPista1[3] = AddStaticVehicle(451, 1875.4145, -61.9993, 34.5584, 160.0901, -1, -1);
	VehiclesFixPista1[4] = AddStaticVehicle(541, 1882.9382, -54.6106, 34.4766, 162.5410, -1, -1);
	VehiclesFixPista1[5] = AddStaticVehicle(541, 1878.2509, -53.0440, 34.4764, 160.5117, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace1(playerid)
{
	Loop(o, 20)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista1[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista1[playerid][o]);
			RaceChecksPista1[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace1(playerid)
{
	RaceChecksPista1[playerid][0] = CreateDynamicRaceCP(2, 1864.0175, -105.7350, 34.5942, 1443.5744, -316.3446, 2.9241, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][1] = CreateDynamicRaceCP(0, 1443.5744, -316.3446, 2.9241, 1234.4022, -417.5328, 3.5927, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][2] = CreateDynamicRaceCP(0, 1234.4022, -417.5328, 3.5927, 831.9293, -559.8767, 15.8123, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][3] = CreateDynamicRaceCP(0, 831.9293, -559.8767, 15.8123, 722.7717, -521.7700, 15.8093, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][4] = CreateDynamicRaceCP(0, 722.7717, -521.7700, 15.8093, 643.0751, -475.2996, 15.8131, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][5] = CreateDynamicRaceCP(0, 643.0751, -475.2996, 15.8131, 429.1912, -405.9950, 27.2360, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][6] = CreateDynamicRaceCP(0, 429.1912, -405.9950, 27.2360, 220.4114, -281.4731, 1.0546, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][7] = CreateDynamicRaceCP(0, 220.4114, -281.4731, 1.0546, 236.7087, -213.0933, 1.0533, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][8] = CreateDynamicRaceCP(0, 236.7087, -213.0933, 1.0533, 330.6267, -207.3919, 0.5423, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][9] = CreateDynamicRaceCP(0, 330.6267, -207.3919, 0.5423, 339.6791, -143.0006, 1.0497, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][10] = CreateDynamicRaceCP(0, 339.6791, -143.0006, 1.0497, 526.2964, -133.2704, 37.4582, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][11] = CreateDynamicRaceCP(0, 526.2964, -133.2704, 37.4582, 523.1275, 243.1618, 14.0824, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][12] = CreateDynamicRaceCP(0, 523.1275, 243.1618, 14.0824, 661.4911, 311.4994, 19.5078, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][13] = CreateDynamicRaceCP(0, 661.4911, 311.4994, 19.5078, 1043.5396, 519.7297, 19.5075, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][14] = CreateDynamicRaceCP(0, 1043.5396, 519.7297, 19.5075, 1371.6448, 432.7203, 19.3973, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][15] = CreateDynamicRaceCP(0, 1371.6448, 432.7203, 19.3973, 1283.4089, 235.7068, 19.0302, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][16] = CreateDynamicRaceCP(0, 1283.4089, 235.7068, 19.0302, 1243.6182, 30.8573, 24.6406, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][17] = CreateDynamicRaceCP(0, 1243.6182, 30.8573, 24.6406, 1288.2038, -89.7702, 36.3855, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][18] = CreateDynamicRaceCP(0, 1288.2038, -89.7702, 36.3855, 1207.5178, -148.9743, 39.6301, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista1[playerid][19] = CreateDynamicRaceCP(1, 1207.5178, -148.9743, 39.6301, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 20)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista1[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista1[playerid][o], false);
		}
	}
	return 1;
}

// Corrida Pista 2
stock DestroyVehiclesPista2()
{
	Loop(o, sizeof(VehiclesFixPista2))
	{
		DestroyVehicle(VehiclesFixPista2[o]);
		VehiclesFixPista2[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista2()
{
	VehiclesFixPista2[0] = AddStaticVehicle(451, 2112.0083, 837.2313, 6.4514, 92.1345, -1, -1);
	VehiclesFixPista2[1] = AddStaticVehicle(451, 2112.1135, 831.5401, 6.4417, 89.6593, -1, -1);
	VehiclesFixPista2[2] = AddStaticVehicle(429, 2122.7131, 831.3756, 6.5733, 88.9166, -1, -1);
	VehiclesFixPista2[3] = AddStaticVehicle(429, 2122.7868, 837.2678, 6.5807, 88.5652, -1, -1);
	VehiclesFixPista2[4] = AddStaticVehicle(541, 2134.4777, 831.0501, 6.3943, 90.0049, -1, -1);
	VehiclesFixPista2[5] = AddStaticVehicle(541, 2134.5703, 837.0393, 6.3668, 88.6232, -1, -1);
	VehiclesFixPista2[6] = AddStaticVehicle(415, 2144.5908, 831.1053, 6.4947, 90.1793, -1, -1);
	VehiclesFixPista2[7] = AddStaticVehicle(415, 2144.4125, 836.7017, 6.5131, 89.9270, -1, -1);
	VehiclesFixPista2[8] = AddStaticVehicle(402, 2153.7216, 831.4035, 6.5658, 91.2441, -1, -1);
	VehiclesFixPista2[9] = AddStaticVehicle(402, 2153.8432, 836.9471, 6.5736, 91.3767, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace2(playerid)
{
	Loop(o, 16)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista2[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista2[playerid][o]);
			RaceChecksPista2[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace2(playerid)
{
	RaceChecksPista2[playerid][0] = CreateDynamicRaceCP(2, 2088.8320, 834.1641, 6.3132, 1799.6763, 834.1615, 10.2377, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][1] = CreateDynamicRaceCP(0, 1799.6763, 834.1615, 10.2377, 1361.4133, 833.7824, 6.3914, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][2] = CreateDynamicRaceCP(0, 1361.4133, 833.7824, 6.3914, 1067.6418, 785.2622, 10.2447, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][3] = CreateDynamicRaceCP(0, 1067.6418, 785.2622, 10.2447, 403.2198, 748.8020, 5.6085, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][4] = CreateDynamicRaceCP(0, 403.2198, 748.8020, 5.6085, -38.8023, 598.0864, 11.5255, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][5] = CreateDynamicRaceCP(0, -38.8023, 598.0864, 11.5255, -599.5037, 630.3817, 16.2100, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][6] = CreateDynamicRaceCP(0, -599.5037, 630.3817, 16.2100, -904.2575, 923.9509, 18.4233, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][7] = CreateDynamicRaceCP(0, -904.2575, 923.9509, 18.4233, -1025.5784, 1255.0361, 32.1752, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][8] = CreateDynamicRaceCP(0, -1025.5784, 1255.0361, 32.1752, -1185.5380, 1637.4984, 15.7092, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][9] = CreateDynamicRaceCP(0, -1185.5380, 1637.4984, 15.7092, -1605.8580, 1775.7564, 9.4187, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][10] = CreateDynamicRaceCP(0, -1605.8580, 1775.7564, 9.4187, -1757.1572, 2177.3037, 16.0770, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][11] = CreateDynamicRaceCP(0, -1757.1572, 2177.3037, 16.0770, -1959.5710, 2510.3256, 55.1704, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][12] = CreateDynamicRaceCP(0, -1959.5710, 2510.3256, 55.1704, -2645.7451, 2593.6086, 72.3064, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][13] = CreateDynamicRaceCP(0, -2645.7451, 2593.6086, 72.3064, -2736.5612, 2351.3815, 71.5684, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][14] = CreateDynamicRaceCP(0, -2736.5612, 2351.3815, 71.5684, -2676.8994, 1275.4371, 54.9945, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista2[playerid][15] = CreateDynamicRaceCP(1, -2676.8994, 1275.4371, 54.9945, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 16)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista2[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista2[playerid][o], false);
		}
	}
	return 1;
}

// Corrida Pista 3
stock DestroyVehiclesPista3()
{
	Loop(o, sizeof(VehiclesFixPista3))
	{
		DestroyVehicle(VehiclesFixPista3[o]);
		VehiclesFixPista3[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista3()
{
	VehiclesFixPista3[0] = AddStaticVehicle(424, -1814.8714, -608.2200, 16.0187, 181.7880, -1, -1);
	VehiclesFixPista3[1] = AddStaticVehicle(424, -1821.1149, -608.2612, 16.0183, 181.6147, -1, -1);
	VehiclesFixPista3[2] = AddStaticVehicle(434, -1815.6009, -597.2133, 16.1386, 184.2243, -1, -1);
	VehiclesFixPista3[3] = AddStaticVehicle(434, -1820.6834, -597.2591, 16.1334, 178.9229, -1, -1);
	VehiclesFixPista3[4] = AddStaticVehicle(426, -1816.0809, -584.9099, 16.1681, 179.3025, -1, -1);
	VehiclesFixPista3[5] = AddStaticVehicle(426, -1820.7562, -585.0967, 16.1681, 180.3774, -1, -1);
	VehiclesFixPista3[6] = AddStaticVehicle(500, -1816.0817, -574.6522, 16.1611, 179.7405, -1, -1);
	VehiclesFixPista3[7] = AddStaticVehicle(500, -1820.9528, -574.6641, 16.1759, 179.4728, -1, -1);
	VehiclesFixPista3[8] = AddStaticVehicle(573, -1816.2117, -562.1856, 16.0870, 180.5198, -1, -1);
	VehiclesFixPista3[9] = AddStaticVehicle(573, -1821.0740, -562.4643, 16.0927, 181.3700, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace3(playerid)
{
	Loop(o, 45)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista3[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista3[playerid][o]);
			RaceChecksPista3[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace3(playerid)
{
	RaceChecksPista3[playerid][0] = CreateDynamicRaceCP(2, -1817.0369, -635.8119, 16.2020, -1813.6044, -928.5433, 45.3811, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][1] = CreateDynamicRaceCP(0, -1813.6044, -928.5433, 45.3811, -1715.6846, -1222.2409, 52.8900, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][2] = CreateDynamicRaceCP(0, -1715.6846, -1222.2409, 52.8900, -1527.1934, -1415.7718, 41.4916, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][3] = CreateDynamicRaceCP(0, -1527.1934, -1415.7718, 41.4916, -1694.7965, -1129.3333, 72.6468, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][4] = CreateDynamicRaceCP(0, -1694.7965, -1129.3333, 72.6468, -1635.1198, -818.0968, 92.2724, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][5] = CreateDynamicRaceCP(0, -1635.1198, -818.0968, 92.2724, -1596.7639, -1143.8266, 102.4493, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][6] = CreateDynamicRaceCP(0, -1596.7639, -1143.8266, 102.4493, -1448.1711, -1321.7893, 100.0249, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][7] = CreateDynamicRaceCP(0, -1448.1711, -1321.7893, 100.0249, -1262.8804, -1361.0379, 119.1807, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][8] = CreateDynamicRaceCP(0, -1262.8804, -1361.0379, 119.1807, -903.5512, -1342.2023, 120.4510, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][9] = CreateDynamicRaceCP(0, -903.5512, -1342.2023, 120.4510, -896.4017, -1110.6635, 98.4010, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][10] = CreateDynamicRaceCP(0, -896.4017, -1110.6635, 98.4010, -1220.1328, -760.1655, 62.8508, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][11] = CreateDynamicRaceCP(0, -1220.1328, -760.1655, 62.8508, -995.7064, -427.2893, 35.8337, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][12] = CreateDynamicRaceCP(0, -995.7064, -427.2893, 35.8337, -942.3453, -211.4680, 40.0952, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][13] = CreateDynamicRaceCP(0, -942.3453, -211.4680, 40.0952, -727.7973, -77.2746, 67.7901, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][14] = CreateDynamicRaceCP(0, -727.7973, -77.2746, 67.7901, -739.5809, -5.3137, 54.2076, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][15] = CreateDynamicRaceCP(0, -739.5809, -5.3137, 54.2076, -817.0096, 13.1030, 32.7930, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][16] = CreateDynamicRaceCP(0, -817.0096, 13.1030, 32.7930, -739.1218, 112.1506, 14.4399, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][17] = CreateDynamicRaceCP(0, -739.1218, 112.1506, 14.4399, -685.2813, 248.5755, 1.6427, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][18] = CreateDynamicRaceCP(0, -685.2813, 248.5755, 1.6427, -198.6988, 251.3305, 11.6478, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][19] = CreateDynamicRaceCP(0, -198.6988, 251.3305, 11.6478, -140.3588, 533.6779, 6.7430, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][20] = CreateDynamicRaceCP(0, -140.3588, 533.6779, 6.7430, -399.5688, 557.3222, 16.4369, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][21] = CreateDynamicRaceCP(0, -399.5688, 557.3222, 16.4369, -801.4528, 722.5551, 18.0903, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][22] = CreateDynamicRaceCP(0, -801.4528, 722.5551, 18.0903, -961.1530, 1135.4577, 29.4100, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][23] = CreateDynamicRaceCP(0, -961.1530, 1135.4577, 29.4100, -1123.3880, 1471.4958, 24.5688, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][24] = CreateDynamicRaceCP(0, -1123.3880, 1471.4958, 24.5688, -1389.2344, 1708.0734, 4.0375, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][25] = CreateDynamicRaceCP(0, -1389.2344, 1708.0734, 4.0375, -1611.4854, 1781.8427, 9.7396, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][26] = CreateDynamicRaceCP(0, -1611.4854, 1781.8427, 9.7396, -1729.4720, 2166.1196, 16.9425, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][27] = CreateDynamicRaceCP(0, -1729.4720, 2166.1196, 16.9425, -1976.2796, 2538.6701, 55.0909, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][28] = CreateDynamicRaceCP(0, -1976.2796, 2538.6701, 55.0909, -2362.4697, 2634.3100, 53.1894, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][29] = CreateDynamicRaceCP(0, -2362.4697, 2634.3100, 53.1894, -2738.4631, 2361.9433, 71.5715, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][30] = CreateDynamicRaceCP(0, -2738.4631, 2361.9433, 71.5715, -2673.8652, 1884.2237, 65.6271, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][31] = CreateDynamicRaceCP(0, -2673.8652, 1884.2237, 65.6271, -2645.3686, 1207.8115, 54.7219, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][32] = CreateDynamicRaceCP(0, -2645.3686, 1207.8115, 54.7219, -2457.9172, 1217.5419, 34.6462, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][33] = CreateDynamicRaceCP(0, -2457.9172, 1217.5419, 34.6462, -2444.0495, 1376.9058, 6.6119, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][34] = CreateDynamicRaceCP(0, -2444.0495, 1376.9058, 6.6119, -2238.5917, 1332.2816, 6.6039, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][35] = CreateDynamicRaceCP(0, -2238.5917, 1332.2816, 6.6039, -2014.4545, 1308.8612, 6.6053, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][36] = CreateDynamicRaceCP(0, -2014.4545, 1308.8612, 6.6053, -1722.4250, 1335.7371, 6.6043, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][37] = CreateDynamicRaceCP(0, -1722.4250, 1335.7371, 6.6043, -1583.3269, 1063.9428, 6.6064, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][38] = CreateDynamicRaceCP(0, -1583.3269, 1063.9428, 6.6064, -1559.3967, 841.3081, 6.6034, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][39] = CreateDynamicRaceCP(0, -1559.3967, 841.3081, 6.6034, -1559.0845, 665.1401, 6.6061, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][40] = CreateDynamicRaceCP(0, -1559.0845, 665.1401, 6.6061, -1759.4393, 294.5697, 7.0207, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][41] = CreateDynamicRaceCP(0, -1759.4393, 294.5697, 7.0207, -1799.5322, -26.5773, 14.6058, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][42] = CreateDynamicRaceCP(0, -1799.5322, -26.5773, 14.6058, -1799.1837, -254.4425, 18.5745, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][43] = CreateDynamicRaceCP(0, -1799.1837, -254.4425, 18.5745, -1818.1372, -612.6794, 15.7208, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista3[playerid][44] = CreateDynamicRaceCP(1, -1823.7214, -527.1090, 14.9372, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 45)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista3[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista3[playerid][o], false);
		}
	}
	return 1;
}

// Fliping Pista 4
stock DestroyVehiclesPista4()
{
	Loop(o, sizeof(VehiclesFixPista4))
	{
		DestroyVehicle(VehiclesFixPista4[o]);
		VehiclesFixPista4[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista4()
{
	VehiclesFixPista4[0] = AddStaticVehicle(513, -1543.2855, -61.5240, 14.7013, 314.1155, -1, -1);
	VehiclesFixPista4[1] = AddStaticVehicle(513, -1554.3980, -50.6917, 14.6961, 313.2176, -1, -1);
	VehiclesFixPista4[2] = AddStaticVehicle(513, -1566.8707, -64.4562, 14.7006, 315.9618, -1, -1);
	VehiclesFixPista4[3] = AddStaticVehicle(513, -1557.3172, -74.4843, 14.7005, 312.9379, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace4(playerid)
{
	Loop(o, 24)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista4[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista4[playerid][o]);
			RaceChecksPista4[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace4(playerid)
{
	RaceChecksPista4[playerid][0] = CreateDynamicRaceCP(2, -1497.1588, -4.4474, 14.6941, -1243.4791, 245.9857, 41.5711, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][1] = CreateDynamicRaceCP(3, -1243.4791, 245.9857, 41.5711, -937.8276, 570.9155, 89.6367, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][2] = CreateDynamicRaceCP(3, -937.8276, 570.9155, 89.6367, -610.6488, 837.3283, 153.8237, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][3] = CreateDynamicRaceCP(3, -610.6488, 837.3283, 153.8237, -217.9287, 930.1102, 231.6722, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][4] = CreateDynamicRaceCP(3, -217.9287, 930.1102, 231.6722, 193.2444, 841.7366, 296.5800, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][5] = CreateDynamicRaceCP(3, 193.2444, 841.7366, 296.5800, 581.5132, 652.4037, 358.6132, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][6] = CreateDynamicRaceCP(3, 581.5132, 652.4037, 358.6132, 1013.5503, 642.3397, 412.1338, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][7] = CreateDynamicRaceCP(3, 1013.5503, 642.3397, 412.1338, 1387.2994, 895.2841, 435.9366, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][8] = CreateDynamicRaceCP(3, 1387.2994, 895.2841, 435.9366, 1781.7132, 1135.0363, 424.8243, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][9] = CreateDynamicRaceCP(3, 1781.7132, 1135.0363, 424.8243, 2234.0419, 931.6644, 333.3006, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][10] = CreateDynamicRaceCP(3, 2234.0419, 931.6644, 333.3006, 2411.1594, 487.3965, 285.4300, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][11] = CreateDynamicRaceCP(3, 2411.1594, 487.3965, 285.4300, 2354.5695, -2.4241, 242.9647, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][12] = CreateDynamicRaceCP(3, 2354.5695, -2.4241, 242.9647, 2299.7028, -467.5471, 253.9732, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][13] = CreateDynamicRaceCP(3, 2299.7028, -467.5471, 253.9732, 2110.8857, -877.4959, 272.3986, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][14] = CreateDynamicRaceCP(3, 2110.8857, -877.4959, 272.3986, 1845.9390, -1265.5473, 277.1255, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][15] = CreateDynamicRaceCP(3, 1845.9390, -1265.5473, 277.1255, 1466.6323, -1572.3651, 228.8670, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][16] = CreateDynamicRaceCP(3, 1466.6323, -1572.3651, 228.8670, 1026.1445, -1844.4003, 134.1884, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][17] = CreateDynamicRaceCP(3, 1026.1445, -1844.4003, 134.1884, 689.6018, -2223.6774, 52.4772, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][18] = CreateDynamicRaceCP(3, 689.6018, -2223.6774, 52.4772, 824.7373, -2674.1745, 22.1783, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][19] = CreateDynamicRaceCP(3, 824.7373, -2674.1745, 22.1783, 1232.5562, -2659.0332, 33.7494, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][20] = CreateDynamicRaceCP(3, 1232.5562, -2659.0332, 33.7494, 1606.7535, -2598.4724, 28.1646, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][21] = CreateDynamicRaceCP(3, 1606.7535, -2598.4724, 28.1646, 1863.4034, -2592.2314, 14.1199, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][22] = CreateDynamicRaceCP(3, 1863.4034, -2592.2314, 14.1199, 2024.8247, -2592.8437, 14.1473, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista4[playerid][23] = CreateDynamicRaceCP(4, 2024.8247, -2592.8437, 14.1473, 2076.1113, -2592.9821, 14.0925, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 24)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista4[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista4[playerid][o], false);
		}
	}
	return 1;
}

// Fliping Pista 5
stock DestroyVehiclesPista5()
{
	Loop(o, sizeof(VehiclesFixPista5))
	{
		DestroyVehicle(VehiclesFixPista5[o]);
		VehiclesFixPista5[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista5()
{
	VehiclesFixPista5[0] = AddStaticVehicle(520, 1484.7895, 1681.1741, 11.2739, 180.5462, -1, -1);
	VehiclesFixPista5[1] = AddStaticVehicle(520, 1469.2293, 1681.3697, 11.2706, 180.8195, -1, -1);
	VehiclesFixPista5[2] = AddStaticVehicle(520, 1468.7080, 1701.7501, 11.2721, 181.0956, -1, -1);
	VehiclesFixPista5[3] = AddStaticVehicle(520, 1486.6396, 1702.5288, 11.2775, 181.0976, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace5(playerid)
{
	Loop(o, 36)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista5[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista5[playerid][o]);
			RaceChecksPista5[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace5(playerid)
{
	RaceChecksPista5[playerid][0] = CreateDynamicRaceCP(2, 1477.1896, 1630.1248, 11.2711, 1478.0155, 1353.0626, 33.1948, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][1] = CreateDynamicRaceCP(3, 1478.0155, 1353.0626, 33.1948, 1477.4868, 990.9283, 90.2106, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][2] = CreateDynamicRaceCP(3, 1477.4868, 990.9283, 90.2106, 1477.3276, 638.8137, 158.1636, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][3] = CreateDynamicRaceCP(3, 1477.3276, 638.8137, 158.1636, 1465.0842, 301.3023, 224.6444, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][4] = CreateDynamicRaceCP(3, 1465.0842, 301.3023, 224.6444, 1212.0548, 96.9810, 278.6677, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][5] = CreateDynamicRaceCP(3, 1212.0548, 96.9810, 278.6677, 895.9951, 196.7801, 350.3612, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][6] = CreateDynamicRaceCP(3, 895.9951, 196.7801, 350.3612, 612.8447, 329.6661, 421.0056, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][7] = CreateDynamicRaceCP(3, 612.8447, 329.6661, 421.0056, 312.6764, 470.9323, 490.9841, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][8] = CreateDynamicRaceCP(3, 312.6764, 470.9323, 490.9841, 26.6336, 458.1849, 562.3390, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][9] = CreateDynamicRaceCP(3, 26.6336, 458.1849, 562.3390, -162.1933, 244.1264, 627.2599, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][10] = CreateDynamicRaceCP(3, -162.1933, 244.1264, 627.2599, -373.9301, -2.0307, 697.6351, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][11] = CreateDynamicRaceCP(3, -373.9301, -2.0307, 697.6351, -610.9032, -185.9042, 772.1887, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][12] = CreateDynamicRaceCP(3, -610.9032, -185.9042, 772.1887, -857.3960, -362.0125, 825.2572, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][13] = CreateDynamicRaceCP(3, -857.3960, -362.0125, 825.2572, -1190.4766, -614.6792, 708.0275, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][14] = CreateDynamicRaceCP(3, -1190.4766, -614.6792, 708.0275, -1436.5609, -1015.9446, 682.2529, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][15] = CreateDynamicRaceCP(3, -1436.5609, -1015.9446, 682.2529, -1597.5217, -1371.1771, 673.1580, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][16] = CreateDynamicRaceCP(3, -1597.5217, -1371.1771, 673.1580, -1736.2453, -1726.8924, 618.9425, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][17] = CreateDynamicRaceCP(3, -1736.2453, -1726.8924, 618.9425, -2066.1813, -1912.3507, 561.7332, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][18] = CreateDynamicRaceCP(3, -2066.1813, -1912.3507, 561.7332, -2312.0825, -1707.6739, 551.4379, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][19] = CreateDynamicRaceCP(3, -2312.0825, -1707.6739, 551.4379, -2481.7495, -1401.5034, 514.5587, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][20] = CreateDynamicRaceCP(3, -2481.7495, -1401.5034, 514.5587, -2653.1840, -1038.2818, 451.1626, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][21] = CreateDynamicRaceCP(3, -2653.1840, -1038.2818, 451.1626, -2573.0493, -660.7384, 406.6000, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][22] = CreateDynamicRaceCP(3, -2573.0493, -660.7384, 406.6000, -2391.4433, -298.6039, 333.2171, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][23] = CreateDynamicRaceCP(3, -2391.4433, -298.6039, 333.2171, -2182.3535, 67.0687, 262.4259, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][24] = CreateDynamicRaceCP(3, -2182.3535, 67.0687, 262.4259, -1886.3737, 298.3109, 236.8541, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][25] = CreateDynamicRaceCP(3, -1886.3737, 298.3109, 236.8541, -1622.2294, 546.4017, 208.0858, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][26] = CreateDynamicRaceCP(3, -1622.2294, 546.4017, 208.0858, -1320.4873, 755.8296, 170.7363, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][27] = CreateDynamicRaceCP(3, -1320.4873, 755.8296, 170.7363, -1081.4721, 495.1511, 103.1472, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][28] = CreateDynamicRaceCP(3, -1081.4721, 495.1511, 103.1472, -888.8521, 220.9732, 96.0841, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][29] = CreateDynamicRaceCP(3, -888.8521, 220.9732, 96.0841, -595.5953, 258.7252, 71.9631, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][30] = CreateDynamicRaceCP(3, -595.5953, 258.7252, 71.9631, -598.7633, 564.4616, 51.8943, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][31] = CreateDynamicRaceCP(3, -598.7633, 564.4616, 51.8943, -893.3557, 618.5801, 40.7614, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][32] = CreateDynamicRaceCP(3, -893.3557, 618.5801, 40.7614, -1100.4595, 396.1115, 29.5490, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][33] = CreateDynamicRaceCP(3, -1100.4595, 396.1115, 29.5490, -1492.5261, 0.0213, 14.6285, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][34] = CreateDynamicRaceCP(3, -1492.5261, 0.0213, 14.6285, -1598.3479, -105.8283, 14.6241, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista5[playerid][35] = CreateDynamicRaceCP(4, -1598.3479, -105.8283, 14.6241, -1669.3297, -180.3710, 14.8684, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 36)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista5[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista5[playerid][o], false);
		}
	}
	return 1;
}

// Campeonato de Bike
stock DestroyVehiclesPista6()
{
	Loop(o, sizeof(VehiclesFixPista6))
	{
		DestroyVehicle(VehiclesFixPista6[o]);
		VehiclesFixPista6[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock AddVehiclesPista6()
{
	VehiclesFixPista6[0] = AddStaticVehicle(510, -2308.1005, -1661.8363, 483.2102, 207.1484, -1, -1);
	VehiclesFixPista6[1] = AddStaticVehicle(510, -2304.4758, -1660.5560, 483.2068, 204.3285, -1, -1);
	VehiclesFixPista6[2] = AddStaticVehicle(510, -2301.2431, -1667.2924, 483.2675, 206.3182, -1, -1);
	VehiclesFixPista6[3] = AddStaticVehicle(510, -2304.2236, -1668.7772, 483.2519, 206.0329, -1, -1);
	VehiclesFixPista6[4] = AddStaticVehicle(510, -2301.4433, -1674.4841, 483.3056, 206.0284, -1, -1);
	VehiclesFixPista6[5] = AddStaticVehicle(510, -2298.4570, -1673.0300, 483.2241, 206.6553, -1, -1);
	return 1;
}

stock DeletePlayerPistaRace6(playerid)
{
	Loop(o, 11)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista6[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPista6[playerid][o]);
			RaceChecksPista6[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRace6(playerid)
{
	RaceChecksPista6[playerid][0] = CreateDynamicRaceCP(2, -2287.3432, -1700.1368, 478.4811, -2453.8747, -1721.3782, 430.3252, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][1] = CreateDynamicRaceCP(0, -2453.8747, -1721.3782, 430.3252, -2446.5361, -1811.9833, 409.8394, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][2] = CreateDynamicRaceCP(0, -2446.5361, -1811.9833, 409.8394, -2550.6477, -1663.1605, 399.6877, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][3] = CreateDynamicRaceCP(0, -2550.6477, -1663.1605, 399.6877, -2532.6477, -1803.5378, 375.7306, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][4] = CreateDynamicRaceCP(0, -2532.6477, -1803.5378, 375.7306, -2594.5007, -1628.8627, 343.5939, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][5] = CreateDynamicRaceCP(0, -2594.5007, -1628.8627, 343.5939, -2522.1889, -1889.4002, 294.9654, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][6] = CreateDynamicRaceCP(0, -2522.1889, -1889.4002, 294.9654, -2651.0314, -1732.4049, 257.4855, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][7] = CreateDynamicRaceCP(0, -2651.0314, -1732.4049, 257.4855, -2413.6711, -2092.7531, 120.4696, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][8] = CreateDynamicRaceCP(0, -2413.6711, -2092.7531, 120.4696, -2102.5759, -1883.6650, 110.1320, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][9] = CreateDynamicRaceCP(0, -2102.5759, -1883.6650, 110.1320, -2370.7817, -2193.6804, 33.0386, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPista6[playerid][10] = CreateDynamicRaceCP(1, -2370.7817, -2193.6804, 33.0386, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);

	Loop(o, 11)
	{
		if(IsValidDynamicRaceCP(RaceChecksPista6[playerid][o]))
		{
			TogglePlayerDynamicRaceCP(playerid, RaceChecksPista6[playerid][o], false);
		}
	}
	return 1;
}

// Maquinista
stock DeletePlayerPistaRaceTrain(playerid)
{
	Loop(o, 6)
	{
		if(IsValidDynamicRaceCP(RaceChecksPistaTrain[playerid][o]))
		{
			DestroyDynamicRaceCP(RaceChecksPistaTrain[playerid][o]);
			RaceChecksPistaTrain[playerid][o] = -1;
		}
	}
	return 1;
}

stock CreatePlayerPistaRaceTrain(playerid)
{
	RaceChecksPistaTrain[playerid][0] = CreateDynamicRaceCP(2, 788.2229, -1342.7612, -0.1243, -1942.7958, 168.3988, 27.0006, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPistaTrain[playerid][1] = CreateDynamicRaceCP(2, -1942.7958, 168.3988, 27.0006, 1459.8220, 2632.2500, 12.1256, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPistaTrain[playerid][2] = CreateDynamicRaceCP(2, 1459.8220, 2632.2500, 12.1256, 2780.8750, 1731.1392, 12.1256, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPistaTrain[playerid][3] = CreateDynamicRaceCP(2, 2780.8750, 1731.1392, 12.1256, 2864.7500, 1252.3819, 12.1256, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPistaTrain[playerid][4] = CreateDynamicRaceCP(2, 2864.7500, 1252.3819, 12.1256, 1700.7648, -1953.6530, 14.8756, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	RaceChecksPistaTrain[playerid][5] = CreateDynamicRaceCP(2, 1700.7648, -1953.6530, 14.8756, 0.0, 0.0, 0.0, CHECK_RACER_SIZE, -1, -1, playerid, CHECK_RACER_DISTANCE);
	return 1;
}

stock UncagePlayer(playerid)
{
	Loop(o, 8)
	{
		DestroyDynamicObject(CageObjects[playerid][o]);
	}
	return 1;
}

stock CagePlayer(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	CageObjects[playerid][0] = CreateDynamicObject(980, X, Y-2.7147386074066, Z+6.1405787467957, 0, 0, 180, -1, -1, -1, 75);
	CageObjects[playerid][1] = CreateDynamicObject(980, X+3, Y+3, Z+3.3905787467957, 270, 0, 270, -1, -1, -1, 75);
	CageObjects[playerid][2] = CreateDynamicObject(980, X+5.6999998092651, Y+3, Z+6.1405787467957, 0, 0, 270, -1, -1, -1, 75);
	CageObjects[playerid][3] = CreateDynamicObject(980, X-2.5, Y+3, Z+3.3905787467957, 270, 0, 270, -1, -1, -1, 75);
	CageObjects[playerid][4] = CreateDynamicObject(980, X, Y+8.6927900314331, Z+6.1405787467957, 0, 0, 0, -1, -1, -1, 75);
	CageObjects[playerid][5] = CreateDynamicObject(980, X-5.3052453994751, Y+3, Z+6.1405787467957, 0, 0, 90, -1, -1, -1, 75);
	CageObjects[playerid][6] = CreateDynamicObject(980, X-2.5, Y+3, Z+8.8905792236328, 90, 0, 270, -1, -1, -1, 75);
	CageObjects[playerid][7] = CreateDynamicObject(980, X+3, Y+3, Z+8.8905792236328, 90, 0, 270, -1, -1, -1, 75);
	return 1;
}

stock PlayerCreateHause(playerid, casapreco, casaint, Float:Xp, Float:Yp, Float:Zp, Ip)
{
	new msg[256], strc[128], strc2[128],
		casafile[128], pickupid, iconid;

	if(!(casaint <= proximoint))
	{
		format(msg, sizeof(msg), "Use um interior válido! | ID's = 0-%d", proximoint);
		SendClientMessage(playerid, Vermelho, msg);
		return 1;
	}
	for(new c = 0; c < MAX_CASAS; c++)
	{
		format(strc2, sizeof(strc2), PASTA_CASAS, c);
		if(dini_Exists(strc2))
		{
			if(dini_Int(strc2, "TDono") == 3)
			{
				dini_FloatSet(strc2, "PosX", Xp);
				dini_FloatSet(strc2, "PosY", Yp);
				dini_FloatSet(strc2, "PosZ", Zp);
				dini_IntSet(strc2, "Int", casaint);
				dini_IntSet(strc2, "IntID", Ip);
				dini_IntSet(strc2, "Mundo", c);
				dini_IntSet(strc2, "TDono", 0);
				dini_Set(strc2, "Dono", "Ninguem");
				dini_IntSet(strc2, "Preco", casapreco);
				dini_IntSet(strc2, "Trancada", 0);
				dini_IntSet(strc2, "TMorador", 0);
				dini_Set(strc2, "Morador", "Ninguem");
				pickupid = CreateDynamicPickup(1273, 1, Xp, Yp, Zp, -1, -1, -1, 200.0);
				dini_IntSet(strc2, "Id", pickupid);
				iconid = CreateDynamicMapIcon(Xp, Yp, Zp, 31, 0, -1, -1, -1, 100.0);
				dini_IntSet(strc2, "IconId", iconid);
				format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Morador: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", c, casapreco);
				ctextoid[c] = CreateDynamic3DTextLabel(STRX, -1, Xp, Yp, Zp, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				format(msg, sizeof(msg), "%s criou uma casa. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), c);
				SendClientMessageToAll(Azul, msg);
				CasaLog(msg);
				return 1;
			}
		}
	}
	if(proximacasa >= MAX_CASAS-1)
	{
		format(STRX, sizeof(STRX), "O limite de %d casas foi atingido, não é possível criar mais.", MAX_CASAS);
		SendClientMessage(playerid, Vermelho, STRX);
		return 1;
	}
	format(strc, sizeof(strc), PASTA_CASAS, proximacasa);
	if(dini_Exists(strc))
	{
		proximacasa++;
	}
	format(casafile, sizeof(casafile), PASTA_CASAS, proximacasa);
	dini_Create(casafile);
	dini_FloatSet(casafile, "PosX", Xp);
	dini_FloatSet(casafile, "PosY", Yp);
	dini_FloatSet(casafile, "PosZ", Zp);
	dini_IntSet(casafile, "Int", casaint);
	dini_IntSet(casafile, "IntID", Ip);
	dini_IntSet(casafile, "Mundo", proximacasa);
	dini_IntSet(casafile, "TDono", 0);
	dini_Set(casafile, "Dono", "Ninguem");
	dini_IntSet(casafile, "Preco", casapreco);
	dini_IntSet(casafile, "Trancada", 0);
	dini_IntSet(casafile, "TMorador", 0);
	dini_Set(casafile, "Morador", "Ninguem");
	pickupid = CreateDynamicPickup(1273, 1, Xp, Yp, Zp, -1, -1, -1, 200.0);
	dini_IntSet(casafile, "Id", pickupid);
	iconid = CreateDynamicMapIcon(Xp, Yp, Zp, 31, 0, -1, -1, -1, 100.0);
	dini_IntSet(casafile, "IconId", iconid);
	format(STRX, sizeof(STRX), "{00FF00}Casa ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Morador: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", proximacasa, casapreco);
	ctextoid[proximacasa] = CreateDynamic3DTextLabel(STRX, -1, Xp, Yp, Zp, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
	format(msg, sizeof(msg), "%s criou uma casa. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), proximacasa);
	SendClientMessageToAll(Azul, msg);
	CasaLog(msg);
	proximacasa++;
	return 1;
}

stock PlayerCreateProp(playerid, proppreco, Float:Xp, Float:Yp, Float:Zp, Ip)
{
	new msg[256], strp[128], strp2[128], propfile[128],
		pickupid, iconid;

	for(new p = 0; p < MAX_PROPS; p++)
	{
		format(strp2, sizeof(strp2), PASTA_PROPS, p);
		if(dini_Exists(strp2))
		{
			if(dini_Int(strp2, "TDono") == 3)
			{
				dini_FloatSet(strp2, "PosX", Xp);
				dini_FloatSet(strp2, "PosY", Yp);
				dini_FloatSet(strp2, "PosZ", Zp);
				dini_IntSet(strp2, "Int", 0);
				dini_IntSet(strp2, "IntID", Ip);
				dini_FloatSet(strp2, "IntX", Xp);
				dini_FloatSet(strp2, "IntY", Yp);
				dini_FloatSet(strp2, "IntZ", Zp);
				dini_IntSet(strp2, "Mundo", p);
				dini_IntSet(strp2, "TDono", 0);
				dini_Set(strp2, "Dono", "Ninguem");
				dini_IntSet(strp2, "Preco", proppreco);
				dini_Set(strp2, "Nome", "Sem Nome");
				pickupid = CreateDynamicPickup(1279, 1, Xp, Yp, Zp, -1, -1, -1, 200.0);
				dini_IntSet(strp2, "Id", pickupid);
				iconid = CreateDynamicMapIcon(Xp, Yp, Zp, 11, 0, -1, -1, -1, 100.0);
				dini_IntSet(strp2, "IconId", iconid);
				format(STRX, sizeof(STRX), "{FF0000}Sem Nome\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", p, proppreco);
				ptextoid[p] = CreateDynamic3DTextLabel(STRX, -1, Xp, Yp, Zp, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
				format(msg, sizeof(msg), "%s criou uma propriedade. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), p);
				SendClientMessageToAll(Azul, msg);
				PropLog(msg);
				return 1;
			}
		}
	}
	if(proximaprop >= MAX_PROPS-1)
	{
		format(STRX, sizeof(STRX), "O limite de %d propriedades foi atingido, não é possível criar mais.", MAX_PROPS);
		SendClientMessage(playerid, Vermelho, STRX);
		return 1;
	}
	format(strp, sizeof(strp), PASTA_PROPS, proximaprop);
	if(dini_Exists(strp))
	{
		proximaprop++;
	}
	format(propfile, sizeof(propfile), PASTA_PROPS, proximaprop);
	dini_Create(propfile);
	dini_FloatSet(propfile, "PosX", Xp);
	dini_FloatSet(propfile, "PosY", Yp);
	dini_FloatSet(propfile, "PosZ", Zp);
	dini_IntSet(propfile, "Int", 0);
	dini_IntSet(propfile, "IntID", Ip);
	dini_FloatSet(propfile, "IntX", Xp);
	dini_FloatSet(propfile, "IntY", Yp);
	dini_FloatSet(propfile, "IntZ", Zp);
	dini_IntSet(propfile, "Mundo", proximaprop);
	dini_IntSet(propfile, "TDono", 0);
	dini_Set(propfile, "Dono", "Ninguem");
	dini_IntSet(propfile, "Preco", proppreco);
	dini_Set(propfile, "Nome", "Sem Nome");
	pickupid = CreateDynamicPickup(1279, 1, Xp, Yp, Zp, -1, -1, -1, 200.0);
	dini_IntSet(propfile, "Id", pickupid);
	iconid = CreateDynamicMapIcon(Xp, Yp, Zp, 11, 0, -1, -1, -1, 100.0);
	dini_IntSet(propfile, "IconId", iconid);
	format(STRX, sizeof(STRX), "{FF0000}Sem Nome\n\n{00FF00}Prop ID: {FF0000}%d\n{00FF00}Dono: {FF0000}Ninguem\n{00FF00}Valor: {FF0000}$%d", proximaprop, proppreco);
	ptextoid[proximaprop] = CreateDynamic3DTextLabel(STRX, -1, Xp, Yp, Zp, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 200.0);
	format(msg, sizeof(msg), "%s criou uma propriedade. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), proximaprop);
	SendClientMessageToAll(Azul, msg);
	PropLog(msg);
	proximaprop++;
	return 1;
}

stock PlayerCreatePortao(playerid, modelo, Float:Xp, Float:Yp, Float:Zp, Ip)
{
	new msg[256], strpt[128], strpt2[128], portaofile[128],
		portaoid;

	if(!(modelo == 969 || modelo == 971 || modelo == 980))
	{
		SendClientMessage(playerid, Vermelho, "Use um modelo válido! | Modelos: 969, 971, 980");
		return 1;
	}
	for(new portao = 0; portao < MAX_PORTOES; portao++)
	{
		format(strpt2, sizeof(strpt2), PASTA_PORTOES, portao);
		if(dini_Exists(strpt2))
		{
			if(dini_Int(strpt2, "TDono") == 3)
			{
				dini_IntSet(strpt2, "Modelo", modelo);
				dini_FloatSet(strpt2, "fCordX", Xp);
				dini_FloatSet(strpt2, "fCordY", Yp);
				dini_FloatSet(strpt2, "fCordZ", Zp);
				dini_FloatSet(strpt2, "fCordRX", 0.0000);
				dini_FloatSet(strpt2, "fCordRY", 0.0000);
				dini_FloatSet(strpt2, "fCordRZ", 0.0000);
				dini_FloatSet(strpt2, "aCordX", Xp);
				dini_FloatSet(strpt2, "aCordY", Yp);
				dini_FloatSet(strpt2, "aCordZ", Zp);
				dini_FloatSet(strpt2, "aCordRX", 0.0000);
				dini_FloatSet(strpt2, "aCordRY", 0.0000);
				dini_FloatSet(strpt2, "aCordRZ", 0.0000);
				dini_IntSet(strpt2, "IntID", Ip);
				portaoid = CreateDynamicObject(modelo, Xp+5, Yp-5, Zp, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);
				dini_IntSet(strpt2, "Id", portaoid);
				dini_IntSet(strpt2, "TDono", 0);
				dini_Set(strpt2, "Dono", "Ninguem");
				dini_Set(strpt2, "Convidado1", "Ninguem");
				dini_Set(strpt2, "Convidado2", "Ninguem");
				dini_Set(strpt2, "Convidado3", "Ninguem");
				SetPVarInt(playerid, "pidToEdit", portao);
				SetPVarInt(playerid, "objToEdit", portaoid);
				SetPVarInt(playerid, "pidSalvo", 0);
				ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
				format(msg, sizeof(msg), "%s criou um portão. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), portao);
				SendClientMessageToAll(Azul, msg);
				PortaoLog(msg);
				return 1;
			}
		}
	}
	if(proximoportao >= MAX_PORTOES-1)
	{
		format(STRX, sizeof(STRX), "O limite de %d portões foi atingido, não é possível criar mais.", MAX_PORTOES);
		SendClientMessage(playerid, Vermelho, STRX);
		return 1;
	}
	format(strpt, sizeof(strpt), PASTA_PORTOES, proximoportao);
	if(dini_Exists(strpt))
	{
		proximoportao++;
	}
	format(portaofile, sizeof(portaofile), PASTA_PORTOES, proximoportao);
	dini_Create(portaofile);
	dini_IntSet(portaofile, "Modelo", modelo);
	dini_FloatSet(portaofile, "fCordX", Xp);
	dini_FloatSet(portaofile, "fCordY", Yp);
	dini_FloatSet(portaofile, "fCordZ", Zp);
	dini_FloatSet(portaofile, "fCordRX", 0.0000);
	dini_FloatSet(portaofile, "fCordRY", 0.0000);
	dini_FloatSet(portaofile, "fCordRZ", 0.0000);
	dini_FloatSet(portaofile, "aCordX", Xp);
	dini_FloatSet(portaofile, "aCordY", Yp);
	dini_FloatSet(portaofile, "aCordZ", Zp);
	dini_FloatSet(portaofile, "aCordRX", 0.0000);
	dini_FloatSet(portaofile, "aCordRY", 0.0000);
	dini_FloatSet(portaofile, "aCordRZ", 0.0000);
	dini_IntSet(portaofile, "IntID", Ip);
	portaoid = CreateDynamicObject(modelo, Xp+5, Yp-5, Zp, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);
	dini_IntSet(portaofile, "Id", portaoid);
	dini_IntSet(portaofile, "TDono", 0);
	dini_Set(portaofile, "Dono", "Ninguem");
	dini_Set(portaofile, "Convidado1", "Ninguem");
	dini_Set(portaofile, "Convidado2", "Ninguem");
	dini_Set(portaofile, "Convidado3", "Ninguem");
	SetPVarInt(playerid, "pidToEdit", proximoportao);
	SetPVarInt(playerid, "objToEdit", portaoid);
	SetPVarInt(playerid, "pidSalvo", 0);
	ShowPlayerDialog(playerid, portaoeditor, DIALOG_STYLE_LIST, "Editando Portão", "Editar X Posição\nEditar Y Posição\nEditar Z Posição\nEditar RX Posição\nEditar RY Posição\nEditar RZ Posição\nDeletar Edição\nSalvar Edição", "OK", "Voltar");
	format(msg, sizeof(msg), "%s criou um portão. Local: %s, ID: %d", PlayerName(playerid), GetPlayerArea(playerid), proximoportao);
	SendClientMessageToAll(Azul, msg);
	PortaoLog(msg);
	proximoportao++;
	return 1;
}

stock PlayerAddConceVehicle(playerid, carmodel, carpreco, Float:Xp, Float:Yp, Float:Zp, Float:anGp, cor1, cor2)
{
	new strcc[128], strcc2[128], fileconce[128];

	for(new carro = 0; carro < proximocarro; carro++)
	{
		format(strcc2, sizeof(strcc2), PASTA_CONCE, carro);
		if(dini_Exists(strcc2))
		{
			if(dini_Int(strcc2, "TDono") == 3)
			{
				dini_IntSet(strcc2, "Modelo", carmodel);
				dini_FloatSet(strcc2, "CordX", Xp);
				dini_FloatSet(strcc2, "CordY", Yp);
				dini_FloatSet(strcc2, "CordZ", Zp);
				dini_FloatSet(strcc2, "Angulo", anGp);
				dini_IntSet(strcc2, "Cor1", cor1);
				dini_IntSet(strcc2, "Cor2", cor2);
				dini_IntSet(strcc2, "TDono", 0);
				dini_Set(strcc2, "Dono", "Ninguem");
				dini_IntSet(strcc2, "CarVIP", 0);
				dini_IntSet(strcc2, "Preco", carpreco);
				dini_IntSet(strcc2, "Combustivel", MAX_COMB);

				SetTimerEx("CriarVeiculo3", 5000, false, "ddffffdd", carro, carmodel, Xp, Yp, Zp, anGp, cor1, cor2);
				SendClientMessage(playerid, Azul, "Veículo criado com sucesso!");
				SendClientMessage(playerid, Amarelo, "O veículo aparecerá em instantes!");
				return 1;
			}
		}
	}
	if(proximocarro >= MAX_CONCES-1)
	{
		format(STRX, sizeof(STRX), "O limite de %d veículos foi atingido, não é possível criar mais.", MAX_CONCES);
		SendClientMessage(playerid, Vermelho, STRX);
		return 1;
	}
	format(strcc, sizeof(strcc), PASTA_CONCE, proximocarro);
	if(dini_Exists(strcc))
	{
		proximocarro++;
	}
	format(fileconce, sizeof(fileconce), PASTA_CONCE, proximocarro);
	dini_Create(fileconce);
	dini_IntSet(fileconce, "Modelo", carmodel);
	dini_FloatSet(fileconce, "CordX", Xp);
	dini_FloatSet(fileconce, "CordY", Yp);
	dini_FloatSet(fileconce, "CordZ", Zp);
	dini_FloatSet(fileconce, "Angulo", anGp);
	dini_IntSet(fileconce, "Cor1", cor1);
	dini_IntSet(fileconce, "Cor2", cor2);
	dini_IntSet(fileconce, "TDono", 0);
	dini_Set(fileconce, "Dono", "Ninguem");
	dini_IntSet(fileconce, "CarVIP", 0);
	dini_IntSet(fileconce, "Preco", carpreco);
	dini_IntSet(fileconce, "Combustivel", MAX_COMB);

	SetTimerEx("CriarVeiculo2", 5000, false, "dffffdd", carmodel, Xp, Yp, Zp, anGp, cor1, cor2);
	SendClientMessage(playerid, Azul, "Veículo criado com sucesso!");
	SendClientMessage(playerid, Amarelo, "O veículo aparecerá em instantes!");
	return 1;
}

stock PlayerAddConceVehicleForPlayer(playerid, carmodel, carpreco, Float:Xp, Float:Yp, Float:Zp, Float:anGp, cor1, cor2)
{
	new msg[256], strcc[128], strcc2[128], fileconce[128],
		carroid;

	if(GetPlayerGrana(playerid) >= carpreco-1)
	{
		if(GetCarros(playerid) < MAX_PLAYER_CONCE)
		{
			for(new carro = 0; carro < proximocarro; carro++)
			{
				format(strcc2, sizeof(strcc2), PASTA_CONCE, carro);
				if(dini_Exists(strcc2))
				{
					if(dini_Int(strcc2, "TDono") == 3)
					{
						dini_IntSet(strcc2, "Modelo", carmodel);
						dini_FloatSet(strcc2, "CordX", Xp);
						dini_FloatSet(strcc2, "CordY", Yp);
						dini_FloatSet(strcc2, "CordZ", Zp);
						dini_FloatSet(strcc2, "Angulo", anGp);
						dini_IntSet(strcc2, "Cor1", cor1);
						dini_IntSet(strcc2, "Cor2", cor2);
						dini_IntSet(strcc2, "TDono", 1);
						dini_Set(strcc2, "Dono", PlayerName(playerid));
						dini_IntSet(strcc2, "Preco", carpreco);
						dini_IntSet(strcc2, "Combustivel", MAX_COMB);
						GivePlayerGrana(playerid, -carpreco);

						if(vip[playerid] == 0)
						{
							dini_IntSet(strcc2, "CarVIP", 0);
							format(msg, sizeof(msg), "%s comprou um carro, deve estar feliz!", PlayerName(playerid));
							SendClientMessageToAll(roxo, msg);
							ClearChatbox(playerid, 10);
							SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
							SendClientMessage(playerid, Azul, "  Para ver as ferramentas do veículo, use: /meucarro");
							SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
						}
						else
						{
							dini_IntSet(strcc2, "CarVIP", 1);
							format(msg, sizeof(msg), "%s comprou um carro equipado com alarme explosivo.", PlayerName(playerid));
							SendClientMessageToAll(roxo, msg);
							ClearChatbox(playerid, 10);
							SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
							SendClientMessage(playerid, Amarelo, "  (VIP) Seu carro foi equipado com alarme explosivo.");
							SendClientMessage(playerid, Azul, "  Para ver as ferramentas do veículo, use: /meucarro");
							SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
						}
						carroid = AddStaticVehicle(carmodel, Xp, Yp, Zp, anGp, cor1, cor2);
						PutPlayerInVehicle(playerid, carroid, 0);
						dini_IntSet(strcc2, "Id", carroid);
						return 1;
					}
				}
			}
			if(proximocarro >= MAX_CONCES-1)
			{
				format(STRX, sizeof(STRX), "O limite de %d veículos foi atingido, não é possível criar mais.", MAX_CONCES);
				SendClientMessage(playerid, Vermelho, STRX);
				return 1;
			}
			format(strcc, sizeof(strcc), PASTA_CONCE, proximocarro);
			if(dini_Exists(strcc))
			{
				proximocarro++;
			}
			format(fileconce, sizeof(fileconce), PASTA_CONCE, proximocarro);
			dini_Create(fileconce);
			dini_IntSet(fileconce, "Modelo", carmodel);
			dini_FloatSet(fileconce, "CordX", Xp);
			dini_FloatSet(fileconce, "CordY", Yp);
			dini_FloatSet(fileconce, "CordZ", Zp);
			dini_FloatSet(fileconce, "Angulo", anGp);
			dini_IntSet(fileconce, "Cor1", cor1);
			dini_IntSet(fileconce, "Cor2", cor2);
			dini_IntSet(fileconce, "TDono", 1);
			dini_Set(fileconce, "Dono", PlayerName(playerid));
			dini_IntSet(fileconce, "Preco", carpreco);
			dini_IntSet(fileconce, "Combustivel", MAX_COMB);
			GivePlayerGrana(playerid, -carpreco);

			if(vip[playerid] == 0)
			{
				dini_IntSet(fileconce, "CarVIP", 0);
				format(msg, sizeof(msg), "%s comprou um carro, deve estar feliz!", PlayerName(playerid));
				SendClientMessageToAll(roxo, msg);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
				SendClientMessage(playerid, Azul, "  Para ver as ferramentas do veículo, use: /meucarro");
				SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
			}
			else
			{
				dini_IntSet(fileconce, "CarVIP", 1);
				format(msg, sizeof(msg), "%s comprou um carro equipado com alarme explosivo.", PlayerName(playerid));
				SendClientMessageToAll(roxo, msg);
				ClearChatbox(playerid, 10);
				SendClientMessage(playerid, Azul, "  Veículo comprado com sucesso!");
				SendClientMessage(playerid, Amarelo, "  (VIP) Seu carro foi equipado com alarme explosivo.");
				SendClientMessage(playerid, Azul, "  Para ver as ferramentas do veículo, use: /meucarro");
				SendClientMessage(playerid, LARANJA, "|___________________________________________________________|");
			}
			carroid = AddStaticVehicle(carmodel, Xp, Yp, Zp, anGp, cor1, cor2);
			PutPlayerInVehicle(playerid, carroid, 0);
			dini_IntSet(fileconce, "Id", carroid);
			proximocarro++;
		}
		else
		{
			SendClientMessage(playerid, Amarelo, "Você só pode ter "#MAX_PLAYER_CONCE" carros!");
			SendClientMessage(playerid, Vermelho, "Para comprar outro venda um!");
		}
	}
	else
	{
		SendClientMessage(playerid, Vermelho, "Você não tem dinheiro suficiente!");
	}
	return 1;
}

#if defined HeadShotUser
stock NoBadCam(playerid)
{

	new Float:x, Float:y, Float:z, Float:ang;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, ang);

	if((x < 0.0 && y > 0.0) && (ang > 90.0 && ang < 300.0)) return 0;
	else if((x > 0.0 && y > 0.0) && (ang > 88.16 && ang < 275.0)) return 0;
	else if((x < 0.0 && y < 0.0) && (ang > 257.30 && ang < 360.0)) return 0;
	else if((x > 0.0 && y < 0.0) && (ang < 88.16 && ang < 257.30)) return 0;

	return 1;
}
#endif

stock PointInRangeOfPoint(Float:hs_range, Float:x, Float:y, Float:z, Float:X, Float:Y, Float:Z)
{
	X -= x;
	Y -= y;
	Z -= z;
	return ((X * X) + (Y * Y) + (Z * Z)) < (hs_range * hs_range);
}

// Live Bar Car
stock UpdateHP(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new Float:HP, veh = GetPlayerVehicleID(playerid);
	GetVehicleHealth(veh, HP);
	if(HP != OldHealth[playerid])
	{
		OldDamage[playerid] = OldHealth[playerid]-HP;
		OldHealth[playerid] = HP;
		if(OldDamage[playerid] > 0)
		{

			new texts[128];
			if(LabelActive[playerid])
			{
				CDamage[playerid] += OldDamage[playerid];
				format(texts, sizeof(texts), "{ffd800}-%.0f\n%s", CDamage[playerid], UpdateString(HP));
				timercar[playerid] = SetTimerEx("PauseBar", 2000, 0, "i", playerid);
			}
			else
			{
				LabelActive[playerid] = true;
				format(texts, sizeof(texts), "{ffd800}-%.0f\n%s", OldDamage[playerid], UpdateString(HP));
				timercar[playerid] = SetTimerEx("PauseBar", 2000, 0, "i", playerid);
			}
			if(IsValidDynamic3DTextLabel(CarLabel[playerid]))
			{
				UpdateDynamic3DTextLabelText(CarLabel[playerid], -1, texts);
			}
		}
	}
	return 1;
}

stock UpdateBar(playerid)
{
	new Float:HP, veh = GetPlayerVehicleID(playerid);
	GetVehicleHealth(veh, HP);
	UpdateString(HP);

	if(IsValidDynamic3DTextLabel(CarLabel[playerid]))
	{
		UpdateDynamic3DTextLabelText(CarLabel[playerid], -1, UpdateString(HP));
	}
	return 1;
}

stock UpdateString(Float:HP)
{
	new str[30];
	if(HP == 1000)          format(str, sizeof(str), "{00ff00}");
	else if(HP >= 900)      format(str, sizeof(str), "{66ff00}{ffffff}");
	else if(HP >= 800)      format(str, sizeof(str), "{7fff00}{ffffff}");
	else if(HP >= 700)      format(str, sizeof(str), "{ccff00}{ffffff}");
	else if(HP >= 600)      format(str, sizeof(str), "{f7f21a}{ffffff}");
	else if(HP >= 500)      format(str, sizeof(str), "{f4c430}{ffffff}");
	else if(HP >= 400)      format(str, sizeof(str), "{e49b0f}{ffffff}");
	else if(HP >= 300)      format(str, sizeof(str), "{e4650e}{ffffff}");
	else if(HP >= 250)      format(str, sizeof(str), "{ff2400}{ffffff}");
	else                    format(str, sizeof(str), "{ff2400}Boom!");
	return str;
}

// =================================================================================
stock LoadTextDraws()
{
	topblack = TextDrawCreate(1.000000, -70.000000, "~n~");
	bottomblack = TextDrawCreate(-2.000000, 400.000000, "~n~");
	TextDrawUseBox(topblack, 1);
	TextDrawBoxColor(topblack, 0x000000ff);
	TextDrawTextSize(topblack, 655.000000, 80.000000);
	TextDrawUseBox(bottomblack, 1);
	TextDrawBoxColor(bottomblack, 0x000000ff);
	TextDrawTextSize(bottomblack, 840.000000, 240.000000);
	TextDrawAlignment(topblack, 0);
	TextDrawAlignment(bottomblack, 0);
	TextDrawBackgroundColor(topblack, 0x000000ff);
	TextDrawBackgroundColor(bottomblack, 0x000000ff);
	TextDrawFont(topblack, 3);
	TextDrawLetterSize(topblack, 1.000000, 14.000000);
	TextDrawFont(bottomblack, 3);
	TextDrawLetterSize(bottomblack, 1.000000, 24.000000);
	TextDrawColor(topblack, -1);
	TextDrawColor(bottomblack, -1);
	TextDrawSetOutline(topblack, 1);
	TextDrawSetOutline(bottomblack, 1);
	TextDrawSetProportional(topblack, 1);
	TextDrawSetProportional(bottomblack, 1);
	TextDrawSetShadow(topblack, 1);
	TextDrawSetShadow(bottomblack, 1);

	drogas1 = TextDrawCreate(1.000000, -70.000000, "~n~");
	drogas2 = TextDrawCreate(-2.000000, 213.000000, "~n~");
	TextDrawUseBox(drogas1, 1);
	TextDrawBoxColor(drogas1, 0xFFFFFFAA);
	TextDrawTextSize(drogas1, 655.000000, 80.000000);
	TextDrawUseBox(drogas2, 1);
	TextDrawBoxColor(drogas2, 0xFFFFFFAA);
	TextDrawTextSize(drogas2, 665.000000, 240.000000);
	TextDrawAlignment(drogas1, 0);
	TextDrawAlignment(drogas2, 0);
	TextDrawBackgroundColor(drogas1, 0x000000ff);
	TextDrawBackgroundColor(drogas2, 0x000000ff);
	TextDrawFont(drogas1, 1);
	TextDrawLetterSize(drogas1, 1.000000, 31.000000);
	TextDrawFont(drogas2, 1);
	TextDrawLetterSize(drogas2, 1.000000, 24.000000);
	TextDrawColor(drogas1, -1);
	TextDrawColor(drogas2, -1);
	TextDrawSetOutline(drogas1, 1);
	TextDrawSetOutline(drogas2, 1);
	TextDrawSetProportional(drogas1, 1);
	TextDrawSetProportional(drogas2, 1);
	TextDrawSetShadow(drogas1, 1);
	TextDrawSetShadow(drogas2, 1);

	AfkText = TextDrawCreate(168.000000, 319.000000, "Ausente ~p~/afk");
	TextDrawAlignment(AfkText, 0);
	TextDrawBackgroundColor(AfkText, 0x000000ff);
	TextDrawFont(AfkText, 1);
	TextDrawLetterSize(AfkText, 1.000000, 2.699999);
	TextDrawColor(AfkText, -1);
	TextDrawSetOutline(AfkText, 1);
	TextDrawSetProportional(AfkText, 1);
	TextDrawSetShadow(AfkText, 1);

	AfkBackText = TextDrawCreate(248.000000, 351.000000, "Para voltar ao jogo digite ~p~/on");
	TextDrawAlignment(AfkBackText, 0);
	TextDrawBackgroundColor(AfkBackText, 0x000000ff);
	TextDrawFont(AfkBackText, 1);
	TextDrawLetterSize(AfkBackText, 0.299999, 1.100000);
	TextDrawColor(AfkBackText, -1);
	TextDrawSetOutline(AfkBackText, 1);
	TextDrawSetProportional(AfkBackText, 1);
	TextDrawSetShadow(AfkBackText, 1);

	Relogio = TextDrawCreate(605.0, 25.0, "~n~");
	TextDrawUseBox(Relogio, 0);
	TextDrawFont(Relogio, 3);
	TextDrawSetShadow(Relogio, 0);
	TextDrawSetOutline(Relogio, 2);
	TextDrawBackgroundColor(Relogio, 255);
	TextDrawColor(Relogio, -1);
	TextDrawAlignment(Relogio, 3);
	TextDrawLetterSize(Relogio, 0.5, 1.5);

	#if defined EventTextUser
	Stakline = TextDrawCreate(165.0, 340.0, "~n~");
	TextDrawFont(Stakline, 3);
	TextDrawColor(Stakline, -1);
	TextDrawLetterSize(Stakline, 1.5, 3.0);
	TextDrawSetOutline(Stakline, 1);
	#endif

	#if defined gText3User
	gText3 = TextDrawCreate(0.0, 435.0, "~n~");
	TextDrawUseBox(gText3, true);
	TextDrawBoxColor(gText3, 255);
	#endif

	// SNAKE
	#if defined SnakeUser
	Background = TextDrawCreate(424.000000, 159.000000, "~n~");
	TextDrawBackgroundColor(Background, 255);
	TextDrawFont(Background, 0);
	TextDrawLetterSize(Background, 10.110000, 23.000049);
	TextDrawColor(Background, -1);
	TextDrawSetOutline(Background, 0);
	TextDrawSetProportional(Background, 1);
	TextDrawSetShadow(Background, 2);
	TextDrawUseBox(Background, 1);
	TextDrawBoxColor(Background, 255);
	TextDrawTextSize(Background, 186.000000, 25.000000);

	LevelText[0] = TextDrawCreate(389.000000, 191.000000, "~n~");
	TextDrawBackgroundColor(LevelText[0], 255);
	TextDrawFont(LevelText[0], 0);
	TextDrawLetterSize(LevelText[0], 0.500000, 0.899999);
	TextDrawColor(LevelText[0], -1);
	TextDrawSetOutline(LevelText[0], 1);
	TextDrawSetProportional(LevelText[0], 0);
	TextDrawUseBox(LevelText[0], 1);
	TextDrawBoxColor(LevelText[0], 16711935);
	TextDrawTextSize(LevelText[0], 222.000000, 4.000000);

	LevelText[1] = TextDrawCreate(389.000000, 326.000000, "~n~");
	TextDrawBackgroundColor(LevelText[1], 255);
	TextDrawFont(LevelText[1], 0);
	TextDrawLetterSize(LevelText[1], 0.500000, 0.899999);
	TextDrawColor(LevelText[1], -1);
	TextDrawSetOutline(LevelText[1], 1);
	TextDrawSetProportional(LevelText[1], 0);
	TextDrawUseBox(LevelText[1], 1);
	TextDrawBoxColor(LevelText[1], 16711935);
	TextDrawTextSize(LevelText[1], 222.000000, 4.000000);

	LevelText[2] = TextDrawCreate(284.000000, 258.000000, "~n~");
	TextDrawBackgroundColor(LevelText[2], 255);
	TextDrawFont(LevelText[2], 0);
	TextDrawLetterSize(LevelText[2], 0.189999, 0.999998);
	TextDrawColor(LevelText[2], -1);
	TextDrawSetOutline(LevelText[2], 1);
	TextDrawSetProportional(LevelText[2], 0);
	TextDrawUseBox(LevelText[2], 1);
	TextDrawBoxColor(LevelText[2], 16711935);
	TextDrawTextSize(LevelText[2], 191.000000, 10.000000);

	LevelText[3] = TextDrawCreate(419.000000, 258.000000, "~n~");
	TextDrawBackgroundColor(LevelText[3], 255);
	TextDrawFont(LevelText[3], 0);
	TextDrawLetterSize(LevelText[3], 0.149999, 0.999998);
	TextDrawColor(LevelText[3], -1);
	TextDrawSetOutline(LevelText[3], 1);
	TextDrawSetProportional(LevelText[3], 0);
	TextDrawUseBox(LevelText[3], 1);
	TextDrawBoxColor(LevelText[3], 16711935);
	TextDrawTextSize(LevelText[3], 326.000000, 10.000000);

	LevelText[4] = TextDrawCreate(239.000000, 177.000000, "~n~");
	TextDrawBackgroundColor(LevelText[4], 255);
	TextDrawFont(LevelText[4], 0);
	TextDrawLetterSize(LevelText[4], 0.260000, 2.499997);
	TextDrawColor(LevelText[4], -1);
	TextDrawSetOutline(LevelText[4], 1);
	TextDrawSetProportional(LevelText[4], 0);
	TextDrawUseBox(LevelText[4], 1);
	TextDrawBoxColor(LevelText[4], 16711935);
	TextDrawTextSize(LevelText[4], 206.000000, 26.000000);

	LevelText[5] = TextDrawCreate(404.000000, 177.000000, "~n~");
	TextDrawBackgroundColor(LevelText[5], 65535);
	TextDrawFont(LevelText[5], 0);
	TextDrawLetterSize(LevelText[5], 0.229999, 2.499997);
	TextDrawColor(LevelText[5], -1);
	TextDrawSetOutline(LevelText[5], 1);
	TextDrawSetProportional(LevelText[5], 0);
	TextDrawUseBox(LevelText[5], 1);
	TextDrawBoxColor(LevelText[5], 16711935);
	TextDrawTextSize(LevelText[5], 371.000000, 10.000000);

	LevelText[6] = TextDrawCreate(239.000000, 326.000000, "~n~");
	TextDrawBackgroundColor(LevelText[6], 255);
	TextDrawFont(LevelText[6], 0);
	TextDrawLetterSize(LevelText[6], 0.260000, 2.399997);
	TextDrawColor(LevelText[6], -1);
	TextDrawSetOutline(LevelText[6], 1);
	TextDrawSetProportional(LevelText[6], 0);
	TextDrawUseBox(LevelText[6], 1);
	TextDrawBoxColor(LevelText[6], 16711935);
	TextDrawTextSize(LevelText[6], 206.000000, 26.000000);

	LevelText[7] = TextDrawCreate(404.000000, 326.000000, "~n~");
	TextDrawBackgroundColor(LevelText[7], 65535);
	TextDrawFont(LevelText[7], 0);
	TextDrawLetterSize(LevelText[7], 0.229999, 2.399997);
	TextDrawColor(LevelText[7], -1);
	TextDrawSetOutline(LevelText[7], 1);
	TextDrawSetProportional(LevelText[7], 0);
	TextDrawUseBox(LevelText[7], 1);
	TextDrawBoxColor(LevelText[7], 16711935);
	TextDrawTextSize(LevelText[7], 371.000000, 10.000000);

	LevelText[8] = TextDrawCreate(329.000000, 245.000000, "~n~");
	TextDrawBackgroundColor(LevelText[8], 65535);
	TextDrawFont(LevelText[8], 0);
	TextDrawLetterSize(LevelText[8], -0.100000, 3.899996);
	TextDrawColor(LevelText[8], -1);
	TextDrawSetOutline(LevelText[8], 1);
	TextDrawSetProportional(LevelText[8], 0);
	TextDrawUseBox(LevelText[8], 1);
	TextDrawBoxColor(LevelText[8], 16711935);
	TextDrawTextSize(LevelText[8], 281.000000, 10.000000);
	#endif

	return 1;
}

stock DeleteTextDraws()
{
	TextDrawDestroy(topblack);
	topblack = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(bottomblack);
	bottomblack = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(drogas1);
	drogas1 = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(drogas2);
	drogas2 = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(AfkText);
	AfkText = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(AfkBackText);
	AfkBackText = Text:INVALID_TEXT_DRAW;

	TextDrawDestroy(Relogio);
	Relogio = Text:INVALID_TEXT_DRAW;

	#if defined EventTextUser
	TextDrawDestroy(Stakline);
	Stakline = Text:INVALID_TEXT_DRAW;
	#endif

	#if defined gText3User
	TextDrawDestroy(gText3);
	gText3 = Text:INVALID_TEXT_DRAW;
	#endif

	#if defined SnakeUser
	TextDrawDestroy(Background);
	Loop(o, sizeof(LevelText))
	{
		TextDrawDestroy(LevelText[o]);
		LevelText[o] = Text:INVALID_TEXT_DRAW;
	}
	#endif

	return 1;
}

#if defined IntroTextUser
stock LoadPlayerIntroText(playerid)
{
	TEXTRAND[playerid] = random(sizeof IMAGESTEXT);
	Intro[playerid][0] = TextDrawCreate(IMAGESTEXT[TEXTRAND[playerid]][textX], IMAGESTEXT[TEXTRAND[playerid]][textY], IMAGESTEXT[TEXTRAND[playerid]][loadimage]);
	TextDrawBackgroundColor(Intro[playerid][0], 255);
	TextDrawFont(Intro[playerid][0], 4);
	TextDrawLetterSize(Intro[playerid][0], 0.500000, 1.000000);
	TextDrawColor(Intro[playerid][0], -1);
	TextDrawSetOutline(Intro[playerid][0], 0);
	TextDrawSetProportional(Intro[playerid][0], 1);
	TextDrawSetShadow(Intro[playerid][0], 1);
	TextDrawUseBox(Intro[playerid][0], 1);
	TextDrawBoxColor(Intro[playerid][0], 255);
	TextDrawTextSize(Intro[playerid][0], 645.000000, 450.000000);

	Intro[playerid][1] = TextDrawCreate(170.000000, 190.000000, "Carregando");
	TextDrawFont(Intro[playerid][1], 2);
	TextDrawLetterSize(Intro[playerid][1], 0.570000, 1.799999);

	Intro[playerid][2] = TextDrawCreate(300.000000, 190.000000, ".");
	TextDrawFont(Intro[playerid][2], 2);
	TextDrawColor(Intro[playerid][2], 0xFFFFFF22);
	TextDrawLetterSize(Intro[playerid][2], 0.570000, 1.799999);

	Intro[playerid][3] = TextDrawCreate(300.000000, 190.000000, "..");
	TextDrawFont(Intro[playerid][3], 2);
	TextDrawColor(Intro[playerid][3], 0xFFFFFF44);
	TextDrawLetterSize(Intro[playerid][3], 0.570000, 1.799999);

	Intro[playerid][4] = TextDrawCreate(300.000000, 190.000000, "...");
	TextDrawFont(Intro[playerid][4], 2);
	TextDrawColor(Intro[playerid][4], 0xFFFFFF66);
	TextDrawLetterSize(Intro[playerid][4], 0.570000, 1.799999);

	Intro[playerid][5] = TextDrawCreate(300.000000, 190.000000, "....");
	TextDrawFont(Intro[playerid][5], 2);
	TextDrawColor(Intro[playerid][5], 0xFFFFFF88);
	TextDrawLetterSize(Intro[playerid][5], 0.570000, 1.799999);

	Intro[playerid][6] = TextDrawCreate(300.000000, 190.000000, ".....");
	TextDrawFont(Intro[playerid][6], 2);
	TextDrawColor(Intro[playerid][6], 0xFFFFFFAA);
	TextDrawLetterSize(Intro[playerid][6], 0.570000, 1.799999);

	Intro[playerid][7] = TextDrawCreate(300.000000, 190.000000, "......");
	TextDrawFont(Intro[playerid][7], 2);
	TextDrawColor(Intro[playerid][7], 0xFFFFFFCC);
	TextDrawLetterSize(Intro[playerid][7], 0.570000, 1.799999);

	Intro[playerid][8] = TextDrawCreate(300.000000, 190.000000, ".......");
	TextDrawFont(Intro[playerid][8], 2);
	TextDrawColor(Intro[playerid][8], 0xFFFFFFFF);
	TextDrawLetterSize(Intro[playerid][8], 0.570000, 1.799999);

	Intro[playerid][9] = TextDrawCreate(190.0, 202.0, ".");
	TextDrawFont(Intro[playerid][9], 1);
	TextDrawLetterSize(Intro[playerid][9], 23.250051, 1.099999);

	Intro[playerid][10] = TextDrawCreate(300.00, 223.0, "~r~Sub~w~-~g~Mundo");
	TextDrawFont(Intro[playerid][10], 2);
	TextDrawLetterSize(Intro[playerid][10], 0.340000, 1.099999);

	Intro[playerid][11] = TextDrawCreate(330.0, 235.0, "~p~Bem Vindo..");
	TextDrawFont(Intro[playerid][11], 2);
	TextDrawLetterSize(Intro[playerid][11], 0.340000, 1.099999);
	return 1;
}
#endif

stock LoadPlayerTextDraws(playerid)
{
	gps[playerid] = TextDrawCreate(140.0, 420.0, Text_Under_Minimap);
	TextDrawBackgroundColor(gps[playerid], 255);
	TextDrawFont(gps[playerid], 1);
	TextDrawSetOutline(gps[playerid], 1);
	TextDrawColor(gps[playerid], -1);

	#if defined gText2User
	gText2[playerid] = TextDrawCreate(490.00, 375.00, "~n~");
	TextDrawFont(gText2[playerid], 1);
	TextDrawLetterSize(gText2[playerid], 0.299999, 1.200000);
	TextDrawBackgroundColor(gText2[playerid], 255);
	TextDrawSetOutline(gText2[playerid], 1);
	TextDrawColor(gText2[playerid], -1);
	#endif

	#if defined gText4User
	gText4[playerid] = TextDrawCreate(240.0, 435.0, "~n~");
	TextDrawFont(gText4[playerid], 1);
	TextDrawLetterSize(gText4[playerid], 0.299999, 1.200000);
	TextDrawBackgroundColor(gText4[playerid], 255);
	TextDrawSetOutline(gText4[playerid], 1);
	TextDrawColor(gText4[playerid], -1);
	#endif

	#if defined CarInfosUser
	CarInfos1[playerid] = TextDrawCreate(150.000000, 375.000000, "Veiculo:~n~Velocidade:~n~Combustivel:~n~Lataria:");
	TextDrawAlignment(CarInfos1[playerid], 0);
	TextDrawBackgroundColor(CarInfos1[playerid], 0x000000ff);
	TextDrawFont(CarInfos1[playerid], 1);
	TextDrawLetterSize(CarInfos1[playerid], 0.299999, 1.200000);
	TextDrawColor(CarInfos1[playerid], -1);
	TextDrawSetOutline(CarInfos1[playerid], 1);
	TextDrawSetProportional(CarInfos1[playerid], 1);
	TextDrawSetShadow(CarInfos1[playerid], 1);

	CarInfos2[playerid] = TextDrawCreate(230.000000, 375.000000, "~n~");
	TextDrawAlignment(CarInfos2[playerid], 0);
	TextDrawBackgroundColor(CarInfos2[playerid], 0x000000ff);
	TextDrawFont(CarInfos2[playerid], 1);
	TextDrawLetterSize(CarInfos2[playerid], 0.299999, 1.200000);
	TextDrawColor(CarInfos2[playerid], -1);
	TextDrawSetOutline(CarInfos2[playerid], 1);
	TextDrawSetProportional(CarInfos2[playerid], 1);
	TextDrawSetShadow(CarInfos2[playerid], 1);

	CarInfos3[playerid] = TextDrawCreate(295.000000, 375.000000, "~n~");
	TextDrawAlignment(CarInfos3[playerid], 0);
	TextDrawBackgroundColor(CarInfos3[playerid], 0x000000ff);
	TextDrawFont(CarInfos3[playerid], 1);
	TextDrawLetterSize(CarInfos3[playerid], 0.299999, 1.200000);
	TextDrawColor(CarInfos3[playerid], -1);
	TextDrawSetOutline(CarInfos3[playerid], 1);
	TextDrawSetProportional(CarInfos3[playerid], 1);
	TextDrawSetShadow(CarInfos3[playerid], 1);

	CarInfos4[playerid] = TextDrawCreate(295.000000, 385.000000, "~n~");
	TextDrawAlignment(CarInfos4[playerid], 0);
	TextDrawBackgroundColor(CarInfos4[playerid], 0x000000ff);
	TextDrawFont(CarInfos4[playerid], 1);
	TextDrawLetterSize(CarInfos4[playerid], 0.299999, 1.200000);
	TextDrawColor(CarInfos4[playerid], -1);
	TextDrawSetOutline(CarInfos4[playerid], 1);
	TextDrawSetProportional(CarInfos4[playerid], 1);
	TextDrawSetShadow(CarInfos4[playerid], 1);
	#endif

	return 1;
}

stock DeletePlayerTextDraws(playerid)
{
	TextDrawDestroy(gps[playerid]);
	gps[playerid] = Text:INVALID_TEXT_DRAW;

	#if defined gText2User
	TextDrawDestroy(gText2[playerid]);
	gText2[playerid] = Text:INVALID_TEXT_DRAW;
	#endif

	#if defined gText4User
	TextDrawDestroy(gText4[playerid]);
	gText4[playerid] = Text:INVALID_TEXT_DRAW;
	#endif

	#if defined CarInfosUser
	TextDrawDestroy(CarInfos1[playerid]);
	TextDrawDestroy(CarInfos2[playerid]);
	TextDrawDestroy(CarInfos3[playerid]);
	TextDrawDestroy(CarInfos4[playerid]);

	CarInfos1[playerid] = Text:INVALID_TEXT_DRAW;
	CarInfos2[playerid] = Text:INVALID_TEXT_DRAW;
	CarInfos3[playerid] = Text:INVALID_TEXT_DRAW;
	CarInfos4[playerid] = Text:INVALID_TEXT_DRAW;
	#endif

	return 1;
}

// =================================================================================
stock Destroy3DTextsFix()
{
	Loop(o, sizeof(TextsFix))
	{
		DestroyDynamic3DTextLabel(TextsFix[o]);
		TextsFix[o] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}

stock Load3DTextsFix()
{
	TextsFix[0] = CreateDynamic3DTextLabel("Licenças", Blue, 248.7789, 69.1560, 1003.6406, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Licenças (DP LS)
	TextsFix[1] = CreateDynamic3DTextLabel("Licenças", Blue, 246.3500, 117.6079, 1003.2187, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Licenças (DP SF)
	TextsFix[2] = CreateDynamic3DTextLabel("Licenças", Blue, 292.0380, 179.1761, 1007.1794, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Licenças (DP LV)
	TextsFix[3] = CreateDynamic3DTextLabel("Licenças", Blue, 325.2503, 307.0072, 999.1484, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Licenças (DP FC)
	TextsFix[4] = CreateDynamic3DTextLabel("Empregos", Blue, 363.1501, 173.5224, 1008.3828, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Empregos (Pref)
	TextsFix[5] = CreateDynamic3DTextLabel("Mudanças", Blue, 381.5917, 170.8750, 1008.3828, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Mudanças (Pref)
	TextsFix[6] = CreateDynamic3DTextLabel("Caixa", Blue, 830.6135, 0.2755, 1004.1796, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Caixa (Banco)
	TextsFix[7] = CreateDynamic3DTextLabel("Faculdade", Blue, 1081.0103, -1697.9812, 13.5469, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Faculdade (LS)
	TextsFix[8] = CreateDynamic3DTextLabel("Viagens", Blue, 1685.827392, -2238.218994, 13.546875, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Aeroporto de LS
	TextsFix[9] = CreateDynamic3DTextLabel("Viagens", Blue, -1423.490844, -285.481903, 14.148437, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Aeroporto de SF
	TextsFix[10] = CreateDynamic3DTextLabel("Viagens", Blue, 1672.991333, 1447.842285, 10.786764, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Aeroporto de LV
	TextsFix[11] = CreateDynamic3DTextLabel("'ALT' = Subir", Blue, 1570.6644, -1635.5590, 13.9863, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Elevador DP (LS)
	TextsFix[12] = CreateDynamic3DTextLabel("Utilidades", Blue, 1352.3578, -1758.7310, 13.4808, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Loja em LS
	TextsFix[13] = CreateDynamic3DTextLabel("Utilidades", Blue, 1833.7753, -1842.5490, 13.5781, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Segunda Loja em LS
	TextsFix[14] = CreateDynamic3DTextLabel("Utilidades", Blue, 613.0466, -494.9978, 16.3359, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Loja em LV
	TextsFix[15] = CreateDynamic3DTextLabel("Lan House", Blue, 1478.6033, -1610.0619, 14.0393, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Lan House
	TextsFix[16] = CreateDynamic3DTextLabel("Cassino", Blue, 2020.0604, 1007.7492, 10.8203, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Cassino
	TextsFix[17] = CreateDynamic3DTextLabel("Bar", Blue, 1804.7009, -1710.3408, 13.5417, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Bar em LS
	TextsFix[18] = CreateDynamic3DTextLabel("Academia", Blue, -2270.3796, -155.8050, 35.3203, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Academia SF
	TextsFix[19] = CreateDynamic3DTextLabel("Academia", Blue, 2581.5579, 1060.5682, 11.7752, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Academia LV
	TextsFix[20] = CreateDynamic3DTextLabel("Academia", Blue, -144.5538, 1078.8065, 20.4922, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Academia FC
	TextsFix[20] = CreateDynamic3DTextLabel("Academia", Blue, 1472.3867,-1708.8785,15.1903, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // academia
	TextsFix[21] = CreateDynamic3DTextLabel("Delegacia", Blue, 1555.4916, -1675.6893, 16.1953, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // DP em LS
	TextsFix[22] = CreateDynamic3DTextLabel("Delegacia", Blue, -1605.6397, 711.1011, 13.8671, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // DP em SF
	TextsFix[23] = CreateDynamic3DTextLabel("Delegacia", Blue, 2287.1032, 2431.6791, 10.8203, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // DP em LV
	TextsFix[24] = CreateDynamic3DTextLabel("Delegacia", Blue, -217.8244, 979.1748, 19.5040, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // DP rm FC
	TextsFix[25] = CreateDynamic3DTextLabel("Loja de Roupas", Blue, 1162.9867, -1694.0570, 14.1719, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Loja de Roupas LS
	TextsFix[26] = CreateDynamic3DTextLabel("Loja de Roupas", Blue, -1694.5627, 951.8869, 24.8906, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Loja de Roupas SF
	TextsFix[27] = CreateDynamic3DTextLabel("Loja de Roupas", Blue, 2101.9236, 2257.3789, 11.0234, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Loja de Roupas LV
	TextsFix[28] = CreateDynamic3DTextLabel("Prefeitura", Blue, 1484.3788,-1777.2107,13.6554, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Prefeitura em LS
	TextsFix[29] = CreateDynamic3DTextLabel("Prefeitura", Blue, -2765.9091, 375.5550, 6.3346, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Prefeitura em SF
	TextsFix[30] = CreateDynamic3DTextLabel("Prefeitura", Blue, 2447.1237, 2376.3603, 12.1635, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Prefeitura em LV
	TextsFix[31] = CreateDynamic3DTextLabel("Prefeitura", Blue, -205.7683, 1062.0795, 19.7422, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Prefeitura em FC
	TextsFix[32] = CreateDynamic3DTextLabel("Banco", Blue, 1411.9444, -1699.8991, 13.5394, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco LS 1
	TextsFix[33] = CreateDynamic3DTextLabel("Banco", Blue, 1153.9837, -1772.2202, 16.5991, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco LS 2
	TextsFix[34] = CreateDynamic3DTextLabel("Banco", Blue, -1881.1000, 822.7247, 35.1773, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco SF 1
	TextsFix[35] = CreateDynamic3DTextLabel("Banco", Blue, -2649.3630, 376.0701, 6.1592, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco SF 2
	TextsFix[36] = CreateDynamic3DTextLabel("Banco", Blue, 1930.4991, 1345.2598, 9.9687, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco LV 1
	TextsFix[37] = CreateDynamic3DTextLabel("Banco", Blue, 2183.9082, 2295.4201, 10.8203, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Banco LV 2
	TextsFix[38] = CreateDynamic3DTextLabel("Boca de Fumo", Blue, 2156.6140, -1072.0437, 39.9844, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Na Favela
	TextsFix[39] = CreateDynamic3DTextLabel("Tuning", Blue, -266.9475, 1541.9738, 75.3593, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0); // Drift Tuning LV
	// Armas (Favela)
	TextsFix[40] = CreateDynamic3DTextLabel("{00FF00}Colt 45\n{FF0000}$100,00", -1, 2157.2561, -996.0366, 62.9568, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[41] = CreateDynamic3DTextLabel("{00FF00}Desert Eagle\n{FF0000}$200,00", -1, 2161.1899, -996.7966, 62.9597, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[42] = CreateDynamic3DTextLabel("{00FF00}M4 Assault Rifle\n{FF0000}$300,00", -1, 2165.7866, -997.6691, 62.9630, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[43] = CreateDynamic3DTextLabel("{00FF00}Tec-9\n{FF0000}$200,00", -1, 2170.7048, -998.6024, 62.9667, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Caixa2 (Banco)
	TextsFix[44] = CreateDynamic3DTextLabel("Caixa", Blue, 832.8134, 3.1777, 1004.1796, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Armas (OceanDM)
	TextsFix[45] = CreateDynamic3DTextLabel("{00FF00}Colt 45\n{FF0000}$100,00", -1, 2753.7021, -2437.1406, 13.6484, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[46] = CreateDynamic3DTextLabel("{00FF00}Desert Eagle\n{FF0000}$200,00", -1, 2753.6967, -2439.8679, 13.6484, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[47] = CreateDynamic3DTextLabel("{00FF00}M4 Assault Rifle\n{FF0000}$300,00", -1, 2753.6699, -2443.0380, 13.6431, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[48] = CreateDynamic3DTextLabel("{00FF00}Tec-9\n{FF0000}$200,00", -1, 2753.6694, -2446.5124, 13.6431, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Armas (SwatDM)
	TextsFix[49] = CreateDynamic3DTextLabel("{00FF00}Colt 45\n{FF0000}$100,00", -1, 1117.4693, -2013.2746, 74.4296, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[50] = CreateDynamic3DTextLabel("{00FF00}Desert Eagle\n{FF0000}$200,00", -1, 1117.3356, -2016.6213, 74.4296, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[51] = CreateDynamic3DTextLabel("{00FF00}M4 Assault Rifle\n{FF0000}$300,00", -1, 1117.3225, -2019.6262, 74.4296, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[52] = CreateDynamic3DTextLabel("{00FF00}Tec-9\n{FF0000}$200,00", -1, 1117.3601, -2022.7625, 74.4296, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Armas (NavioDM)
	TextsFix[53] = CreateDynamic3DTextLabel("{00FF00}Colt 45\n{FF0000}$100,00", -1, -2366.9602, 1554.6499, 2.1231, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[54] = CreateDynamic3DTextLabel("{00FF00}Desert Eagle\n{FF0000}$200,00", -1, -2369.7102, 1554.6767, 2.1171, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[55] = CreateDynamic3DTextLabel("{00FF00}M4 Assault Rifle\n{FF0000}$300,00", -1, -2372.5908, 1554.7182, 2.1171, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[56] = CreateDynamic3DTextLabel("{00FF00}Tec-9\n{FF0000}$200,00", -1, -2375.5415, 1554.7687, 2.1171, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Armas (ArenaDM)
	TextsFix[57] = CreateDynamic3DTextLabel("{00FF00}Colt 45\n{FF0000}$100,00", -1, 1346.6136, 2183.6079, 11.0234, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[58] = CreateDynamic3DTextLabel("{00FF00}Desert Eagle\n{FF0000}$200,00", -1, 1359.5778, 2183.3540, 11.0156, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[59] = CreateDynamic3DTextLabel("{00FF00}M4 Assault Rifle\n{FF0000}$300,00", -1, 1383.0432, 2184.9018, 11.0234, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	TextsFix[60] = CreateDynamic3DTextLabel("{00FF00}Tec-9\n{FF0000}$200,00", -1, 1381.6883, 2150.0434, 11.0234, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Detran
	TextsFix[61] = CreateDynamic3DTextLabel("'ALT' = Abrir", Blue, 1067.3000488281, 1357.4000244141, 12.60000038147, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	// Casamento
	TextsFix[62] = CreateDynamic3DTextLabel("Casamento", Blue, 826.9833, -2050.2131, 12.8671, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
	return 1;
}

// =================================================================================
stock DestroyCheckpointsFix()
{
	Loop(o, sizeof(CheckpointsFix))
	{
		DestroyDynamicCP(CheckpointsFix[o]);
	}
	return 1;
}

stock LoadCheckpointsFix()
{
	CheckpointsFix[0] = CreateDynamicCP(1685.827392, -2238.218994, 13.546875, 2.0, -1, -1, -1, 100.0); // checkaerols
	CheckpointsFix[1] = CreateDynamicCP(-1423.490844, -285.481903, 14.148437, 2.0, -1, -1, -1, 100.0); // checkaerosf
	CheckpointsFix[2] = CreateDynamicCP(1672.991333, 1447.842285, 10.786764, 2.0, -1, -1, -1, 100.0); // checkaerolv
	CheckpointsFix[3] = CreateDynamicCP(516.7604, -14.3393, 1001.5653, 2.0, -1, -1, -1, 100.0); // checkdroga
	CheckpointsFix[4] = CreateDynamicCP(-225.0073, 1404.3076, 27.7734, 2.0, -1, -1, -1, 100.0); // entrarb
	CheckpointsFix[5] = CreateDynamicCP(217.6061, -5.2586, 1001.2109, 2.0, -1, -1, -1, 100.0); // lojaderoupas
	CheckpointsFix[6] = CreateDynamicCP(207.0640, -129.7776, 1003.5078, 2.0, -1, -1, -1, 100.0); // lojaderoupassf
	CheckpointsFix[7] = CreateDynamicCP(207.6851, -100.7055, 1005.2578, 2.0, -1, -1, -1, 100.0); // lojaderoupaslv
	CheckpointsFix[8] = CreateDynamicCP(-28.1947, -89.2088, 1003.5469, 2.0, -1, -1, -1, 100.0); // utilidades
	CheckpointsFix[9] = CreateDynamicCP(-29.3117, -184.4816, 1003.5468, 2.0, -1, -1, -1, 100.0); // utilidadeslv
	CheckpointsFix[10] = CreateDynamicCP(363.1501, 173.5224, 1008.3828, 2.0, -1, -1, -1, 100.0); // profs
	CheckpointsFix[11] = CreateDynamicCP(325.2503, 307.0072, 999.1484, 2.0, -1, -1, -1, 100.0); // habs
	CheckpointsFix[12] = CreateDynamicCP(948.1397, -1383.5762, 13.3438, 2.0, -1, -1, -1, 100.0); // checkcarga
	CheckpointsFix[13] = CreateDynamicCP(2104.4692, -1806.4023, 13.5547, 2.0, -1, -1, -1, 100.0); // checkcarga1
	CheckpointsFix[14] = CreateDynamicCP(1207.7822, -890.3722, 43.0200, 2.0, -1, -1, -1, 100.0); // checkcarga2
	CheckpointsFix[15] = CreateDynamicCP(809.4305, -1629.9131, 13.3828, 2.0, -1, -1, -1, 100.0); // checkcarga3
	CheckpointsFix[16] = CreateDynamicCP(2395.8599, -1915.5037, 13.5469, 2.0, -1, -1, -1, 100.0); // checkcarga4
	CheckpointsFix[17] = CreateDynamicCP(2403.8787, -1507.0851, 24.0068, 2.0, -1, -1, -1, 100.0); // checkcarga5
	CheckpointsFix[18] = CreateDynamicCP(-60.2428, -1593.1473, 2.6107, 2.0, -1, -1, -1, 100.0); // checkdescarga
	CheckpointsFix[19] = CreateDynamicCP(332.6451, -2005.7535, -0.5313, 2.0, -1, -1, -1, 100.0); // ppesca1
	CheckpointsFix[20] = CreateDynamicCP(324.0051, -2007.7056, -0.5985, 2.0, -1, -1, -1, 100.0); // ppesca2
	CheckpointsFix[21] = CreateDynamicCP(316.0611, -2007.8269, -0.6277, 2.0, -1, -1, -1, 100.0); // ppesca3
	CheckpointsFix[22] = CreateDynamicCP(309.0059, -2006.6016, -0.4698, 2.0, -1, -1, -1, 100.0); // ppesca4
	CheckpointsFix[23] = CreateDynamicCP(300.2521, -2005.5605, -0.4878, 2.0, -1, -1, -1, 100.0); // ppesca5
	CheckpointsFix[24] = CreateDynamicCP(202.4053, -1875.5461, 3.7082, 2.0, -1, -1, -1, 100.0); // vpesca
	CheckpointsFix[25] = CreateDynamicCP(369.8319, -1670.0024, 32.7266, 5.0, -1, -1, -1, 100.0); // fimauto
	CheckpointsFix[26] = CreateDynamicCP(-44.7421, -1232.7123, 6.1583, 2.0, -1, -1, -1, 100.0); // ccaca
	CheckpointsFix[27] = CreateDynamicCP(-39.1540, -1356.1106, 2.4084, 2.0, -1, -1, -1, 100.0); // vcaca
	CheckpointsFix[28] = CreateDynamicCP(312.3051, -165.6246, 999.6010, 2.0, -1, -1, -1, 100.0); // menuammu
	CheckpointsFix[29] = CreateDynamicCP(381.5917, 170.8750, 1008.3828, 2.0, -1, -1, -1, 100.0); // checkmudancas
	CheckpointsFix[30] = CreateDynamicCP(1081.0103, -1697.9812, 13.5469, 2.0, -1, -1, -1, 100.0); // BibliotecaLS
	CheckpointsFix[31] = CreateDynamicCP(313.8173, -133.7504, 999.6016, 2.0, -1, -1, -1, 100.0); // ammuls
	CheckpointsFix[32] = CreateDynamicCP(662.9959, -1864.0854, 5.4609, 1.0, -1, -1, -1, 100.0); // checkacademials
	CheckpointsFix[33] = CreateDynamicCP(768.2420, -37.1310, 1000.6864, 1.0, -1, -1, -1, 100.0); // checklutassf
	CheckpointsFix[34] = CreateDynamicCP(774.9961, -59.2069, 1000.7183, 1.0, -1, -1, -1, 100.0); // checklutaslv
	CheckpointsFix[35] = CreateDynamicCP(767.0895, -1.5332, 1000.7189, 1.0, -1, -1, -1, 100.0); // checkacademiafc
 	// Caixas Eletrônicos
	CheckpointsFix[36] = CreateDynamicCP(2140.2858, -1169.5356, 23.9921, 2.0, -1, -1, -1, 100.0); // caixaeletronico1
	CheckpointsFix[37] = CreateDynamicCP(1690.8546, -2238.3508, 13.5396, 2.0, -1, -1, -1, 100.0); // caixaeletronico2
	CheckpointsFix[38] = CreateDynamicCP(-1420.2860, -288.8186, 14.1484, 2.0, -1, -1, -1, 100.0); // caixaeletronico3
	CheckpointsFix[39] = CreateDynamicCP(-2674.8896, 633.7269, 14.4531, 2.0, -1, -1, -1, 100.0); // caixaeletronico4
	CheckpointsFix[40] = CreateDynamicCP(1665.9318, 1483.0083, 10.7755, 2.0, -1, -1, -1, 100.0); // caixaeletronico5
	CheckpointsFix[41] = CreateDynamicCP(2019.4732, 1183.9390, 10.8203, 2.0, -1, -1, -1, 100.0); // caixaeletronico6
	CheckpointsFix[42] = CreateDynamicCP(-189.3441, 1209.9063, 19.7276, 2.0, -1, -1, -1, 100.0); // caixaeletronico7
	CheckpointsFix[43] = CreateDynamicCP(455.1850, -1484.9691, 31.0212, 2.0, -1, -1, -1, 100.0); // caixaeletronico8
	// PCs lan
	CheckpointsFix[44] = CreateDynamicCP(1418.8312, -1484.0288, 125.3672, 2.0, -1, -1, -1, 100.0); // pc1
	CheckpointsFix[45] = CreateDynamicCP(1423.7415, -1479.0685, 125.3672, 2.0, -1, -1, -1, 100.0); // pc2
	CheckpointsFix[46] = CreateDynamicCP(1428.6809, -1474.1244, 125.3672, 2.0, -1, -1, -1, 100.0); // pc3
	CheckpointsFix[47] = CreateDynamicCP(1433.0868, -1468.7441, 125.3672, 2.0, -1, -1, -1, 100.0); // pc4
	CheckpointsFix[48] = CreateDynamicCP(1425.5532, -1462.6206, 125.3672, 2.0, -1, -1, -1, 100.0); // pc5
	CheckpointsFix[49] = CreateDynamicCP(1420.7190, -1467.5155, 125.3672, 2.0, -1, -1, -1, 100.0); // pc6
	CheckpointsFix[50] = CreateDynamicCP(1415.1466, -1472.3024, 125.3672, 2.0, -1, -1, -1, 100.0); // pc7
	CheckpointsFix[51] = CreateDynamicCP(1410.7584, -1477.3362, 125.3672, 2.0, -1, -1, -1, 100.0); // pc8
	// Bancos
	CheckpointsFix[52] = CreateDynamicCP(243.7984, 63.7040, 1003.6406, 2.0, -1, -1, -1, 100.0); // bancoDPLS
	CheckpointsFix[53] = CreateDynamicCP(241.0865, 115.2853, 1003.2257, 2.0, -1, -1, -1, 100.0); // bancoDPSF
	CheckpointsFix[54] = CreateDynamicCP(289.6094, 187.9006, 1007.1794, 2.0, -1, -1, -1, 100.0); // bancoDPLV
	CheckpointsFix[55] = CreateDynamicCP(-218.0909, 974.2068, 19.4904, 2.0, -1, -1, -1, 100.0); // bancoDPFC
	CheckpointsFix[56] = CreateDynamicCP(379.9476, 176.7737, 1008.3828, 2.0, -1, -1, -1, 100.0); // bancoPref
	// Lavajatos
	CheckpointsFix[57] = CreateDynamicCP(1911.3218, -1775.3804, 13.3828, 4.0, -1, -1, -1, 100.0); // lavajato1
	CheckpointsFix[58] = CreateDynamicCP(2458.9067, -1460.9100, 24.0000, 4.0, -1, -1, -1, 100.0); // lavajato2
	CheckpointsFix[59] = CreateDynamicCP(1017.6859, -917.2276, 42.1797, 4.0, -1, -1, -1, 100.0); // lavajato3
	CheckpointsFix[60] = CreateDynamicCP(-111.0689, 1130.1112, 19.7422, 4.0, -1, -1, -1, 100.0); // lavajato4
	// Menus
	CheckpointsFix[61] = CreateDynamicCP(292.0380, 179.1761, 1007.1794, 2.0, -1, -1, -1, 100.0); // menudpLV
	CheckpointsFix[62] = CreateDynamicCP(246.3500, 117.6079, 1003.2187, 2.0, -1, -1, -1, 100.0); // menudpSF
	CheckpointsFix[63] = CreateDynamicCP(248.7789, 69.1560, 1003.6406, 2.0, -1, -1, -1, 100.0); // menudp
	CheckpointsFix[64] = CreateDynamicCP(830.6135, 0.2755, 1004.1796, 2.0, -1, -1, -1, 100.0); // menubanco
	CheckpointsFix[65] = CreateDynamicCP(1112.6210, -1836.1715, 16.6007, 2.0, -1, -1, -1, 100.0); // checkhotel
	CheckpointsFix[66] = CreateDynamicCP(1363.4012, -1649.7007, 13.3828, 2.0, -1, -1, -1, 100.0); // oficinals
	CheckpointsFix[67] = CreateDynamicCP(-266.9475, 1541.9738, 75.3593, 2.0, -1, -1, -1, 100.0); // ofdriftlv
	// VIP LS
	CheckpointsFix[68] = CreateDynamicCP(1568.0254, -1896.3612, 13.5605, 1.0, -1, -1, -1, 100.0); // barvipls
	CheckpointsFix[69] = CreateDynamicCP(455.1761, -20.7207, 1000.7344, 1.0, -1, -1, -1, 100.0); // barviplsdentro
	CheckpointsFix[70] = CreateDynamicCP(451.9336, -10.9036, 1000.7344, 1.0, -1, -1, -1, 100.0); // armasvipls
	// VIP SF
	CheckpointsFix[71] = CreateDynamicCP(-2155.2612, 645.3902, 52.3672, 1.0, -1, -1, -1, 100.0); // barvipsf
	CheckpointsFix[72] = CreateDynamicCP(1212.2075, -27.4090, 1000.9531, 1.0, -1, -1, -1, 100.0); // barvipsfdentro
	CheckpointsFix[73] = CreateDynamicCP(1207.6324, -40.8146, 1000.9531, 1.0, -1, -1, -1, 100.0); // armasvipsf
	// VIP LV
	CheckpointsFix[74] = CreateDynamicCP(2489.9238, 2063.7310, 10.8203, 1.0, -1, -1, -1, 100.0); // barviplv
	CheckpointsFix[75] = CreateDynamicCP(965.2394, -53.1904, 1001.1246, 1.0, -1, -1, -1, 100.0); // barviplvdentro
	CheckpointsFix[76] = CreateDynamicCP(957.9706, -48.7545, 1001.1172, 1.0, -1, -1, -1, 100.0); // armasviplv
	CheckpointsFix[77] = CreateDynamicCP(832.8134, 3.1777, 1004.1796, 2.0, -1, -1, -1, 100.0); // menubanco2
	// Faculdades
	CheckpointsFix[78] = CreateDynamicCP(1219.2316, -1813.5012, 16.5937, 2.0, -1, -1, -1, 100.0); // FaculdadeLS
	// Míssil Controle
	CheckpointsFix[79] = CreateDynamicCP(-1289.2860, 490.3437, 11.1953, 2.0, -1, -1, -1, 100.0); // Pier69
	CheckpointsFix[80] = CreateDynamicCP(213.4452, 1822.7591, 6.4140, 2.0, -1, -1, -1, 100.0); // Área51
	// Hotel
	CheckpointsFix[81] = CreateDynamicCP(2232.4226, -1159.8332, 25.8906, 2.0, -1, -1, -1, 100.0); // checkhotel2
	// Casamento
	CheckpointsFix[82] = CreateDynamicCP(826.9833, -2050.2131, 12.8671, 5.0, -1, -1, -1, 100.0);
	return 1;
}

// =================================================================================
stock DestroyGangZonesFix()
{
	Loop(o, sizeof(GangZonesFix))
	{
		GangZoneDestroy(GangZonesFix[o]);
	}
	return 1;
}

stock LoadGangZonesFix()
{
	GangZonesFix[1] = GangZoneCreate(2016.010, -1161.922, 2324.010, -923.518);
	GangZonesFix[2] = GangZoneCreate(-2545.777, 1483.09, -2230.474, 1623.225);
	GangZonesFix[3] = GangZoneCreate(1267.535, 2084.409, 1408.109, 2235.263);
	GangZonesFix[4] = GangZoneCreate(1101.976, -2096.375, 1318.738, -1993.733);
	GangZonesFix[5] = GangZoneCreate(2649.73, -2593.79, 2794.238, -2337.187);
	GangZonesFix[6] = GangZoneCreate(1821.749, -1483.09, 2113.696, -1331.278);
	GangZonesFix[7] = GangZoneCreate(1383.386, -1772.66, 1596.345, -1583.168); // pref
	GangZonesFix[8] = GangZoneCreate(1048.736, -1745.026, 1189.441, -1693.705); // bi
	GangZonesFix[9] = GangZoneCreate(1178.033, -1875.301, 1345.357, -1705.548); // facul
	return 1;
}

// =================================================================================
stock DestroyMapIconsFix()
{
	Loop(o, sizeof(MapIconsFix))
	{
		DestroyDynamicMapIcon(MapIconsFix[o]);
	}
	return 1;
}

stock LoadMapIconsFix()
{
	MapIconsFix[0] = CreateDynamicMapIcon(70.4469, 1218.4811, 18.8124, 55, 0, -1, -1, -1, 100.0); // Posto 1
	MapIconsFix[1] = CreateDynamicMapIcon(1942.0170, -1775.6377, 13.6406, 55, 0, -1, -1, -1, 100.0); // Posto 2
	MapIconsFix[2] = CreateDynamicMapIcon(1006.5010, -936.5832, 42.3281, 55, 0, -1, -1, -1, 100.0); // Posto 3
	MapIconsFix[3] = CreateDynamicMapIcon(-90.9854, -1170.5535, 2.3909, 55, 0, -1, -1, -1, 100.0); // Posto 4
	MapIconsFix[4] = CreateDynamicMapIcon(-1675.9628, 411.4728, 6.7439, 55, 0, -1, -1, -1, 100.0); // Posto 5
	MapIconsFix[5] = CreateDynamicMapIcon(-2410.6328, 978.8200, 45.4609, 55, 0, -1, -1, -1, 100.0); // Posto 6
	MapIconsFix[6] = CreateDynamicMapIcon(2202.2441, 2475.3787, 10.8203, 55, 0, -1, -1, -1, 100.0); // Posto 7
	MapIconsFix[7] = CreateDynamicMapIcon(2112.8740, 920.8792, 10.8203, 55, 0, -1, -1, -1, 100.0); // Posto 8
	MapIconsFix[8] = CreateDynamicMapIcon(1596.6265, 2198.6599, 10.7254, 55, 0, -1, -1, -1, 100.0); // Posto 9
	MapIconsFix[9] = CreateDynamicMapIcon(615.7462, 1689.9661, 6.9922, 55, 0, -1, -1, -1, 100.0); // Posto 10
	MapIconsFix[10] = CreateDynamicMapIcon(2638.4482, 1100.8029, 10.9609, 55, 0, -1, -1, -1, 100.0); // Posto 11
	MapIconsFix[11] = CreateDynamicMapIcon(1382.3641, 459.0780, 20.3452, 55, 0, -1, -1, -1, 100.0); // Posto 12
	MapIconsFix[12] = CreateDynamicMapIcon(655.5922, -565.3943, 16.3359, 55, 0, -1, -1, -1, 100.0); // Posto 13
	// Lavajatos
	MapIconsFix[13] = CreateDynamicMapIcon(1911.3218, -1775.3804, 13.3828, 56, 0, -1, -1, -1, 100.0); // Lava Jato 1
	MapIconsFix[14] = CreateDynamicMapIcon(2458.9067, -1460.9100, 24.0000, 56, 0, -1, -1, -1, 100.0); // Lava Jato 2
	MapIconsFix[15] = CreateDynamicMapIcon(1017.6859, -917.2276, 42.1797, 56, 0, -1, -1, -1, 100.0); // Lava Jato 3
	MapIconsFix[16] = CreateDynamicMapIcon(-111.0689, 1130.1112, 19.7422, 56, 0, -1, -1, -1, 100.0); // Lava Jato 4
	// Públicos
	MapIconsFix[17] = CreateDynamicMapIcon(1481.0127, -1771.4366, 18.7958, 23, 0, -1, -1, -1, 100.0); // Prefeitura LS
	MapIconsFix[18] = CreateDynamicMapIcon(-2765.9091, 375.5550, 6.3346, 23, 0, -1, -1, -1, 100.0); // Prefeitura SF
	MapIconsFix[19] = CreateDynamicMapIcon(2447.1237, 2376.3603, 12.1635, 23, 0, -1, -1, -1, 100.0); // Prefeitura LV
	MapIconsFix[20] = CreateDynamicMapIcon(-205.7683, 1062.0795, 19.7422, 23, 0, -1, -1, -1, 100.0); // Prefeitura FC
	MapIconsFix[21] = CreateDynamicMapIcon(1555.4916, -1675.6893, 16.1953, 30, 0, -1, -1, -1, 100.0); // DP LS
	MapIconsFix[22] = CreateDynamicMapIcon(-1605.6397, 711.1011, 13.8671, 30, 0, -1, -1, -1, 100.0); // DP SF
	MapIconsFix[23] = CreateDynamicMapIcon(2287.1032, 2431.6791, 10.8203, 30, 0, -1, -1, -1, 100.0); // DP LV
	MapIconsFix[24] = CreateDynamicMapIcon(-217.8244, 979.1748, 19.5040, 30, 0, -1, -1, -1, 100.0); // DP FC
	MapIconsFix[25] = CreateDynamicMapIcon(1411.9444, -1699.8991, 13.5394, 52, 0, -1, -1, -1, 100.0); // Banco LS 1
	MapIconsFix[26] = CreateDynamicMapIcon(1153.9837, -1772.2202, 16.5991, 52, 0, -1, -1, -1, 100.0); // Banco LS 2
	MapIconsFix[27] = CreateDynamicMapIcon(-1881.1000, 822.7247, 35.1773, 52, 0, -1, -1, -1, 100.0); // Banco SF 1
	MapIconsFix[28] = CreateDynamicMapIcon(-2649.3630, 376.0701, 6.1592, 52, 0, -1, -1, -1, 100.0); // Banco SF 2
	MapIconsFix[29] = CreateDynamicMapIcon(1930.4991, 1345.2598, 9.9687, 52, 0, -1, -1, -1, 100.0); // Banco LV 1
	MapIconsFix[30] = CreateDynamicMapIcon(2183.9082, 2295.4201, 10.8203, 52, 0, -1, -1, -1, 100.0); // Banco LV 2
	MapIconsFix[31] = CreateDynamicMapIcon(2140.2858, -1169.5356, 23.9921, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 1
	MapIconsFix[32] = CreateDynamicMapIcon(1690.8546, -2238.3508, 13.5396, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 2
	MapIconsFix[33] = CreateDynamicMapIcon(-1420.2860, -288.8186, 14.1484, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 3
	MapIconsFix[34] = CreateDynamicMapIcon(-2674.8896, 633.7269, 14.4531, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 4
	MapIconsFix[35] = CreateDynamicMapIcon(1665.9318, 1483.0083, 10.7755, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 5
	MapIconsFix[36] = CreateDynamicMapIcon(2019.5732, 1183.8106, 10.8203, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 6
	MapIconsFix[37] = CreateDynamicMapIcon(-188.8505, 1209.7543, 19.7179, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 7
	MapIconsFix[38] = CreateDynamicMapIcon(455.1850, -1484.9691, 31.0212, 52, 0, -1, -1, -1, 100.0); // Caixa Eletrônico 8
	MapIconsFix[39] = CreateDynamicMapIcon(-319.2404, 1049.3226, 25.0135, 22, 0, -1, -1, -1, 100.0); // Hospital 1
	MapIconsFix[40] = CreateDynamicMapIcon(1172.2400, -1323.0621, 15.4024, 22, 0, -1, -1, -1, 100.0); // Hospital 2
	// Novos Bairros
	MapIconsFix[41] = CreateDynamicMapIcon(1081.0103, -1697.9812, 13.5469, 2, 0, -1, -1, -1, 100.0); // Faculdade LS
	MapIconsFix[42] = CreateDynamicMapIcon(662.9959, -1864.0854, 5.4609, 54, 0, -1, -1, -1, 100.0); // Academia LS
	MapIconsFix[42] = CreateDynamicMapIcon(1472.3867,-1708.8785,15.1903, 54, 0, -1, -1, -1, 100.0); // Academia LS
	MapIconsFix[43] = CreateDynamicMapIcon(1352.3578, -1758.7310, 13.4808, 40, 0, -1, -1, -1, 100.0); // Utilidades
	MapIconsFix[44] = CreateDynamicMapIcon(1568.0254, -1896.3612, 13.5605, 23, 0, -1, -1, -1, 100.0); // Bar Vip LS
	MapIconsFix[45] = CreateDynamicMapIcon(-2155.2612, 645.3902, 52.3672, 23, 0, -1, -1, -1, 100.0); // Bar Vip SF
	MapIconsFix[46] = CreateDynamicMapIcon(2489.9238, 2063.7310, 10.8203, 23, 0, -1, -1, -1, 100.0); // Bar Vip LV
	MapIconsFix[47] = CreateDynamicMapIcon(-315.8872, 829.8916, 14.2422, 6, 0, -1, -1, -1, 100.0); // Ammunation
	MapIconsFix[48] = CreateDynamicMapIcon(1368.2213, -1279.7192, 13.5469, 6, 0, -1, -1, -1, 100.0); // Ammunation LS
	MapIconsFix[49] = CreateDynamicMapIcon(2033.7764, -1402.7045, 17.2910, 22, 0, -1, -1, -1, 100.0); // Jefferson
	MapIconsFix[50] = CreateDynamicMapIcon(1160.4045, -1693.9617, 14.0507, 45, 0, -1, -1, -1, 100.0); // Shop LS
	MapIconsFix[51] = CreateDynamicMapIcon(1804.5730, -1711.6149, 13.5415, 17, 0, -1, -1, -1, 100.0); // Bar LS
	MapIconsFix[52] = CreateDynamicMapIcon(1112.6210, -1836.1715, 16.6007, 16, 0, -1, -1, -1, 100.0); // Hotel LS
	MapIconsFix[53] = CreateDynamicMapIcon(1363.4012, -1649.7007, 13.3828, 27, 0, -1, -1, -1, 100.0); // Oficina
	MapIconsFix[54] = CreateDynamicMapIcon(1478.6033, -1610.0619, 14.0393, 33, 0, -1, -1, -1, 100.0); // Lan House
	MapIconsFix[55] = CreateDynamicMapIcon(2020.0604, 1007.7492, 10.8203, 43, 0, -1, -1, -1, 100.0); // Cassino
	MapIconsFix[56] = CreateDynamicMapIcon(316.0611, -2007.8269, -0.6277, 9, 0, -1, -1, -1, 100.0); // Area de Pesca
	MapIconsFix[57] = CreateDynamicMapIcon(202.4053, -1875.5461, 3.7082, 20, 0, -1, -1, -1, 100.0); // Vender Pesca
	MapIconsFix[58] = CreateDynamicMapIcon(-44.7421, -1232.7123, 6.1583, 16, 0, -1, -1, -1, 100.0); // Area de Caça
	MapIconsFix[59] = CreateDynamicMapIcon(-39.1540, -1356.1106, 2.4084, 62, 0, -1, -1, -1, 100.0); // Vender Caça
	MapIconsFix[60] = CreateDynamicMapIcon(-60.2428, -1593.1473, 2.6107, 50, 0, -1, -1, -1, 100.0); // Vender Carga
	MapIconsFix[61] = CreateDynamicMapIcon(369.8319, -1670.0024, 32.7266, 19, 0, -1, -1, -1, 100.0); // Autoescola Fim
	MapIconsFix[62] = CreateDynamicMapIcon(2156.6140, -1072.0437, 39.9844, 59, 0, -1, -1, -1, 100.0); // Boca de Fumo
	MapIconsFix[63] = CreateDynamicMapIcon(-1694.5627, 951.8869, 24.8906, 45, 0, -1, -1, -1, 100.0); // Loja de Roupas SF
	MapIconsFix[64] = CreateDynamicMapIcon(2101.9236, 2257.3789, 11.0234, 45, 0, -1, -1, -1, 100.0); // Loja de Roupas LV
	MapIconsFix[65] = CreateDynamicMapIcon(1833.7753, -1842.5490, 13.5781, 40, 0, -1, -1, -1, 100.0); // Utilidades LS
	MapIconsFix[66] = CreateDynamicMapIcon(613.0466, -494.9978, 16.3359, 40, 0, -1, -1, -1, 100.0); // Utilidades LV
	MapIconsFix[67] = CreateDynamicMapIcon(-144.5538, 1078.8065, 20.4922, 54, 0, -1, -1, -1, 100.0); // Academia FC
	MapIconsFix[68] = CreateDynamicMapIcon(-2270.3796, -155.8050, 35.3203, 54, 0, -1, -1, -1, 100.0); // Academia SF
	MapIconsFix[69] = CreateDynamicMapIcon(2581.5579, 1060.5682, 11.7752, 54, 0, -1, -1, -1, 100.0); // Academia LV
	MapIconsFix[70] = CreateDynamicMapIcon(1219.2316, -1813.5012, 16.5937, 36, 0, -1, -1, -1, 100.0); // Faculdade LS
	MapIconsFix[71] = CreateDynamicMapIcon(2232.4226, -1159.8332, 25.8906, 16, 0, -1, -1, -1, 100.0); // Hotel 2 LS
	MapIconsFix[72] = CreateDynamicMapIcon(826.9833, -2050.2131, 12.8671, 21, 0, -1, -1, -1, 100.0); // Casamento
	return 1;
}

// =================================================================================
stock DestroyPickupsFix()
{
	Loop(o, sizeof(PickupsFix))
	{
		DestroyDynamicPickup(PickupsFix[o]);
	}
	return 1;
}

stock LoadPickupsFix()
{
	PickupsFix[0] = CreateDynamicPickup(1239, 1, 322.209899, 302.915252, 999.148437, -1, -1, -1, 200.0); // DPDentro
	PickupsFix[1] = CreateDynamicPickup(1247, 1, -217.8244, 979.1748, 19.5040, -1, -1, -1, 200.0); // DPFora
	PickupsFix[2] = CreateDynamicPickup(1276, 1, 1352.3578, -1758.7310, 13.4808, -1, -1, -1, 200.0); // UtlDentro
	PickupsFix[3] = CreateDynamicPickup(1276, 1, -31.1494, -91.2671, 1003.5469, -1, -1, -1, 200.0); // UtlFora
	PickupsFix[4] = CreateDynamicPickup(1241, 1, 2156.6140, -1072.0437, 39.9844, -1, -1, -1, 200.0); // entrarboca
	PickupsFix[5] = CreateDynamicPickup(1241, 1, 513.9041, -7.5897, 1001.5653, -1, -1, -1, 200.0); // sairboca
	PickupsFix[6] = CreateDynamicPickup(1239, 1, -205.7683, 1062.0795, 19.7422, -1, -1, -1, 200.0); // entrarpreffc
	PickupsFix[7] = CreateDynamicPickup(1239, 1, 389.2030, 173.7325, 1008.3828, -1, -1, -1, 200.0); // sairpref
	PickupsFix[8] = CreateDynamicPickup(1239, 1, 1162.9867, -1694.0570, 14.1719, -1, -1, -1, 200.0); // entrarroupas
	PickupsFix[9] = CreateDynamicPickup(1239, 1, 227.5593, -8.0934, 1002.2109, -1, -1, -1, 200.0); // sairroupas
	PickupsFix[10] = CreateDynamicPickup(1239, 1, 2020.0604, 1007.7492, 10.8203, -1, -1, -1, 200.0); // cassinoentrar
	PickupsFix[11] = CreateDynamicPickup(1239, 1, 2018.9744, 1017.8521, 996.8750, -1, -1, -1, 200.0); // cassinosair
	PickupsFix[12] = CreateDynamicPickup(1239, 1, -144.0466, 1224.7881, 19.8992, -1, -1, -1, 200.0); // entrarbar
	PickupsFix[13] = CreateDynamicPickup(1239, 1, -229.2793, 1401.2454, 27.7656, -1, -1, -1, 200.0); // sairbar
	PickupsFix[14] = CreateDynamicPickup(1239, 1, -144.5538, 1078.8065, 20.4922, -1, -1, -1, 200.0); // entrargny
	PickupsFix[15] = CreateDynamicPickup(1239, 1, 772.3262, -5.1436, 1000.7287, -1, -1, -1, 200.0); // sairgny
	PickupsFix[16] = CreateDynamicPickup(1239, 1, 366.7318, 188.4142, 1008.3828, -1, -1, -1, 200.0); // entrarentv
	PickupsFix[17] = CreateDynamicPickup(1239, 1, 366.3933, 197.1831, 1008.3828, -1, -1, -1, 200.0); // sairentv
	PickupsFix[18] = CreateDynamicPickup(1239, 1, -315.8872, 829.8916, 14.2422, -1, -1, -1, 200.0); // entrarammu
	PickupsFix[19] = CreateDynamicPickup(1239, 1, 316.3784, -170.0223, 999.5938, -1, -1, -1, 200.0); // sairammu
	PickupsFix[20] = CreateDynamicPickup(1247, 1, 1555.4916, -1675.6893, 16.1953, -1, -1, -1, 200.0); // entrardpls
	PickupsFix[21] = CreateDynamicPickup(1247, 1, 246.9346, 62.4051, 1003.6406, -1, -1, -1, 200.0); // sairdpls
	PickupsFix[22] = CreateDynamicPickup(1247, 1, 2287.1032, 2431.6791, 10.8203, -1, -1, -1, 200.0); // entrardplv
	PickupsFix[23] = CreateDynamicPickup(1247, 1, 288.7537, 167.5943, 1007.1718, -1, -1, -1, 200.0); // sairdplv
	PickupsFix[24] = CreateDynamicPickup(1247, 1, -1605.6397, 711.1011, 13.8671, -1, -1, -1, 200.0); // entrardpsf
	PickupsFix[25] = CreateDynamicPickup(1247, 1, 246.4446, 107.8163, 1003.2187, -1, -1, -1, 200.0); // sairdpsf
	PickupsFix[26] = CreateDynamicPickup(1239, 1, 613.0466, -494.9978, 16.3359, -1, -1, -1, 200.0); // entrarutllv
	PickupsFix[27] = CreateDynamicPickup(1239, 1, -25.8294, -187.8489, 1003.5469, -1, -1, -1, 200.0); // sairutllv
	PickupsFix[28] = CreateDynamicPickup(1239, 1, -2270.3796, -155.8050, 35.3203, -1, -1, -1, 200.0); // entraracademiasf
	PickupsFix[28] = CreateDynamicPickup(1239, 1, 1472.3867,-1708.8785,15.1903, -1, -1, -1, 200.0); // academia
	PickupsFix[29] = CreateDynamicPickup(1239, 1, 774.2104, -50.4546, 1000.5859, -1, -1, -1, 200.0); // sairacademiasf
	PickupsFix[30] = CreateDynamicPickup(1239, 1, 2581.5579, 1060.5682, 11.7752, -1, -1, -1, 200.0); // entraracademialv
	PickupsFix[31] = CreateDynamicPickup(1239, 1, 773.7811, -78.7663, 1000.6627, -1, -1, -1, 200.0); // sairacademialv
	PickupsFix[32] = CreateDynamicPickup(1239, 1, -2214.5374, 198.1041, 35.3203, -1, -1, -1, 200.0); // entrarbarsf
	PickupsFix[33] = CreateDynamicPickup(1239, 1, -2442.6272, 755.3217, 35.1786, -1, -1, -1, 200.0); // entrarutlsf
	PickupsFix[34] = CreateDynamicPickup(1239, 1, 6.0895, -31.3284, 1003.5494, -1, -1, -1, 200.0); // sairutlsf
	PickupsFix[35] = CreateDynamicPickup(1239, 1, -1694.5627, 951.8869, 24.8906, -1, -1, -1, 200.0); // entrarroupassf
	PickupsFix[36] = CreateDynamicPickup(1239, 1, 206.9726, -139.6745, 1003.5078, -1, -1, -1, 200.0); // sairroupassf
	PickupsFix[37] = CreateDynamicPickup(1239, 1, 2369.0422, 1984.4071, 10.8203, -1, -1, -1, 200.0); // entrarbarlv
	PickupsFix[38] = CreateDynamicPickup(1239, 1, 2101.9236, 2257.3789, 11.0234, -1, -1, -1, 200.0); // entrarroupaslv
	PickupsFix[39] = CreateDynamicPickup(1239, 1, 207.6383, -110.7934, 1005.1328, -1, -1, -1, 200.0); // sairroupaslv
	PickupsFix[40] = CreateDynamicPickup(1239, 1, 1484.3788,-1777.2107,13.6554, -1, -1, -1, 200.0); // entrarprefls
	PickupsFix[41] = CreateDynamicPickup(1239, 1, -2765.9091, 375.5550, 6.3346, -1, -1, -1, 200.0); // entrarprefsf
	PickupsFix[42] = CreateDynamicPickup(1239, 1, 2447.1237, 2376.3603, 12.1635, -1, -1, -1, 200.0); // entrarpreflv
	PickupsFix[43] = CreateDynamicPickup(1239, 1, 1804.7009, -1710.3408, 13.5417, -1, -1, -1, 200.0); // entrarbarls
	PickupsFix[44] = CreateDynamicPickup(1239, 1, 1833.7753, -1842.5490, 13.5781, -1, -1, -1, 200.0); // entrarutlls
	PickupsFix[45] = CreateDynamicPickup(1313, 1, 1368.2213, -1279.7192, 13.5469, -1, -1, -1, 200.0); // entrarammuls
	PickupsFix[46] = CreateDynamicPickup(1318, 1, 315.6995, -143.8061, 999.6016, -1, -1, -1, 200.0); // sairammuls
	PickupsFix[47] = CreateDynamicPickup(1254, 1, 1478.6033, -1610.0619, 14.0393, -1, -1, -1, 200.0); // entrarlan
	PickupsFix[48] = CreateDynamicPickup(1254, 1, 1414.3599, -1480.8058, 125.3672, -1, -1, -1, 200.0); // sairlan
	PickupsFix[49] = CreateDynamicPickup(1274, 1, 1411.9444, -1699.8991, 13.5394, -1, -1, -1, 200.0); // Banco LS 1
	PickupsFix[50] = CreateDynamicPickup(1274, 1, 1153.9837, -1772.2202, 16.5991, -1, -1, -1, 200.0); // Banco LS 2
	PickupsFix[51] = CreateDynamicPickup(1274, 1, -1881.1000, 822.7247, 35.1773, -1, -1, -1, 200.0); // Banco SF 1
	PickupsFix[52] = CreateDynamicPickup(1274, 1, -2649.3630, 376.0701, 6.1592, -1, -1, -1, 200.0); // Banco SF 2
	PickupsFix[53] = CreateDynamicPickup(1274, 1, 1930.4991, 1345.2598, 9.9687, -1, -1, -1, 200.0); // Banco LV 1
	PickupsFix[54] = CreateDynamicPickup(1274, 1, 2183.9082, 2295.4201, 10.8203, -1, -1, -1, 200.0); // Banco LV 2
	PickupsFix[55] = CreateDynamicPickup(1318, 1, 834.0955, 7.3674, 1004.1870, -1, -1, -1, 200.0); // sairbanco
	// Armas (Favela)
	PickupsFix[56] = CreateDynamicPickup(346, 1, 2157.2561, -996.0366, 62.9568, -1, -1, -1, 200.0); // Colt 45 Pistol
	PickupsFix[57] = CreateDynamicPickup(348, 1, 2161.1899, -996.7966, 62.9597, -1, -1, -1, 200.0); // Desert Eagle
	PickupsFix[58] = CreateDynamicPickup(356, 1, 2165.7866, -997.6691, 62.9630, -1, -1, -1, 200.0); // M4 Assault Rifle
	PickupsFix[59] = CreateDynamicPickup(372, 1, 2170.7048, -998.6024, 62.9667, -1, -1, -1, 200.0); // Tec-9
	// Armas (OceanDM)
	PickupsFix[60] = CreateDynamicPickup(346, 1, 2753.7021, -2437.1406, 13.6484, -1, -1, -1, 200.0); // Colt 45 Pistol
	PickupsFix[61] = CreateDynamicPickup(348, 1, 2753.6967, -2439.8679, 13.6484, -1, -1, -1, 200.0); // Desert Eagle
	PickupsFix[62] = CreateDynamicPickup(356, 1, 2753.6699, -2443.0380, 13.6431, -1, -1, -1, 200.0); // M4 Assault Rifle
	PickupsFix[63] = CreateDynamicPickup(372, 1, 2753.6694, -2446.5124, 13.6431, -1, -1, -1, 200.0); // Tec-9
	// Armas (SwatDM)
	PickupsFix[64] = CreateDynamicPickup(346, 1, 1117.4693, -2013.2746, 74.4296, -1, -1, -1, 200.0); // Colt 45 Pistol
	PickupsFix[65] = CreateDynamicPickup(348, 1, 1117.3356, -2016.6213, 74.4296, -1, -1, -1, 200.0); // Desert Eagle
	PickupsFix[66] = CreateDynamicPickup(356, 1, 1117.3225, -2019.6262, 74.4296, -1, -1, -1, 200.0); // M4 Assault Rifle
	PickupsFix[67] = CreateDynamicPickup(372, 1, 1117.3601, -2022.7625, 74.4296, -1, -1, -1, 200.0); // Tec-9
	// Armas (NavioDM)
	PickupsFix[68] = CreateDynamicPickup(346, 1, -2366.9602, 1554.6499, 2.1231, -1, -1, -1, 200.0); // Colt 45 Pistol
	PickupsFix[69] = CreateDynamicPickup(348, 1, -2369.7102, 1554.6767, 2.1171, -1, -1, -1, 200.0); // Desert Eagle
	PickupsFix[70] = CreateDynamicPickup(356, 1, -2372.5908, 1554.7182, 2.1171, -1, -1, -1, 200.0); // M4 Assault Rifle
	PickupsFix[71] = CreateDynamicPickup(372, 1, -2375.5415, 1554.7687, 2.1171, -1, -1, -1, 200.0); // Tec-9
	// Armas (ArenaDM)
	PickupsFix[72] = CreateDynamicPickup(346, 1, 1346.6136, 2183.6079, 11.0234, -1, -1, -1, 200.0); // Colt 45 Pistol
	PickupsFix[73] = CreateDynamicPickup(348, 1, 1359.5778, 2183.3540, 11.0156, -1, -1, -1, 200.0); // Desert Eagle
	PickupsFix[74] = CreateDynamicPickup(356, 1, 1383.0432, 2184.9018, 11.0234, -1, -1, -1, 200.0); // M4 Assault Rifle
	PickupsFix[75] = CreateDynamicPickup(372, 1, 1381.6883, 2150.0434, 11.0234, -1, -1, -1, 200.0); // Tec-9
	return 1;
}

// =================================================================================
stock DestroyObjectsFix()
{
	Loop(o, sizeof(ObjectsFix))
	{
		DestroyDynamicObject(ObjectsFix[o]);
	}
	return 1;
}

stock LoadObjectsFix()
{
	// Grove
	ObjectsFix[0] = CreateDynamicObject(986, 666.637, -1215.689, 17.622, 0.0, 0.0, 67.500, -1, -1, -1, 200.0);
	// DP LS
	ObjectsFix[1] = CreateDynamicObject(3749, 1542.689, -1627.642, 18.241, 0.0, 0.0, -90.000, -1, -1, -1, 200.0);
	// Oficina LS
	ObjectsFix[2] = CreateDynamicObject(3359, 1362.994, -1650.849, 12.384, 0.0, 0.0, 90.000, -1, -1, -1, 200.0);
	ObjectsFix[3] = CreateDynamicObject(11393, 1362.560, -1655.080, 13.830, 0.0, 0.0, -180.000, -1, -1, -1, 200.0);
	ObjectsFix[4] = CreateDynamicObject(14826, 1368.999, -1658.191, 13.147, 0.0, 0.0, -90.000, -1, -1, -1, 200.0);
	// Caixas Eletrônicos nas Ruas
	ObjectsFix[5] = CreateDynamicObject(2942, 2139.3821, -1169.5771, 23.6351, 0.0000, 0.0000, 90.0000, -1, -1, -1, 200.0); // 1
	ObjectsFix[6] = CreateDynamicObject(2942, 1690.8522, -2237.4712, 13.1825, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0); // 2
	ObjectsFix[7] = CreateDynamicObject(2942, -1419.7765, -288.1626, 13.7913, 0.0000, 0.0000, 320.0000, -1, -1, -1, 200.0); // 3
	ObjectsFix[8] = CreateDynamicObject(2942, -2674.9651, 634.6716, 14.0960, 0.0000, 0.0000, 359.9988, -1, -1, -1, 200.0); // 4
	ObjectsFix[9] = CreateDynamicObject(2942, 1665.0559, 1482.9249, 10.4189, 0.0000, 0.0000, 89.9945, -1, -1, -1, 200.0); // 5
	ObjectsFix[10] = CreateDynamicObject(2942, 2018.9330, 1184.6599, 10.4632, 0.0000, 0.0000, 32.0000, -1, -1, -1, 200.0); // 6
	ObjectsFix[11] = CreateDynamicObject(2942, -189.4092, 1210.7380, 19.3851, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0); // 7
	ObjectsFix[12] = CreateDynamicObject(2942, 456.1587, -1484.6182, 30.6635, 0.0000, 0.0000, 287.9977, -1, -1, -1, 200.0); // 8
	// Caixas Eletrônicos nas DP's e Pref's
	ObjectsFix[13] = CreateDynamicObject(2942, 243.8501, 62.6744, 1003.2835, 0.0000, 0.0000, 180.0000, -1, -1, -1, 200.0);
	ObjectsFix[14] = CreateDynamicObject(2942, 240.1574, 115.2575, 1002.8616, 0.0000, 0.0000, 90.0000, -1, -1, -1, 200.0);
	ObjectsFix[15] = CreateDynamicObject(2942, 289.5603, 188.9028, 1006.8223, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);
	ObjectsFix[16] = CreateDynamicObject(2942, -219.2955, 974.1413, 19.1327, 0.0000, 0.0000, 90.0000, -1, -1, -1, 200.0);
	ObjectsFix[17] = CreateDynamicObject(2942, 379.9217, 177.6636, 1008.0257, 0.0000, 0.0000, 0.0000, -1, -1, -1, 200.0);
	// Elevador e Portões
	ObjectsFix[18] = CreateDynamicObject(2927, 1570.8325195313, -1635.4766845703, 12.728549957275, 90.0, 0.0, 0.0, -1, -1, -1, 200.0);
	ObjectsFix[19] = CreateDynamicObject(980, 1541.9384765625, -1627.7314453125, 15.156204223633, 0.0, 0.0, 90.0, -1, -1, -1, 200.0);
	ObjectsFix[20] = CreateDynamicObject(980, 1588.0791015625, -1638.140625, 15.172611236572, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	// Faculdade
	ObjectsFix[21] = CreateDynamicObject(980, 1213.7843017578, -1842.4782714844, 15.156204223633, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	ObjectsFix[22] = CreateDynamicObject(980, 1270.2001953125, -1842.5798339844, 15.156204223633, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	// Detran
	ObjectsFix[23] = CreateDynamicObject(3749, 1067.3000488281, 1359.1999511719, 15.60000038147, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	ObjectsFix[24] = CreateDynamicObject(980, 1067.3000488281, 1357.4000244141, 12.60000038147, 0.0, 0.0, 0.0, -1, -1, -1, 200.0);
	return 1;
}

// =================================================================================
stock LoadDynamicObjectsFromFile(filename[])
{
    new File:file_ptr, line[256], modelid, Float:SpawnX, Float:SpawnY, Float:SpawnZ, Float:SpawnRotX, Float:SpawnRotY, Float:SpawnRotZ, objects_loaded;
    file_ptr = fopen(filename, io_read);
    if(!file_ptr)
	{
		return printf("ERRO! Falha ao carregar objetos do arquivo %s (O arquivo não existe no diretório scriptfiles)!", filename);
	}
	while(fread(file_ptr, line) > 0)
    {
        if(!sscanf(line, "p<,>'('dfffffp<)>f", modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ))
        {
			if(CountAllLoadedObjects != MAX_LOAD_OBJECTS)
			{
				ObjectsLoaded[CountAllLoadedObjects] = CreateDynamicObject(modelid, SpawnX, SpawnY, SpawnZ, SpawnRotX, SpawnRotY, SpawnRotZ, -1, -1, -1, 200.0);
				CountAllLoadedObjects++;
				objects_loaded++;
			}
        }
    }
	if(CountAllLoadedObjects == MAX_LOAD_OBJECTS)
	{
		printf("ERRO! O limite de %d objetos carregados chegou ao fim.", MAX_LOAD_OBJECTS);
	}
    fclose(file_ptr);
    return printf("Objetos: %d carregado(s) de %s", objects_loaded, filename);
}

stock UnloadAllDynamicObjects()
{
	Loop(o, CountAllLoadedObjects)
	{
		if(IsValidDynamicObject(ObjectsLoaded[o]))
		{
			DestroyDynamicObject(ObjectsLoaded[o]);
			ObjectsLoaded[o] = INVALID_OBJECT_ID;
		}
	}
	CountAllLoadedObjects = 0;
	return 1;
}
// =================================================================================
stock DestroyVehiclesFix()
{
	Loop(o, sizeof(VehiclesFix))
	{
		DestroyVehicle(VehiclesFix[o]);
		VehiclesFix[o] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock LoadVehiclesFix()
{
	// Novatos LS
	VehiclesFix[0] = AddStaticVehicle(481, 688.1968, -476.7924, 15.8489, 179.4085, 3, 3);
	VehiclesFix[1] = AddStaticVehicle(481, 689.0359, -476.7025, 15.8509, 178.9824, 6, 6);
	VehiclesFix[2] = AddStaticVehicle(481, 690.1825, -476.7715, 15.8533, 183.0578, 46, 46);
	VehiclesFix[3] = AddStaticVehicle(481, 691.1677, -477.0065, 15.8517, 190.8689, 65, 9);
	VehiclesFix[4] = AddStaticVehicle(481, 691.9894, -476.9124, 15.8513, 188.6692, 14, 1);
	VehiclesFix[5] = AddStaticVehicle(481, 1410.7099, -1754.0592, 13.0629, 179.8441, 1, 1);
	VehiclesFix[6] = AddStaticVehicle(481, 1412.2462, -1754.0477, 13.0619, 177.8949, 0, 0);
	VehiclesFix[7] = AddStaticVehicle(481, 1413.7998, -1754.0715, 13.0618, 180.2042, 3, 3);
	VehiclesFix[8] = AddStaticVehicle(481, 1415.5063, -1754.0487, 13.0617, 184.4609, 7, 7);
	// Novatos SF
	VehiclesFix[9] = AddStaticVehicle(481, -2695.845703, 361.910614, 3.932306, 0.733456, 3, 3);
	VehiclesFix[10] = AddStaticVehicle(481, -2694.043701, 361.883422, 3.930196, 355.029296, 3, 3);
	VehiclesFix[11] = AddStaticVehicle(481, -2692.166015, 361.937103, 3.929703, 1.443031, 46, 46);
	VehiclesFix[12] = AddStaticVehicle(481, -2690.344482, 361.994537, 3.931268, 358.547363, 46, 46);
	// Novatos LV
	VehiclesFix[13] = AddStaticVehicle(481, 2340.038330, 2351.181884, 10.335412, 321.851867, 3, 3);
	VehiclesFix[14] = AddStaticVehicle(481, 2341.805908, 2351.125732, 10.338060, 324.170166, 3, 3);
	VehiclesFix[15] = AddStaticVehicle(481, 2343.612548, 2351.175537, 10.335776, 327.803405, 7, 7);
	VehiclesFix[16] = AddStaticVehicle(481, 2345.392822, 2351.270019, 10.337895, 334.068450, 7, 7);
	// Pesca
	VehiclesFix[17] = AddStaticVehicle(453, 299.4774, -1907.1052, -0.1853, 173.0878, 56, 56);
	VehiclesFix[18] = AddStaticVehicle(453, 314.1102, -1911.2313, -0.3427, 174.2807, 56, 56);
	VehiclesFix[19] = AddStaticVehicle(453, 324.6967, -1912.6243, -0.2595, 176.0881, 56, 56);
	VehiclesFix[20] = AddStaticVehicle(453, 341.2373, -1914.4210, -0.1548, 176.9595, 56, 56);
	VehiclesFix[21] = AddStaticVehicle(453, 279.8211, -1906.6147, -0.1838, 180.7906, 56, 56);
	// Pizzarias
	VehiclesFix[22] = AddStaticVehicle(448, 782.1902, -1637.1254, 12.9761, 267.3216, 3, 6);
	VehiclesFix[23] = AddStaticVehicle(448, 782.2314, -1633.8530, 12.9840, 267.2000, 3, 6);
	VehiclesFix[24] = AddStaticVehicle(448, 783.4991, -1630.0377, 12.9824, 266.4239, 3, 6);
	VehiclesFix[25] = AddStaticVehicle(448, 782.7540, -1626.6001, 12.9819, 270.2620, 3, 6);
	VehiclesFix[26] = AddStaticVehicle(448, 783.3331, -1623.3042, 12.9800, 264.2143, 3, 6);
	VehiclesFix[27] = AddStaticVehicle(448, 951.1185, -1353.9312, 12.9435, 185.9032, 3, 6);
	VehiclesFix[28] = AddStaticVehicle(448, 954.4941, -1353.8339, 12.9431, 177.1419, 3, 6);
	VehiclesFix[29] = AddStaticVehicle(448, 959.1927, -1354.2557, 12.9433, 173.4076, 3, 6);
	VehiclesFix[30] = AddStaticVehicle(448, 965.3804, -1354.0242, 12.9460, 175.6907, 3, 6);
	VehiclesFix[31] = AddStaticVehicle(448, 1219.7954, -871.9604, 42.4963, 96.7396, 3, 6);
	VehiclesFix[32] = AddStaticVehicle(448, 1220.8403, -876.6669, 42.4911, 98.4534, 3, 6);
	VehiclesFix[33] = AddStaticVehicle(448, 1222.0574, -880.9310, 42.4937, 98.3314, 3, 6);
	VehiclesFix[34] = AddStaticVehicle(448, 1224.1505, -890.3927, 42.4925, 100.2291, 3, 6);
	VehiclesFix[35] = AddStaticVehicle(448, 2399.7251, -1927.0524, 12.9824, 355.2851, 3, 6);
	VehiclesFix[36] = AddStaticVehicle(448, 2396.3977, -1927.6677, 12.9823, 356.9011, 3, 6);
	VehiclesFix[37] = AddStaticVehicle(448, 2393.2600, -1928.0347, 12.9832, 354.6181, 3, 6);
	VehiclesFix[38] = AddStaticVehicle(448, 2389.8535, -1927.6488, 12.9791, 355.2060, 3, 6);
	VehiclesFix[39] = AddStaticVehicle(448, 2386.8105, -1928.1200, 12.9821, 355.3882, 3, 6);
	VehiclesFix[40] = AddStaticVehicle(448, 2383.5359, -1927.7382, 12.9797, 351.9924, 3, 6);
	VehiclesFix[41] = AddStaticVehicle(448, 2391.4792, -1510.4580, 23.4340, 269.9120, 3, 6);
	VehiclesFix[42] = AddStaticVehicle(448, 2391.7864, -1507.4435, 23.4344, 259.9006, 3, 6);
	VehiclesFix[43] = AddStaticVehicle(448, 2391.5024, -1503.8405, 23.4343, 268.1087, 3, 6);
	VehiclesFix[44] = AddStaticVehicle(448, 2391.9729, -1500.6611, 23.4322, 261.1125, 3, 6);
	VehiclesFix[45] = AddStaticVehicle(448, 2391.5256, -1497.3875, 23.4359, 268.4741, 3, 6);
	// UFO
	VehiclesFix[46] = AddStaticVehicle(539, 1905.213623, -496.508270, 17.229856, 355.261108, 0, 3);
	VehiclesFix[47] = AddStaticVehicle(539, 1909.287597, -496.855133, 17.397443, 356.924102, 0, 3);
	VehiclesFix[48] = AddStaticVehicle(539, 1913.506713, -497.326324, 17.572181, 357.796539, 0, 3);
	VehiclesFix[49] = AddStaticVehicle(539, 1918.162963, -497.457214, 17.761236, 0.491934, 0, 3);
	VehiclesFix[50] = AddStaticVehicle(539, 1901.427368, -496.394927, 17.113565, 354.947723, 0, 3);
	// Diversos
	VehiclesFix[51] = AddStaticVehicle(562, 1062.9713, -1752.0845, 13.1024, 89.4533, 35, 1);
	VehiclesFix[52] = AddStaticVehicle(481, 1071.2474, -1701.6482, 13.0631, 181.5246, 151, 151);
	VehiclesFix[53] = AddStaticVehicle(487, 1180.9705, -1360.2562, 14.3758, 124.6010, 1, 3);
	VehiclesFix[54] = AddStaticVehicle(560, 1191.1891, -1332.4547, 13.1677, 1.6184, 1, 1);
	VehiclesFix[55] = AddStaticVehicle(560, 1190.2255, -1315.1104, 13.1832, 2.1980, 1, 1);
	VehiclesFix[56] = AddStaticVehicle(400, 1099.2617, -1775.4307, 13.4370, 91.3508, 123, 1);
	VehiclesFix[57] = AddStaticVehicle(560, 1099.5881, -1754.8317, 13.0536, 270.9626, 151, 151);
	VehiclesFix[58] = AddStaticVehicle(522, 1100.0924, -1760.6233, 12.9077, 270.2411, 3, 8);
	VehiclesFix[59] = AddStaticVehicle(451, 1061.8156, -1766.7231, 13.0897, 89.4208, 0, 0);
	VehiclesFix[60] = AddStaticVehicle(411, 1062.3027, -1737.3207, 13.3344, 91.0134, 6, 6);
	VehiclesFix[61] = AddStaticVehicle(481, 1068.8707, -1701.5640, 13.0640, 173.9488, 149, 149);
	VehiclesFix[62] = AddStaticVehicle(481, 1073.5050, -1701.4948, 13.0620, 180.8355, 144, 144);
	VehiclesFix[63] = AddStaticVehicle(560, 2041.4503, -1411.5532, 16.8728, 87.1014, 1, 1);
	VehiclesFix[64] = AddStaticVehicle(560, 2041.3579, -1415.8104, 16.8726, 89.3850, 1, 1);
	VehiclesFix[65] = AddStaticVehicle(522, 1864.1053, -1397.2374, 13.0527, 264.3358, 6, 25);
	VehiclesFix[66] = AddStaticVehicle(522, 1864.2628, -1398.7808, 13.0442, 265.9897, 7, 79);
	VehiclesFix[67] = AddStaticVehicle(522, 1864.0701, -1400.4785, 13.0513, 269.7195, 8, 82);
	VehiclesFix[68] = AddStaticVehicle(522, 1864.1141, -1401.9966, 13.0501, 270.5911, 36, 105);
	VehiclesFix[69] = AddStaticVehicle(522, 1864.1313, -1403.9852, 13.0484, 271.9888, 39, 106);
	VehiclesFix[70] = AddStaticVehicle(596, 611.9989, -597.0789, 17.0138, 267.9804, 0, 1);
	VehiclesFix[71] = AddStaticVehicle(596, 611.8342, -601.4930, 17.0109, 268.1334, 0, 1);
	VehiclesFix[72] = AddStaticVehicle(411, 667.7022, -580.1765, 16.1894, 272.9611, 154, 154);
	VehiclesFix[73] = AddStaticVehicle(422, 658.1651, -559.4146, 16.3233, 359.3752, 97, 25);
	VehiclesFix[74] = AddStaticVehicle(445, 695.3232, -460.8219, 15.9858, 270.2324, 0, 0);
	VehiclesFix[75] = AddStaticVehicle(560, 708.1064, -464.5726, 16.0407, 89.8470, 21, 1);
	VehiclesFix[76] = AddStaticVehicle(567, 2147.7327, -1203.3367, 23.6602, 262.7780, 6, 6);
	VehiclesFix[77] = AddStaticVehicle(492, 2147.2471, -1198.9424, 23.5698, 271.2524, 0, 0);
	VehiclesFix[78] = AddStaticVehicle(425, 164.6435, 1749.8068, 22.8636, 2.6657, -1, -1);
	return 1;
}

// =================================================================================
stock LoadStaticVehiclesFromFile(filename[])
{
	new File:file_ptr, line[256], Color1, Color2, modelid, Float:SpawnX, Float:SpawnY, Float:SpawnZ, Float:SpawnRot, vehicles_loaded;
	file_ptr = fopen(filename, io_read);
	if(!file_ptr)
	{
		return printf("ERRO! Falha ao carregar veículos do arquivo %s (O arquivo não existe no diretório scriptfiles)!", filename);
	}
	while(fread(file_ptr, line) > 0)
	{
		if(!sscanf(line, "p<,>dffffdd", modelid, SpawnX, SpawnY, SpawnZ, SpawnRot, Color1, Color2))
		{
			if(CountAllLoadedVehicles != MAX_LOAD_VEHICLES)
			{
				VehiclesLoaded[CountAllLoadedVehicles] = AddStaticVehicleEx(modelid, SpawnX, SpawnY, SpawnZ, SpawnRot, Color1, Color2, 30);
				CountAllLoadedVehicles++;
				vehicles_loaded++;
			}
		}
	}
	if(CountAllLoadedVehicles == MAX_LOAD_VEHICLES)
	{
		printf("ERRO! O limite de %d veículos carregados chegou ao fim.", MAX_LOAD_VEHICLES);
	}
	fclose(file_ptr);
	return printf("Veículos: %d carregado(s) de %s", vehicles_loaded, filename);
}

stock UnloadAllStaticVehicles()
{
	Loop(o, CountAllLoadedVehicles)
	{
		if(VehiclesLoaded[o] != INVALID_VEHICLE_ID)
		{
			DestroyVehicle(VehiclesLoaded[o]);
			VehiclesLoaded[o] = INVALID_VEHICLE_ID;
		}
	}
	CountAllLoadedVehicles = 0;
	return 1;
}
// =================================================================================
stock LoadSpawnPosFromFile(filename[])
{
	new File:file_ptr, line[256], Float:SpawnX, Float:SpawnY, Float:SpawnZ, Float:SpawnRot, Interior, VirtualWorld, spawns_loaded;
	file_ptr = fopen(filename, io_read);
	if(!file_ptr)
	{
		return printf("ERRO! Falha ao carregar spawns do arquivo %s (O arquivo não existe no diretório scriptfiles)!", filename);
	}
	while(fread(file_ptr, line) > 0)
	{
		if(!sscanf(line, "p<,>ffffdd", SpawnX, SpawnY, SpawnZ, SpawnRot, Interior, VirtualWorld))
		{
			AddSpawnPos(SpawnX, SpawnY, SpawnZ, SpawnRot, Interior, VirtualWorld);
			spawns_loaded++;
		}
	}
	fclose(file_ptr);
	return printf("Spawns: %d carregado(s) de %s", spawns_loaded, filename);
}

stock KickNPCs()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i))
		{
			Kick(i);
		}
	}
	return 1;
}

stock LoadNPCs()
{
	ConnectNPC("Samanta_Oliveira", "garconete");
	ConnectNPC("Tiago_Meneses", "prefeito");
	ConnectNPC("Ronildo_Buarque", "professor");
	ConnectNPC("Cezar_Camargo", "delegado");
	return 1;
}

// =================================================================================
stock IsPlayerInWater(playerid)
{
	new Float:x, Float:y, Float:pz;
	GetPlayerPos(playerid, x, y, pz);
	new anim = GetPlayerAnimationIndex(playerid);
	if((IsPlayerInArea(playerid, 2032.1371, 1841.2656, 1703.1653, 1467.1099) && pz <= 9.0484) // lv piratenschiff
		|| (IsPlayerInArea(playerid, 2109.0725, 2065.8232, 1962.5355, 10.8547) && pz <= 10.0792) // lv visage
		|| (IsPlayerInArea(playerid, -492.5810, -1424.7122, 2836.8284, 2001.8235) && pz <= 41.06) // lv staucamm
		|| (IsPlayerInArea(playerid, -2675.1492, -2762.1792, -413.3973, -514.3894) && pz <= 4.24) // sf südwesten kleiner teich
		|| (IsPlayerInArea(playerid, -453.9256, -825.7167, -1869.9600, -2072.8215) && pz <= 5.72) // sf gammel teich
		|| (IsPlayerInArea(playerid, 1281.0251, 1202.2368, -2346.7451, -2414.4492) && pz <= 9.3145) // ls neben dem airport
		|| (IsPlayerInArea(playerid, 2012.6154, 1928.9028, -1178.6207, -1221.4043) && pz <= 18.45) // ls mitte teich
		|| (IsPlayerInArea(playerid, 2326.4858, 2295.7471, -1400.2797, -1431.1266) && pz <= 22.615) // ls weiter südöstlich
		|| (IsPlayerInArea(playerid, 2550.0454, 2513.7588, 1583.3751, 1553.0753) && pz <= 9.4171) // lv pool östlich
		|| (IsPlayerInArea(playerid, 1102.3634, 1087.3705, -663.1653, -682.5446) && pz <= 112.45) // ls pool nordwestlich
		|| (IsPlayerInArea(playerid, 1287.7906, 1270.4369, -801.3882, -810.0527) && pz <= 87.123) // pool bei maddog's haus oben
		|| (pz < 1.5)
		|| (anim >=  1538) && (anim <= 1542)
		|| (anim == 1544)
		|| (anim == 1250)
		|| (anim == 1062))
	{
		return 1;
	}
	return 0;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if (x > minx && x < maxx && y > miny && y < maxy) return 1;
	return 0;
}

stock IsPlayerAiming(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
	if(((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
		(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
	return 0;
}

stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

stock IsPlayerInPlace(playerid, Float:XMin, Float:YMin, Float:XMax, Float:YMax)
{
	new RetValue = 0;
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	if(X >= XMin && Y >= YMin && X < XMax && Y < YMax)
	{
		RetValue = 1;
	}
	return RetValue;
}

stock PlayerName(playerid)
{
	new PlayerNameLevel[MAX_PLAYER_NAME];
	GetPlayerName(playerid, PlayerNameLevel, MAX_PLAYER_NAME);
	return PlayerNameLevel;
}

stock PlayerIP(playerid)
{
	new PlayerIPLevel[17];
	GetPlayerIp(playerid, PlayerIPLevel, sizeof(PlayerIPLevel));
	return PlayerIPLevel;
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid, x1, y1, z1);
	GetPlayerPos(playerid2, x2, y2, z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) +floatpower(floatabs(floatsub(y2, y1)), 2)+floatpower(floatabs(floatsub(z2, z1)), 2));
	return floatround(tmpdis);
}

stock GetPlayerArea(playerid)
{
	new str[130];
	format(str,sizeof(str), "%s", Zones[GetPlayerZone(playerid)][zone_name]);
	return str;
}

stock GetPlayerZone(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i<sizeof(Zones); i++)
	{
		if(x > Zones[i][zone_minx] && y > Zones[i][zone_miny] && z > Zones[i][zone_minz] && x < Zones[i][zone_maxx] && y < Zones[i][zone_maxy] && z < Zones[i][zone_maxz])
			return i;
	}
	return false;
}

stock strrest(const string[], &index)
{
	new length = strlen(string);
	while((index < length) && (string[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[128];
	while((index < length) && ((index-offset) < (sizeof(result)-1)))
	{
		result[index-offset] = string[index];
		index++;
	}
	result[index-offset] = EOS;
	return result;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock IsABike(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: result = model;
		default: result = 0;
	}
	return result;
}

stock IsAElegy(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
		case 562: result = model;
		default: result = 0;
	}
	return result;
}

stock chrfind(needle, haystack[], start = 0)
{
	while(haystack[start])
	{
		if(haystack[start++] == needle)
		{
			return start-1;
		}
	}
	return -1;
}

stock GetName(playerid)
{
	new Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	return Name;
}

stock GetCarros(playerid)
{
	new carros, strcarro[256];
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, sizeof(pname));
	for(new p = 0; p < MAX_CONCES; p++)
	{
		format(strcarro, sizeof(strcarro), PASTA_CONCE, p);
		if(dini_Int(strcarro, "TDono") == 1)
		{
			if(strcmp(dini_Get(strcarro, "Dono"), pname, true) == 0)
			{
				carros = carros+1;
			}
		}
	}
	return carros;
}

stock GetProps(playerid)
{
	new props, strprop[256];
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, sizeof (pname));
	for(new p = 0; p < MAX_PROPS; p++)
	{
		format(strprop, sizeof(strprop), PASTA_PROPS, p);
		if(dini_Int(strprop, "TDono") == 1)
		{
			if(strcmp(dini_Get(strprop, "Dono"), pname, true) == 0)
			{
				props = props+1;
			}
		}
	}
	return props;
}

stock GetCasas(playerid)
{
	new casas, strcasa[256];
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pname, sizeof (pname));
	for(new p = 0; p < MAX_CASAS; p++)
	{
		format(strcasa, sizeof(strcasa), PASTA_CASAS, p);
		if(dini_Int(strcasa, "TDono") == 1)
		{
			if(strcmp(dini_Get(strcasa, "Dono"), pname, true) == 0)
			{
				casas = casas+1;
			}
		}
	}
	return casas;
}

IsPlayerInCircle(playerid, Float:x, Float:y, Float:z, radius)
{
	if(GetPlayerDistanceToPoint(playerid, x, y, z) < radius)
	{
		return 1;
	}
	return 0;
}

stock AddFlitsPaal(playerid, modelid, Float:xx, Float:yy, Float:zz, Float:rr, radius, speed)
{
	new str[256];
	new fine[MAX_PLAYERS];
	if(radarobject != maxradar)
	{
		CreateDynamicObject(modelid, xx, yy, zz, 0.0, 0.0, rr, -1, -1, -1, 200.0);
		format(str, sizeof(str), "{00FF00}Radar de Velocidade\n{FF0000}Limite: {00FF00}%d {FF0000}KM/h", speed);
		CreateDynamic3DTextLabel(str, -1, xx, yy, zz, 60.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 200.0);
		radarobject++;
	}
	if((distance1[playerid]) > speed)
	{
		if(IsPlayerInCircle(playerid, xx, yy, zz, radius) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			infratores[playerid] = 1;
			fine[playerid] = ((distance1[playerid]*17/10)-speed);
			PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
			format(str, sizeof(str), "(RADAR) O limite de velocidade é %d KM/H você passou a %d KM/H e cometeu uma infração!", speed, distance1[playerid], fine[playerid]);
			SendClientMessage(playerid, VERDEFRACO, str);
			format(str, sizeof(str), "(RADAR) %s cometeu uma infração de trânsito e pode ser multado(a). ( /infratores )", PlayerName(playerid));
			SendClientMessageToAll(roxo, str);
		}
	}
	return 1;
}

// SNAKE
#if defined SnakeUser
stock MoveTextDraw(id, playerid)
{
	new stroka = 0;
	new stolb = 1;

	if(id != 0)
	{
		for(new i; i<PosSnake[playerid][id-1]; i++)
		{
			stroka++;
			if(stroka == 15)
			{
				stolb++;
				stroka = 0;
			}
		}
		Snake[playerid][id] = TextDrawCreate(200.000000+(15*(stroka)), 150.000000+(13.5*stolb), "~n~");
		TextDrawUseBox(Snake[playerid][id], 1);
		TextDrawBoxColor(Snake[playerid][id], 0x0000ffFF);
		TextDrawTextSize(Snake[playerid][id], 10.000000, 10.000000);
		TextDrawAlignment(Snake[playerid][id], 2);
		TextDrawBackgroundColor(Snake[playerid][id], 0x000000ff);
		TextDrawLetterSize(Snake[playerid][id], 1.000000, 1.000000);
		TextDrawColor(Snake[playerid][id], 0xffffffff);
		TextDrawShowForPlayer(playerid, Snake[playerid][id]);
		PosSnake[playerid][id] = PosSnake[playerid][id-1];
	}
	else
	{
		SideSystem(playerid);
	}
	return 1;
}

stock CheckGameOver(playerid)
{
	new LastID;
	for(new i; i<23; i++)
	{
		if(PosSnake[playerid][i] == -1)
		{
			LastID = i;
			break;
		}
	}
	new str[6];
	format(str, sizeof(str), "%d/20", LastID-2);
	TextDrawSetString(sCount[playerid], str);
	if(LastID-2 == 20)
	{
		GameOver(playerid);
		return 1;
	}
	switch(Side[playerid])
	{
		case 0:
		{
			switch(PosSnake[playerid][0])
			{
				case 0..14:
				{
					GameOver(playerid);
					return 1;
				}
			}
			for(new i = LastID - 1; i >= 0; --i)
			{
				if(PosSnake[playerid][i] == PosSnake[playerid][0]-15)
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
		case 1:
		{
			switch(PosSnake[playerid][0])
			{
				case 210..224:
				{
					GameOver(playerid);
					return 1;
				}
			}
			for(new i = LastID - 1; i >= 0; --i)
			{
				if(PosSnake[playerid][i] == PosSnake[playerid][0]+15)
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i; i < 15; i++)
			{
				if(PosSnake[playerid][0] == 210-15*i)
				{
					GameOver(playerid);
					return 1;
				}
			}
			for(new i = LastID - 1; i >= 0; --i)
			{
				if(PosSnake[playerid][i] == PosSnake[playerid][0]-1)
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i; i < 15; i++)
			{
				if(PosSnake[playerid][0] == 224-15*i)
				{
					GameOver(playerid);
					return 1;
				}
			}
			for(new i = LastID - 1; i >= 0; --i)
			{
				if(PosSnake[playerid][i] == PosSnake[playerid][0]+1)
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
	}
	return 0;
}

stock GameOver(playerid)
{
	if(PosSnake[playerid][21] != -1)
	{
		new string[256];
		new aname[MAX_PLAYER_NAME];
		GivePlayerGrana(playerid, 5000);
		GetPlayerName(playerid, aname, MAX_PLAYER_NAME);
		format(string, sizeof(string), "%s conseguiu passar de level no Snake e ganhou $5000!", aname);
		SendClientMessageToAll(Azul, string);
	}
	else
	{
		GameTextForPlayer(playerid, "~r~Game Over!", 5000, 3);
	}
	KillTimer(SnakeTimer[playerid]);
	TogglePlayerControllable(playerid, 1);
	TextDrawHideForPlayer(playerid, Background);
	SnakeActive[playerid] = 0;
	Side[playerid] = 0;
	TextDrawHideForPlayer(playerid, CellText[playerid]);
	TextDrawDestroy(CellText[playerid]);
	TextDrawHideForPlayer(playerid, sCount[playerid]);
	TextDrawDestroy(sCount[playerid]);
	Growth[playerid] = 0;
	for(new j; j<23; j++)
	{
		if(PosSnake[playerid][j] != -1)
		{
			TextDrawHideForPlayer(playerid, Snake[playerid][j]);
			TextDrawDestroy(Snake[playerid][j]);
		}
	}
	switch(sLevel[playerid])
	{
		case 1:
		{
			TextDrawHideForPlayer(playerid, LevelText[0]);
			TextDrawHideForPlayer(playerid, LevelText[1]);
		}
		case 2:
		{
			TextDrawHideForPlayer(playerid, LevelText[2]);
			TextDrawHideForPlayer(playerid, LevelText[3]);
		}
		case 3:
		{
			for(new i=4; i<sizeof(LevelText); i++)
			{
				TextDrawHideForPlayer(playerid, LevelText[i]);
			}
		}
	}
}

stock SideSystem(playerid)
{
	new stroka = 0;
	new stolb = 1;

	switch(Side[playerid])
	{
		case 0:
		{
			for(new i; i<PosSnake[playerid][0]-15; i++)
			{
				stroka++;
				if(stroka == 15)
				{
					stolb++;
					stroka = 0;
				}
			}
			PosSnake[playerid][0] = PosSnake[playerid][0]-15;
			Button[playerid] = 0;
		}
		case 1:
		{
			for(new i; i<PosSnake[playerid][0]+15; i++)
			{
				stroka++;
				if(stroka == 15)
				{
					stolb++;
					stroka = 0;
				}
			}
			PosSnake[playerid][0] = PosSnake[playerid][0]+15;
			Button[playerid] = 1;
		}
		case 2:
		{
			for(new i; i<PosSnake[playerid][0]-1; i++)
			{
				stroka++;
				if(stroka == 15)
				{
					stolb++;
					stroka = 0;
				}
			}
			PosSnake[playerid][0] = PosSnake[playerid][0]-1;
			Button[playerid] = 2;
		}
		case 3:
		{
			for(new i; i<PosSnake[playerid][0]+1; i++)
			{
				stroka++;
				if(stroka == 15)
				{
					stolb++;
					stroka = 0;
				}
			}
			PosSnake[playerid][0] = PosSnake[playerid][0]+1;
			Button[playerid] = 3;
		}
	}
	if(PosSnake[playerid][0] == Cell[playerid])
	{
		TextDrawHideForPlayer(playerid, CellText[playerid]);
		TextDrawDestroy(CellText[playerid]);
		RandomCell(playerid);
		Growth[playerid] = 1;
	}
	Snake[playerid][0] = TextDrawCreate(200.000000+(15*(stroka)), 150.000000+(13.5*stolb), "~n~");
	TextDrawUseBox(Snake[playerid][0], 1);
	TextDrawBoxColor(Snake[playerid][0], 0x0000ffFF);
	TextDrawTextSize(Snake[playerid][0], 10.000000, 10.000000);
	TextDrawAlignment(Snake[playerid][0], 2);
	TextDrawBackgroundColor(Snake[playerid][0], 0x000000ff);
	TextDrawLetterSize(Snake[playerid][0], 1.000000, 1.000000);
	TextDrawColor(Snake[playerid][0], 0xffffffff);
	switch(sLevel[playerid])
	{
		case 1:
		{
			for(new i; i<sizeof(Level1); i++)
			{
				if(Level1[i] == PosSnake[playerid][0])
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i; i<sizeof(Level2); i++)
			{
				if(Level2[i] == PosSnake[playerid][0])
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i; i<sizeof(Level3); i++)
			{
				if(Level3[i] == PosSnake[playerid][0])
				{
					GameOver(playerid);
					return 1;
				}
			}
		}
	}
	TextDrawShowForPlayer(playerid, Snake[playerid][0]);
	return 1;
}

stock StartGame(playerid, level)
{
	for(new i; i<23; i++)
	{
		PosSnake[playerid][i] = -1;
	}
	sLevel[playerid] = level+1;
	switch(level)
	{
		case 0:
		{
			TextDrawShowForPlayer(playerid, LevelText[0]);
			TextDrawShowForPlayer(playerid, LevelText[1]);
			PosSnake[playerid][1] = 156;
			PosSnake[playerid][0] = 157;
		}
		case 1:
		{
			TextDrawShowForPlayer(playerid, LevelText[2]);
			TextDrawShowForPlayer(playerid, LevelText[3]);
			PosSnake[playerid][1] = 156;
			PosSnake[playerid][0] = 157;
		}
		case 2:
		{
			PosSnake[playerid][1] = 186;
			PosSnake[playerid][0] = 187;
			for(new i=4; i<sizeof(LevelText); i++)
			{
				TextDrawShowForPlayer(playerid, LevelText[i]);
			}
		}
	}
	TogglePlayerControllable(playerid, 0);
	SnakeActive[playerid] = 1;

	sCount[playerid] = TextDrawCreate(284.000000, 371.000000, "0/20");
	TextDrawBackgroundColor(sCount[playerid], 65535);
	TextDrawFont(sCount[playerid], 3);
	TextDrawLetterSize(sCount[playerid], 0.500000, 1.000000);
	TextDrawColor(sCount[playerid], -1);
	TextDrawSetOutline(sCount[playerid], 1);
	TextDrawSetProportional(sCount[playerid], 1);
	TextDrawShowForPlayer(playerid, sCount[playerid]);

	MoveTextDraw(1, playerid);
	MoveTextDraw(0, playerid);
	Side[playerid] = 0;
	RandomCell(playerid);
	TextDrawShowForPlayer(playerid, Background);
	Button[playerid] = 0;
	SetTimerEx("snakeupdate", 2000, 0, "i", playerid);
}

stock RandomCell(playerid)
{
	Cell[playerid] = random(225);
	new LastID;
	for(new i; i<23; i++)
	{
		if(PosSnake[playerid][i] == -1)
		{
			LastID = i;
			break;
		}
	}
	for(new i = LastID - 1; i >= 0; --i)
	{
		if(PosSnake[playerid][i] == Cell[playerid])
		{
			RandomCell(playerid);
			return 1;
		}
	}
	switch(sLevel[playerid])
	{
		case 1:
		{
			for(new i; i<sizeof(Level1); i++)
			{
				if(Level1[i] == Cell[playerid])
				{
					RandomCell(playerid);
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i; i<sizeof(Level2); i++)
			{
				if(Level2[i] == Cell[playerid])
				{
					RandomCell(playerid);
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i; i<sizeof(Level3); i++)
			{
				if(Level3[i] == Cell[playerid])
				{
					RandomCell(playerid);
					return 1;
				}
			}
		}
	}

	new stroka = 0;
	new stolb = 1;

	for(new i; i<Cell[playerid]; i++)
	{
		stroka++;
		if(stroka == 15)
		{
			stolb++;
			stroka = 0;
		}
	}
	CellText[playerid] = TextDrawCreate(200.000000+(15*stroka), 150.000000+(13.5*stolb), "~n~");
	TextDrawUseBox(CellText[playerid], 1);
	TextDrawBoxColor(CellText[playerid], 0xff0000FF);
	TextDrawTextSize(CellText[playerid], 10.000000, 10.000000);
	TextDrawAlignment(CellText[playerid], 2);
	TextDrawBackgroundColor(CellText[playerid], 0x000000ff);
	TextDrawLetterSize(CellText[playerid], 1.000000, 1.000000);
	TextDrawColor(CellText[playerid], 0xffffffff);
	TextDrawShowForPlayer(playerid, CellText[playerid]);
	return 1;
}
#endif

#if defined BomberUser
stock UpdateTextDraw(playerid)
{
	new text[256] = " ";
	if(bptype[playerid] == 0)
	{
		text = "~r~Desligado~w~";
		SendClientMessage(playerid, COLOR_RED, "Sua aeronave está armada com bombas.");
		SendClientMessage(playerid, COLOR_RED, "Para selecionar os tipos de bombas ao lado use 8 e 2 do Num Lock.");
		SendClientMessage(playerid, COLOR_RED, "Para lançar as bombas use Espaço.");
	}
	else
	{
		text = "Desligado";
	}
	for(new i = 1; i < sizeof(gBombTypes); i ++)
	{
		if(gVehicleBombs[vmid[playerid]][i + 1] == 1)
		{
			if(bptype[playerid] == i)
			{
				if(bfree[playerid] || !IsPlayerAllowedToDropBomb(playerid))
				{
					format(text, sizeof(text), "%s~n~~r~%s~w~", text, gBombTypes[i][bombName]);
				}
				else
				{
					format(text, sizeof(text), "%s~n~~g~%s~w~", text, gBombTypes[i][bombName]);
				}
			}
			else
			{
				format(text, sizeof(text), "%s~n~%s", text, gBombTypes[i][bombName]);
			}
		}
	}
	TextDrawSetString(bombtext[playerid], text);
}
#endif

stock GetPlayerDistanceToPoint(playerid, Float:x, Float:y, Float:z)
{
	new Float:tmpdis;
	new Float:px, Float:py, Float:pz;
	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerPos(playerid, px, py, pz);
	}
	else
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
	}
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x, px)), 2)+floatpower(floatabs(floatsub(y, py)), 2)+floatpower(floatabs(floatsub(z, pz)), 2));
	return floatround(tmpdis);
}

#if defined BomberUser
stock GetVehicleStatID(modelid)
{
	for(new i = 0; i < sizeof gVehicleBombs; i ++)
	{
		if(gVehicleBombs[i][0] == modelid)
		{
			return i;
		}
	}
	return -1;
}

IsPlayerAllowedToDropBomb(playerid)
{
	#pragma unused playerid
	// This is used to restrict the use of bombs for single players
	// For example to make them available for special teams only, ...
	// bptype[playerid] is the index of the selected bomb
	return 1;
}
#endif
// =================================================================================
/* http://life-samp.blogspot.com/ */
// ---------------------------------------------------------------------------------
/* http://life-samp.blogspot.com/ */
// ---------------------------------------------------------------------------------
/* http://life-samp.blogspot.com/ */
// ---------------------------------------------------------------------------------
